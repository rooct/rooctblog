"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1937],{3905:function(e,n,r){r.d(n,{Zo:function(){return m},kt:function(){return d}});var t=r(7294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},m=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),u=p(r),d=s,v=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return r?t.createElement(v,i(i({ref:n},m),{},{components:r})):t.createElement(v,i({ref:n},m))}));function d(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=r.length,i=new Array(o);i[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:s,i[1]=a;for(var p=2;p<o;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4871:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return m}});var t=r(7462),s=r(3366),o=(r(7294),r(3905)),i=["components"],a={},l="\u7248\u672c\u53f7",p={unversionedId:"rusty/devtools/version",id:"rusty/devtools/version",isDocsHomePage:!1,title:"\u7248\u672c\u53f7",description:"\u89e3\u6790\u5e76\u589e\u52a0\u7248\u672c\u53f7",source:"@site/docs/rusty/devtools/version.md",sourceDirName:"rusty/devtools",slug:"/rusty/devtools/version",permalink:"/rooctblog/docs/rusty/devtools/version",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u65e5\u5fd7",permalink:"/rooctblog/docs/rusty/devtools/log"},next:{title:"CSV",permalink:"/rooctblog/docs/rusty/encoding/csv"}},m=[{value:"\u89e3\u6790\u5e76\u589e\u52a0\u7248\u672c\u53f7",id:"\u89e3\u6790\u5e76\u589e\u52a0\u7248\u672c\u53f7",children:[]},{value:"\u89e3\u6790\u4e00\u4e2a\u590d\u6742\u7684\u7248\u672c\u53f7\u5b57\u7b26\u4e32",id:"\u89e3\u6790\u4e00\u4e2a\u590d\u6742\u7684\u7248\u672c\u53f7\u5b57\u7b26\u4e32",children:[]},{value:"\u68c0\u67e5\u7ed9\u5b9a\u7684\u7248\u672c\u53f7\u662f\u5426\u662f\u9884\u53d1\u5e03",id:"\u68c0\u67e5\u7ed9\u5b9a\u7684\u7248\u672c\u53f7\u662f\u5426\u662f\u9884\u53d1\u5e03",children:[]},{value:"\u627e\u51fa\u7ed9\u5b9a\u8303\u56f4\u5185\u7684\u6700\u65b0\u7248\u672c",id:"\u627e\u51fa\u7ed9\u5b9a\u8303\u56f4\u5185\u7684\u6700\u65b0\u7248\u672c",children:[]},{value:"\u68c0\u67e5\u5916\u90e8\u547d\u4ee4\u7684\u7248\u672c\u53f7\u517c\u5bb9\u6027",id:"\u68c0\u67e5\u5916\u90e8\u547d\u4ee4\u7684\u7248\u672c\u53f7\u517c\u5bb9\u6027",children:[]}],c={toc:m};function u(e){var n=e.components,r=(0,s.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u7248\u672c\u53f7"},"\u7248\u672c\u53f7"),(0,o.kt)("h3",{id:"\u89e3\u6790\u5e76\u589e\u52a0\u7248\u672c\u53f7"},"\u89e3\u6790\u5e76\u589e\u52a0\u7248\u672c\u53f7"),(0,o.kt)("p",null,"\u4e0b\u9762\u4f8b\u5b50\u4f7f\u7528 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/semver/*/semver/struct.Version.html#method.parse"},"Version::parse")," \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/semver/*/semver/struct.Version.html"},"semver::Version")," \u7248\u672c\u53f7\uff0c\u7136\u540e\u5c06\u5b83\u7684 patch, minor, major \u7248\u672c\u53f7\u90fd\u589e\u52a0 1\u3002"),(0,o.kt)("p",null,"\u6ce8\u610f\uff0c\u4e3a\u4e86\u7b26\u5408",(0,o.kt)("a",{parentName:"p",href:"http://semver.org"},"\u8bed\u4e49\u5316\u7248\u672c\u7684\u8bf4\u660e"),"\uff0c\u589e\u52a0 ",(0,o.kt)("inlineCode",{parentName:"p"},"minor")," \u7248\u672c\u65f6\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"patch")," \u7248\u672c\u4f1a\u88ab\u91cd\u8bbe\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"\uff0c\u5f53\u589e\u52a0 ",(0,o.kt)("inlineCode",{parentName:"p"},"major")," \u7248\u672c\u65f6\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"minor")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"patch")," \u90fd\u5c06\u88ab\u91cd\u8bbe\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use semver::{Version, SemVerError};\n\nfn main -> Result<, SemVerError> {\n    let mut parsed_version = Version::parse("0.2.6")?;\n\n    assert_eq!(\n        parsed_version,\n        Version {\n            major: 0,\n            minor: 2,\n            patch: 6,\n            pre: vec![],\n            build: vec![],\n        }\n    );\n\n    parsed_version.increment_patch;\n    assert_eq!(parsed_version.to_string, "0.2.7");\n    println!("New patch release: v{}", parsed_version);\n\n    parsed_version.increment_minor;\n    assert_eq!(parsed_version.to_string, "0.3.0");\n    println!("New minor release: v{}", parsed_version);\n\n    parsed_version.increment_major;\n    assert_eq!(parsed_version.to_string, "1.0.0");\n    println!("New major release: v{}", parsed_version);\n\n    Ok()\n}\n')),(0,o.kt)("h3",{id:"\u89e3\u6790\u4e00\u4e2a\u590d\u6742\u7684\u7248\u672c\u53f7\u5b57\u7b26\u4e32"},"\u89e3\u6790\u4e00\u4e2a\u590d\u6742\u7684\u7248\u672c\u53f7\u5b57\u7b26\u4e32"),(0,o.kt)("p",null,"\u8fd9\u91cc\u7684\u7248\u672c\u53f7\u5b57\u7b26\u4e32\u8fd8\u5c06\u5305\u542b ",(0,o.kt)("inlineCode",{parentName:"p"},"SemVer")," \u4e2d\u5b9a\u4e49\u7684\u9884\u53d1\u5e03\u548c\u6784\u5efa\u5143\u4fe1\u606f\u3002"),(0,o.kt)("p",null,"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e3a\u4e86\u7b26\u5408 ",(0,o.kt)("inlineCode",{parentName:"p"},"SemVer")," \u7684\u89c4\u5219\uff0c\u6784\u5efa\u5143\u4fe1\u606f\u867d\u7136\u4f1a\u88ab\u89e3\u6790\uff0c\u4f46\u662f\u5728\u505a\u7248\u672c\u53f7\u6bd4\u8f83\u65f6\uff0c\u8be5\u4fe1\u606f\u4f1a\u88ab\u5ffd\u7565\u3002\u6362\u800c\u8a00\u4e4b\uff0c\u5373\u4f7f\u4e24\u4e2a\u7248\u672c\u53f7\u7684\u6784\u5efa\u5b57\u7b26\u4e32\u4e0d\u540c\uff0c\u5b83\u4eec\u7684\u7248\u672c\u53f7\u4f9d\u7136\u53ef\u80fd\u76f8\u540c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use semver::{Identifier, Version, SemVerError};\n\nfn main -> Result<, SemVerError> {\n    let version_str = "1.0.49-125+g72ee7853";\n    let parsed_version = Version::parse(version_str)?;\n\n    assert_eq!(\n        parsed_version,\n        Version {\n            major: 1,\n            minor: 0,\n            patch: 49,\n            pre: vec![Identifier::Numeric(125)],\n            build: vec![],\n        }\n    );\n    assert_eq!(\n        parsed_version.build,\n        vec![Identifier::AlphaNumeric(String::from("g72ee7853"))]\n    );\n\n    let serialized_version = parsed_version.to_string;\n    assert_eq!(&serialized_version, version_str);\n\n    Ok()\n}\n')),(0,o.kt)("h3",{id:"\u68c0\u67e5\u7ed9\u5b9a\u7684\u7248\u672c\u53f7\u662f\u5426\u662f\u9884\u53d1\u5e03"},"\u68c0\u67e5\u7ed9\u5b9a\u7684\u7248\u672c\u53f7\u662f\u5426\u662f\u9884\u53d1\u5e03"),(0,o.kt)("p",null,"\u4e0b\u9762\u4f8b\u5b50\u7ed9\u51fa\u4e24\u4e2a\u7248\u672c\u53f7\uff0c\u7136\u540e\u901a\u8fc7 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/semver/1.0.7/semver/struct.Version.html#method.is_prerelease"},"is_prerelease")," \u5224\u65ad\u54ea\u4e2a\u662f\u9884\u53d1\u5e03\u7684\u7248\u672c\u53f7\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use semver::{Version, SemVerError};\n\nfn main -> Result<, SemVerError> {\n    let version_1 = Version::parse("1.0.0-alpha")?;\n    let version_2 = Version::parse("1.0.0")?;\n\n    assert!(version_1.is_prerelease);\n    assert!(!version_2.is_prerelease);\n\n    Ok()\n}\n')),(0,o.kt)("h3",{id:"\u627e\u51fa\u7ed9\u5b9a\u8303\u56f4\u5185\u7684\u6700\u65b0\u7248\u672c"},"\u627e\u51fa\u7ed9\u5b9a\u8303\u56f4\u5185\u7684\u6700\u65b0\u7248\u672c"),(0,o.kt)("p",null,"\u4e0b\u9762\u4f8b\u5b50\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7248\u672c\u53f7\u5217\u8868\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5176\u4e2d\u6700\u65b0\u7684\u7248\u672c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'#use error_chain::error_chain;\n\nuse semver::{Version, VersionReq};\n\n#error_chain! {\n#    foreign_links {\n#        SemVer(semver::SemVerError);\n#        SemVerReq(semver::ReqParseError);\n#    }\n3}\n\nfn find_max_matching_version<\'a, I>(version_req_str: &str, iterable: I) -> Result<Option<Version>>\nwhere\n    I: IntoIterator<Item = &\'a str>,\n{\n    let vreq = VersionReq::parse(version_req_str)?;\n\n    Ok(\n        iterable\n            .into_iter\n            .filter_map(|s| Version::parse(s).ok)\n            .filter(|s| vreq.matches(s))\n            .max,\n    )\n}\n\nfn main -> Result<> {\n    assert_eq!(\n        find_max_matching_version("<= 1.0.0", vec!["0.9.0", "1.0.0", "1.0.1"])?,\n        Some(Version::parse("1.0.0")?)\n    );\n\n    assert_eq!(\n        find_max_matching_version(\n            ">1.2.3-alpha.3",\n            vec![\n                "1.2.3-alpha.3",\n                "1.2.3-alpha.4",\n                "1.2.3-alpha.10",\n                "1.2.3-beta.4",\n                "3.4.5-alpha.9",\n            ]\n        )?,\n        Some(Version::parse("1.2.3-beta.4")?)\n    );\n\n    Ok()\n}\n')),(0,o.kt)("h3",{id:"\u68c0\u67e5\u5916\u90e8\u547d\u4ee4\u7684\u7248\u672c\u53f7\u517c\u5bb9\u6027"},"\u68c0\u67e5\u5916\u90e8\u547d\u4ee4\u7684\u7248\u672c\u53f7\u517c\u5bb9\u6027"),(0,o.kt)("p",null,"\u4e0b\u9762\u5c06\u901a\u8fc7 ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/process/struct.Command.html"},"Command")," \u6765\u6267\u884c\u7cfb\u7edf\u547d\u4ee4 ",(0,o.kt)("inlineCode",{parentName:"p"},"git --version"),"\uff0c\u5e76\u5bf9\u8be5\u7cfb\u7edf\u547d\u4ee4\u8fd4\u56de\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"git")," \u7248\u672c\u53f7\u8fdb\u884c\u89e3\u6790\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'#use error_chain::error_chain;\n\nuse std::process::Command;\nuse semver::{Version, VersionReq};\n\n#error_chain! {\n#    foreign_links {\n#        Io(std::io::Error);\n#        Utf8(std::string::FromUtf8Error);\n#        SemVer(semver::SemVerError);\n#        SemVerReq(semver::ReqParseError);\n#    }\n#}\n\nfn main -> Result<> {\n    let version_constraint = "> 1.12.0";\n    let version_test = VersionReq::parse(version_constraint)?;\n    let output = Command::new("git").arg("--version").output?;\n\n    if !output.status.success {\n        error_chain::bail!("Command executed with failing error code");\n    }\n\n    let stdout = String::from_utf8(output.stdout)?;\n    let version = stdout.split(" ").last.ok_or_else(|| {\n        "Invalid command output"\n    })?;\n    let parsed_version = Version::parse(version)?;\n\n    if !version_test.matches(&parsed_version) {\n        error_chain::bail!("Command version lower than minimum supported version (found {}, need {})",\n            parsed_version, version_constraint);\n    }\n\n    Ok()\n}\n')))}u.isMDXComponent=!0}}]);