"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8282],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return y}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),y=i,f=p["".concat(c,".").concat(y)]||p[y]||d[y]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},609:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],s={title:"Solidity\u7b7e\u540d\u9a8c\u8bc1"},c=void 0,l={unversionedId:"solidity/utils/Verify",id:"solidity/utils/Verify",isDocsHomePage:!1,title:"Solidity\u7b7e\u540d\u9a8c\u8bc1",description:"Solidity-\u94fe\u4e0b\u7b7e\u540d\u7b7e\u540d-\u94fe\u4e0a\u9a8c\u8bc1\uff1b\u94fe\u4e0b\u4f7f\u7528 Ether.js \u8fdb\u884c\u7b7e\u540d\uff0c\u94fe\u4e0a\u4f7f\u7528 OpenZeppelin ECDSA \u9a8c\u8bc1",source:"@site/docs/solidity/utils/Verify.md",sourceDirName:"solidity/utils",slug:"/solidity/utils/Verify",permalink:"/rooctblog/docs/solidity/utils/Verify",tags:[],version:"current",frontMatter:{title:"Solidity\u7b7e\u540d\u9a8c\u8bc1"},sidebar:"docs",previous:{title:"SushiBar",permalink:"/rooctblog/docs/solidity/projects/SushiBar"}},u=[{value:"ethers.js",id:"ethersjs",children:[]},{value:"contract",id:"contract",children:[]}],d={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"solidity-\u94fe\u4e0b\u7b7e\u540d\u7b7e\u540d-\u94fe\u4e0a\u9a8c\u8bc1\u94fe\u4e0b\u4f7f\u7528-etherjs-\u8fdb\u884c\u7b7e\u540d\u94fe\u4e0a\u4f7f\u7528-openzeppelin-ecdsa-\u9a8c\u8bc1"},"Solidity-\u94fe\u4e0b\u7b7e\u540d\u7b7e\u540d-\u94fe\u4e0a\u9a8c\u8bc1\uff1b\u94fe\u4e0b\u4f7f\u7528 Ether.js \u8fdb\u884c\u7b7e\u540d\uff0c\u94fe\u4e0a\u4f7f\u7528 OpenZeppelin ECDSA \u9a8c\u8bc1"),(0,a.kt)("h3",{id:"ethersjs"},"ethers.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'const provider = new ethers.providers.Web3Provider(ethereum);\n      let signer = await provider.getSigner();\n      // 2. \u7b7e\u540d\u5185\u5bb9\u8fdb\u884c solidityKeccak256\u683c\u5f0f Hash\n      let message = ethers.utils.solidityKeccak256(["string"], ["HelloWorld"]);\n      // 3.\u8f6c\u6210UTF8 bytes\n      let arrayifyMessage = ethers.utils.arrayify(message);\n      // 4.\u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u6d88\u606f\u7b7e\u540d\n      let flatSignature = await signer.signMessage(arrayifyMessage);\n')),(0,a.kt)("h3",{id:"contract"},"contract"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";\n\ncontract Verification {\n    address owner;\n    using ECDSA for bytes32;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function isMessageValid(bytes memory _signature)\n        public\n        view\n        returns (address, bool)\n    {\n        // 1. \u5bf9\u7b7e\u540d\u4fe1\u606f\u8fdb\u884c abi \u7f16\u7801\n        bytes memory abiEncode = abi.encodePacked("HelloWorld");\n\n        // 2. \u518d\u8fdb\u884c keccak256 Hash\u8fd0\u7b97\n        bytes32 messagehash = keccak256(abiEncode);\n        \n        // 3. \u6dfb\u52a0\u524d\u7f00\uff0c\u53ef\u4ee5\u5c06\u8ba1\u7b97\u51fa\u7684\u4ee5\u592a\u574a\u7279\u5b9a\u7684\u7b7e\u540d\u3002\u8fd9\u53ef\u4ee5\u9632\u6b62\u6076\u610f DApp \u53ef\u4ee5\u7b7e\u7f72\u4efb\u610f\u6570\u636e\uff08\u4f8b\u5982\u4ea4\u6613\uff09\u5e76\u4f7f\u7528\u7b7e\u540d\u6765\u5192\u5145\u53d7\u5bb3\u8005\u7684\u6ee5\u7528\u884c\u4e3a\u3002\n        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(messagehash);\n        \n        // 4. \u4ece\u7b7e\u540d\u6062\u590d\u5730\u5740\n        address signer = ECDSA.recover(ethSignedMessageHash,_signature);\n\n        if (owner == signer) {\n            return (signer, true);\n        } else {\n            return (signer, false);\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bytes memory bytecode = type(SmartVault).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(address(this)));\n        address _smartVault;\n        assembly {\n            _smartVault := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n\n        SmartVault(_smartVault).initialize(usdtToken, this);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n    require(key.token0 < key.token1);\n    pool = address(\n        uint256(\n            keccak256(\n                abi.encodePacked(\n                    hex'ff',\n                    factory,\n                    keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                    POOL_INIT_CODE_HASH\n                )\n            )\n        )\n    );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { ethers } from "ethers";\n\nexport async function getSignData(addr: string, originPerform: any) {\n    let privateKey = "";\n    let signer = new ethers.Wallet(privateKey);\n\n    const Permit = [\n        { name: \'owner\', type: \'address\' },\n        { name: \'value\', type: \'uint256\' },\n        { name: \'deadline\', type: \'uint256\' },\n    ]\n    let amount = ethers.utils.parseEther(String(originPerform));\n    let deadLine = Math.round(new Date().getTime() / 1000) + 120;\n\n    let result = await signer._signTypedData({\n        version: \'1\',\n        chainId: 256,\n        verifyingContract: "0xF040A6A3CfeF6890Cd278A1017bdA077021cd11b",\n    }, {\n        Permit\n    }, {\n        owner: addr,\n        value: amount,\n        deadline: deadLine,\n    });\n\n    const signature = result.substring(2);\n    const r = "0x" + signature.substring(0, 64);\n    const s = "0x" + signature.substring(64, 128);\n    const v = parseInt(signature.substring(128, 130), 16);\n    return {\n        "value": amount,\n        "deadline": deadLine,\n        "s": s,\n        "r": r,\n        "v": v\n    }\n}\n')))}p.isMDXComponent=!0}}]);