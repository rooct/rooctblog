"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5227],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1083:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={title:"Error",version:"0.8.10",description:"Example of how to throw errors in Solidity"},u=void 0,c={unversionedId:"solidity/example/Error",id:"solidity/example/Error",isDocsHomePage:!1,title:"Error",description:"Example of how to throw errors in Solidity",source:"@site/docs/solidity/example/Error.md",sourceDirName:"solidity/example",slug:"/solidity/example/Error",permalink:"/rooctblog/docs/solidity/example/Error",tags:[],version:"current",frontMatter:{title:"Error",version:"0.8.10",description:"Example of how to throw errors in Solidity"},sidebar:"docs",previous:{title:"Enum",permalink:"/rooctblog/docs/solidity/example/Enum"},next:{title:"Ether and Wei",permalink:"/rooctblog/docs/solidity/example/EtherUnits"}},s=[],p={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"An error will undo all changes made to the state during a transaction."),(0,a.kt)("p",null,"You can throw an error by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"require"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"revert")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"assert"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"require")," is used to validate inputs and conditions before execution."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"revert")," is similar to ",(0,a.kt)("inlineCode",{parentName:"li"},"require"),". See the code below for details."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"assert")," is used to check for code that should never be false. Failing\nassertion probably means that there is a bug.")),(0,a.kt)("p",null,"Use custom error to save gas."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract Error {\n    function testRequire(uint _i) public pure {\n        // Require should be used to validate conditions such as:\n        // - inputs\n        // - conditions before execution\n        // - return values from calls to other functions\n        require(_i > 10, "Input must be greater than 10");\n    }\n\n    function testRevert(uint _i) public pure {\n        // Revert is useful when the condition to check is complex.\n        // This code does the exact same thing as the example above\n        if (_i <= 10) {\n            revert("Input must be greater than 10");\n        }\n    }\n\n    uint public num;\n\n    function testAssert() public view {\n        // Assert should only be used to test for internal errors,\n        // and to check invariants.\n\n        // Here we assert that num is always equal to 0\n        // since it is impossible to update the value of num\n        assert(num == 0);\n    }\n\n    // custom error\n    error InsufficientBalance(uint balance, uint withdrawAmount);\n\n    function testCustomError(uint _withdrawAmount) public view {\n        uint bal = address(this).balance;\n        if (bal < _withdrawAmount) {\n            revert InsufficientBalance({balance: bal, withdrawAmount: _withdrawAmount});\n        }\n    }\n}\n\n')),(0,a.kt)("p",null,"Here is another example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract Account {\n    uint public balance;\n    uint public constant MAX_UINT = 2**256 - 1;\n\n    function deposit(uint _amount) public {\n        uint oldBalance = balance;\n        uint newBalance = balance + _amount;\n\n        // balance + _amount does not overflow if balance + _amount >= balance\n        require(newBalance >= oldBalance, "Overflow");\n\n        balance = newBalance;\n\n        assert(balance >= oldBalance);\n    }\n\n    function withdraw(uint _amount) public {\n        uint oldBalance = balance;\n\n        // balance - _amount does not underflow if balance >= _amount\n        require(balance >= _amount, "Underflow");\n\n        if (balance < _amount) {\n            revert("Underflow");\n        }\n\n        balance -= _amount;\n\n        assert(balance <= oldBalance);\n    }\n}\n\n')))}d.isMDXComponent=!0}}]);