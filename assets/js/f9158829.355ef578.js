"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9942],{3905:function(n,t,r){r.d(t,{Zo:function(){return u},kt:function(){return c}});var e=r(7294);function a(n,t,r){return t in n?Object.defineProperty(n,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[t]=r,n}function i(n,t){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.push.apply(r,e)}return r}function o(n){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(n,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(r,t))}))}return n}function l(n,t){if(null==n)return{};var r,e,a=function(n,t){if(null==n)return{};var r,e,a={},i=Object.keys(n);for(e=0;e<i.length;e++)r=i[e],t.indexOf(r)>=0||(a[r]=n[r]);return a}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(e=0;e<i.length;e++)r=i[e],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(a[r]=n[r])}return a}var s=e.createContext({}),d=function(n){var t=e.useContext(s),r=t;return n&&(r="function"==typeof n?n(t):o(o({},t),n)),r},u=function(n){var t=d(n.components);return e.createElement(s.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return e.createElement(e.Fragment,{},t)}},m=e.forwardRef((function(n,t){var r=n.components,a=n.mdxType,i=n.originalType,s=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),m=d(r),c=a,g=m["".concat(s,".").concat(c)]||m[c]||p[c]||i;return r?e.createElement(g,o(o({ref:t},u),{},{components:r})):e.createElement(g,o({ref:t},u))}));function c(n,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=n,l.mdxType="string"==typeof n?n:a,o[1]=l;for(var d=2;d<i;d++)o[d]=r[d];return e.createElement.apply(null,o)}return e.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8563:function(n,t,r){r.r(t),r.d(t,{contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var e=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],l={},s="\u751f\u6210\u968f\u673a\u503c",d={unversionedId:"rusty/algos/randomness",id:"rusty/algos/randomness",isDocsHomePage:!1,title:"\u751f\u6210\u968f\u673a\u503c",description:"\u751f\u6210\u968f\u673a\u6570",source:"@site/docs/rusty/algos/randomness.md",sourceDirName:"rusty/algos",slug:"/rusty/algos/randomness",permalink:"/rooctblog/docs/rusty/algos/randomness",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u4e09\u89d2\u51fd\u6570",permalink:"/rooctblog/docs/rusty/algos/math/trigonometry"},next:{title:"sorting",permalink:"/rooctblog/docs/rusty/algos/sorting"}},u=[{value:"\u751f\u6210\u968f\u673a\u6570",id:"\u751f\u6210\u968f\u673a\u6570",children:[]},{value:"\u6307\u5b9a\u8303\u56f4\u751f\u6210\u968f\u673a\u6570",id:"\u6307\u5b9a\u8303\u56f4\u751f\u6210\u968f\u673a\u6570",children:[]},{value:"\u4f7f\u7528\u6307\u5b9a\u5206\u5e03\u6765\u751f\u6210\u968f\u673a\u6570",id:"\u4f7f\u7528\u6307\u5b9a\u5206\u5e03\u6765\u751f\u6210\u968f\u673a\u6570",children:[]},{value:"\u5728\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e2d\u751f\u6210\u968f\u673a\u503c",id:"\u5728\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e2d\u751f\u6210\u968f\u673a\u503c",children:[]},{value:"\u751f\u6210\u968f\u673a\u7684\u5b57\u7b26\u4e32(A-Z, a-z, 0-9)",id:"\u751f\u6210\u968f\u673a\u7684\u5b57\u7b26\u4e32a-z-a-z-0-9",children:[]},{value:"\u751f\u6210\u968f\u673a\u7684\u5b57\u7b26\u4e32( \u7528\u6237\u6307\u5b9a ASCII \u5b57\u7b26 )",id:"\u751f\u6210\u968f\u673a\u7684\u5b57\u7b26\u4e32-\u7528\u6237\u6307\u5b9a-ascii-\u5b57\u7b26-",children:[]}],p={toc:u};function m(n){var t=n.components,r=(0,a.Z)(n,o);return(0,i.kt)("wrapper",(0,e.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u751f\u6210\u968f\u673a\u503c"},"\u751f\u6210\u968f\u673a\u503c"),(0,i.kt)("h3",{id:"\u751f\u6210\u968f\u673a\u6570"},"\u751f\u6210\u968f\u673a\u6570"),(0,i.kt)("p",null,"\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/*/rand/fn.thread_rng.html"},"rand::thread_rng")," \u53ef\u4ee5\u83b7\u53d6\u4e00\u4e2a\u968f\u673a\u6570\u751f\u6210\u5668 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/0.8.5/rand/trait.Rng.html"},"rand::Rng")," \uff0c\u8be5\u751f\u6210\u5668\u9700\u8981\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u521d\u59cb\u5316\u4e00\u4e2a\u3002"),(0,i.kt)("p",null,"\u6574\u6570\u7684\u968f\u673a\u5206\u5e03\u8303\u56f4\u7b49\u4e8e\u7c7b\u578b\u7684\u53d6\u503c\u8303\u56f4\uff0c\u4f46\u662f\u6d6e\u70b9\u6570\u53ea\u5206\u5e03\u5728 ",(0,i.kt)("inlineCode",{parentName:"p"},"[0, 1)")," \u533a\u95f4\u5185\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use rand::Rng;\n\nfn main {\n    let mut rng = rand::thread_rng;\n\n    let n1: u8 = rng.gen;\n    let n2: u16 = rng.gen;\n    println!("Random u8: {}", n1);\n    println!("Random u16: {}", n2);\n    println!("Random u32: {}", rng.gen::<u32>);\n    println!("Random i32: {}", rng.gen::<i32>);\n    println!("Random float: {}", rng.gen::<f64>);\n}\n')),(0,i.kt)("h3",{id:"\u6307\u5b9a\u8303\u56f4\u751f\u6210\u968f\u673a\u6570"},"\u6307\u5b9a\u8303\u56f4\u751f\u6210\u968f\u673a\u6570"),(0,i.kt)("p",null,"\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://rust-lang-nursery.github.io/rust-cookbook/algorithms/randomness.html"},"Rng::gen_range")," \u751f\u6210 [0, 10) \u533a\u95f4\u5185\u7684\u968f\u673a\u6570( \u53f3\u5f00\u533a\u95f4\uff0c\u4e0d\u5305\u62ec ",(0,i.kt)("inlineCode",{parentName:"p"},"10")," )\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use rand::Rng;\n\nfn main {\n    let mut rng = rand::thread_rng;\n    println!("Integer: {}", rng.gen_range(0..10));\n    println!("Float: {}", rng.gen_range(0.0..10.0));\n}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/*/rand/distributions/uniform/struct.Uniform.html"},"Uniform")," \u53ef\u4ee5\u7528\u4e8e\u751f\u6210",(0,i.kt)("ruby",null,"\u5747\u5300\u5206\u5e03",(0,i.kt)("rt",null,"uniform distribution")),"\u7684\u968f\u673a\u6570\u3002\u5f53\u9700\u8981\u5728\u540c\u4e00\u4e2a\u8303\u56f4\u5185\u91cd\u590d\u751f\u6210\u968f\u673a\u6570\u65f6\uff0c\u8be5\u65b9\u6cd5\u867d\u7136\u548c\u4e4b\u524d\u7684\u65b9\u6cd5\u6548\u679c\u4e00\u6837\uff0c\u4f46\u4f1a\u66f4\u5feb\u4e00\u4e9b\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use rand::distributions::{Distribution, Uniform};\n\nfn main {\n    let mut rng = rand::thread_rng;\n    let die = Uniform::from(1..7);\n\n    loop {\n        let throw = die.sample(&mut rng);\n        println!("Roll the die: {}", throw);\n        if throw == 6 {\n            break;\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"\u4f7f\u7528\u6307\u5b9a\u5206\u5e03\u6765\u751f\u6210\u968f\u673a\u6570"},"\u4f7f\u7528\u6307\u5b9a\u5206\u5e03\u6765\u751f\u6210\u968f\u673a\u6570"),(0,i.kt)("p",null,"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"rand")," \u5305\u4f7f\u7528\u5747\u5300\u5206\u5e03\u6765\u751f\u6210\u968f\u673a\u6570\uff0c\u800c ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand_distr/*/rand_distr/index.html"},"rand_distr")," \u5305\u63d0\u4f9b\u4e86\u5176\u5b83\u7c7b\u578b\u7684\u5206\u5e03\u65b9\u5f0f\u3002"),(0,i.kt)("p",null,"\u9996\u5148\uff0c\u4f60\u9700\u8981\u83b7\u53d6\u60f3\u8981\u4f7f\u7528\u7684\u5206\u5e03\u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u5728 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/*/rand/trait.Rng.html"},"rand::Rng")," \u7684\u5e2e\u52a9\u4e0b\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/*/rand/distributions/trait.Distribution.html#tymethod.sample"},"Distribution::sample")," \u5bf9\u8be5\u5b9e\u4f8b\u8fdb\u884c\u53d6\u6837\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u60f3\u8981\u67e5\u8be2\u53ef\u7528\u7684\u5206\u5e03\u5217\u8868\uff0c\u53ef\u4ee5\u8bbf\u95ee",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand_distr/*/rand_distr/index.html"},"\u8fd9\u91cc"),"\uff0c\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u6211\u4eec\u5c06\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand_distr/0.4.3/rand_distr/struct.Normal.html"},"Normal")," \u5206\u5e03:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use rand_distr::{Distribution, Normal, NormalError};\nuse rand::thread_rng;\n\nfn main -> Result<, NormalError> {\n    let mut rng = thread_rng;\n    let normal = Normal::new(2.0, 3.0)?;\n    let v = normal.sample(&mut rng);\n    println!("{} is from a N(2, 9) distribution", v);\n    Ok()\n}\n')),(0,i.kt)("h3",{id:"\u5728\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e2d\u751f\u6210\u968f\u673a\u503c"},"\u5728\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e2d\u751f\u6210\u968f\u673a\u503c"),(0,i.kt)("p",null,"\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/*/rand/distributions/trait.Distribution.html"},"Distribution")," \u7279\u5f81\u5305\u88f9\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u5e76\u4e3a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/*/rand/distributions/struct.Standard.html"},"Standard")," \u5b9e\u73b0\u8be5\u7279\u5f81\uff0c\u53ef\u4ee5\u4e3a\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6307\u5b9a\u5b57\u6bb5\u751f\u6210\u968f\u673a\u6570\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use rand::Rng;\nuse rand::distributions::{Distribution, Standard};\n\n#[derive(Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Distribution<Point> for Standard {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Point {\n        let (rand_x, rand_y) = rng.gen;\n        Point {\n            x: rand_x,\n            y: rand_y,\n        }\n    }\n}\n\nfn main {\n    let mut rng = rand::thread_rng;\n\n    // \u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684 Point\n    let rand_point: Point = rng.gen;\n    println!("Random Point: {:?}", rand_point);\n\n    // \u901a\u8fc7\u7c7b\u578b\u6697\u793a( hint )\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u5143\u7ec4\n    let rand_tuple = rng.gen::<(i32, bool, f64)>;\n    println!("Random tuple: {:?}", rand_tuple);\n}\n')),(0,i.kt)("h3",{id:"\u751f\u6210\u968f\u673a\u7684\u5b57\u7b26\u4e32a-z-a-z-0-9"},"\u751f\u6210\u968f\u673a\u7684\u5b57\u7b26\u4e32(A-Z, a-z, 0-9)"),(0,i.kt)("p",null,"\u901a\u8fc7 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/0.8.5/rand/distributions/struct.Alphanumeric.html"},"Alphanumeric")," \u91c7\u6837\u6765\u751f\u6210\u968f\u673a\u7684 ASCII \u5b57\u7b26\u4e32\uff0c\u5305\u542b\u4ece ",(0,i.kt)("inlineCode",{parentName:"p"},"A-Z, a-z, 0-9")," \u7684\u5b57\u7b26\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editble"},'use rand::{thread_rng, Rng};\nuse rand::distributions::Alphanumeric;\n\nfn main {\n    let rand_string: String = thread_rng\n        .sample_iter(&Alphanumeric)\n        .take(30)\n        .map(char::from)\n        .collect;\n\n    println!("{}", rand_string);\n}\n')),(0,i.kt)("h3",{id:"\u751f\u6210\u968f\u673a\u7684\u5b57\u7b26\u4e32-\u7528\u6237\u6307\u5b9a-ascii-\u5b57\u7b26-"},"\u751f\u6210\u968f\u673a\u7684\u5b57\u7b26\u4e32( \u7528\u6237\u6307\u5b9a ASCII \u5b57\u7b26 )"),(0,i.kt)("p",null,"\u901a\u8fc7 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/rand/0.8.5/rand/trait.Rng.html#method.gen_range"},"gen_string")," \u751f\u6210\u968f\u673a\u7684 ASCII \u5b57\u7b26\u4e32\uff0c\u5305\u542b\u7528\u6237\u6307\u5b9a\u7684\u5b57\u7b26\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'fn main {\n    use rand::Rng;\n    const CHARSET: &[u8] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n                            abcdefghijklmnopqrstuvwxyz\\\n                            0123456789)(*&^%$#@!~";\n    const PASSWORD_LEN: usize = 30;\n    let mut rng = rand::thread_rng;\n\n    let password: String = (0..PASSWORD_LEN)\n        .map(|_| {\n            let idx = rng.gen_range(0..CHARSET.len);\n            CHARSET[idx] as char\n        })\n        .collect;\n\n    println!("{:?}", password);\n}\n')))}m.isMDXComponent=!0}}]);