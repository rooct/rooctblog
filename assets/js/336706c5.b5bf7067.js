"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4288],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=o,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return t?r.createElement(f,c(c({ref:n},u),{},{components:t})):r.createElement(f,c({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5927:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],i={},s="SQLite",l={unversionedId:"rusty/database/sqlite",id:"rusty/database/sqlite",isDocsHomePage:!1,title:"SQLite",description:"\u521b\u5efa SQLite \u6570\u636e\u5e93",source:"@site/docs/rusty/database/sqlite.md",sourceDirName:"rusty/database",slug:"/rusty/database/sqlite",permalink:"/rooctblog/docs/rusty/database/sqlite",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"Postgres",permalink:"/rooctblog/docs/rusty/database/postgres"},next:{title:"\u65f6\u95f4\u8ba1\u7b97\u548c\u8f6c\u6362",permalink:"/rooctblog/docs/rusty/datetime/duration"}},u=[{value:"\u521b\u5efa SQLite \u6570\u636e\u5e93",id:"\u521b\u5efa-sqlite-\u6570\u636e\u5e93",children:[]},{value:"\u63d2\u5165\u548c\u67e5\u8be2",id:"\u63d2\u5165\u548c\u67e5\u8be2",children:[]},{value:"\u4f7f\u7528\u4e8b\u52a1",id:"\u4f7f\u7528\u4e8b\u52a1",children:[]}],m={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sqlite"},"SQLite"),(0,a.kt)("h3",{id:"\u521b\u5efa-sqlite-\u6570\u636e\u5e93"},"\u521b\u5efa SQLite \u6570\u636e\u5e93"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"rusqlite")," \u53ef\u4ee5\u521b\u5efa SQLite \u6570\u636e\u5e93\uff0c",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/rusqlite/*/rusqlite/struct.Connection.html#method.open"},"Connection::open")," \u4f1a\u5c1d\u8bd5\u6253\u5f00\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u8fd9\u91cc\u521b\u5efa\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"cats.db")," \u6570\u636e\u5e93\u5c06\u88ab\u540e\u9762\u7684\u4f8b\u5b50\u6240\u4f7f\u7528")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use rusqlite::{Connection, Result};\nuse rusqlite::NO_PARAMS;\n\nfn main -> Result<> {\n    let conn = Connection::open("cats.db")?;\n\n    conn.execute(\n        "create table if not exists cat_colors (\n             id integer primary key,\n             name text not null unique\n         )",\n        NO_PARAMS,\n    )?;\n    conn.execute(\n        "create table if not exists cats (\n             id integer primary key,\n             name text not null,\n             color_id integer not null references cat_colors(id)\n         )",\n        NO_PARAMS,\n    )?;\n\n    Ok()\n}\n')),(0,a.kt)("h3",{id:"\u63d2\u5165\u548c\u67e5\u8be2"},"\u63d2\u5165\u548c\u67e5\u8be2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust,editable"},'\nuse rusqlite::NO_PARAMS;\nuse rusqlite::{Connection, Result};\nuse std::collections::HashMap;\n\n#[derive(Debug)]\nstruct Cat {\n    name: String,\n    color: String,\n}\n\nfn main -> Result<> {\n    // \u6253\u5f00\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u6240\u521b\u5efa\u7684\u6570\u636e\u5e93\n    let conn = Connection::open("cats.db")?;\n\n    let mut cat_colors = HashMap::new;\n    cat_colors.insert(String::from("Blue"), vec!["Tigger", "Sammy"]);\n    cat_colors.insert(String::from("Black"), vec!["Oreo", "Biscuit"]);\n\n    for (color, catnames) in &cat_colors {\n        // \u63d2\u5165\u4e00\u6761\u6570\u636e\u884c\n        conn.execute(\n            "INSERT INTO cat_colors (name) values (?1)",\n            &[&color.to_string],\n        )?;\n        // \u83b7\u53d6\u6700\u8fd1\u63d2\u5165\u6570\u636e\u884c\u7684 id\n        let last_id: String = conn.last_insert_rowid.to_string;\n\n        for cat in catnames {\n            conn.execute(\n                "INSERT INTO cats (name, color_id) values (?1, ?2)",\n                &[&cat.to_string, &last_id],\n            )?;\n        }\n    }\n    let mut stmt = conn.prepare(\n        "SELECT c.name, cc.name from cats c\n         INNER JOIN cat_colors cc\n         ON cc.id = c.color_id;",\n    )?;\n\n    let cats = stmt.query_map(NO_PARAMS, |row| {\n        Ok(Cat {\n            name: row.get(0)?,\n            color: row.get(1)?,\n        })\n    })?;\n\n    for cat in cats {\n        println!("Found cat {:?}", cat);\n    }\n\n    Ok()\n}\n')),(0,a.kt)("h3",{id:"\u4f7f\u7528\u4e8b\u52a1"},"\u4f7f\u7528\u4e8b\u52a1"),(0,a.kt)("p",null,"\u4f7f\u7528 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/rusqlite/*/rusqlite/struct.Connection.html#method.transaction"},"Connection::transaction")," \u53ef\u4ee5\u5f00\u59cb\u65b0\u7684\u4e8b\u52a1\uff0c\u82e5\u6ca1\u6709\u5bf9\u4e8b\u52a1\u8fdb\u884c\u663e\u5f0f\u5730\u63d0\u4ea4 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/rusqlite/0.27.0/rusqlite/struct.Transaction.html#method.commit"},"Transaction::commit"),"\uff0c\u5219\u4f1a\u8fdb\u884c\u56de\u6eda\u3002"),(0,a.kt)("p",null,"\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"rolled_back_tx")," \u63d2\u5165\u4e86\u91cd\u590d\u7684\u989c\u8272\u540d\u79f0\uff0c\u4f1a\u53d1\u751f\u56de\u6eda\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use rusqlite::{Connection, Result, NO_PARAMS};\n\nfn main -> Result<> {\n    // \u6253\u5f00\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u6240\u521b\u5efa\u7684\u6570\u636e\u5e93\n    let mut conn = Connection::open("cats.db")?;\n\n    successful_tx(&mut conn)?;\n\n    let res = rolled_back_tx(&mut conn);\n    assert!(res.is_err);\n\n    Ok()\n}\n\nfn successful_tx(conn: &mut Connection) -> Result<> {\n    let tx = conn.transaction?;\n\n    tx.execute("delete from cat_colors", NO_PARAMS)?;\n    tx.execute("insert into cat_colors (name) values (?1)", &[&"lavender"])?;\n    tx.execute("insert into cat_colors (name) values (?1)", &[&"blue"])?;\n\n    tx.commit\n}\n\nfn rolled_back_tx(conn: &mut Connection) -> Result<> {\n    let tx = conn.transaction?;\n\n    tx.execute("delete from cat_colors", NO_PARAMS)?;\n    tx.execute("insert into cat_colors (name) values (?1)", &[&"lavender"])?;\n    tx.execute("insert into cat_colors (name) values (?1)", &[&"blue"])?;\n    tx.execute("insert into cat_colors (name) values (?1)", &[&"lavender"])?;\n\n    tx.commit\n}\n')))}p.isMDXComponent=!0}}]);