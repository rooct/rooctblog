"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1098],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),f=a,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7212:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],s={title:"Echidna",version:"0.8.10",description:"An example of testing contracts with Echidna"},c=void 0,l={unversionedId:"Example/Echidna",id:"Example/Echidna",isDocsHomePage:!1,title:"Echidna",description:"An example of testing contracts with Echidna",source:"@site/docs/Example/Echidna.md",sourceDirName:"Example",slug:"/Example/Echidna",permalink:"/rooctblog/docs/Example/Echidna",tags:[],version:"current",frontMatter:{title:"Echidna",version:"0.8.10",description:"An example of testing contracts with Echidna"},sidebar:"tutorialSidebar",previous:{title:"Denial of Service",permalink:"/rooctblog/docs/Example/DenialOfSevice"},next:{title:"Enum",permalink:"/rooctblog/docs/Example/Enum"}},u=[{value:"Testing Time and Sender",id:"testing-time-and-sender",children:[]}],d={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Examples of fuzzing with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/crytic/echidna"},"Echidna"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Save the solidity contract as ",(0,i.kt)("inlineCode",{parentName:"li"},"TestEchidna.sol")),(0,i.kt)("li",{parentName:"ol"},"In the folder where your contract is stored execute the following command.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -it --rm -v $PWD:/code trailofbits/eth-security-toolbox\n")),(0,i.kt)("p",null,"Inside docker, your code will be stored at ",(0,i.kt)("inlineCode",{parentName:"p"},"/code")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"See the comments below and execute ",(0,i.kt)("inlineCode",{parentName:"li"},"echidna-test")," commands.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/*\nechidna-test TestEchidna.sol --contract TestCounter\n*/\ncontract Counter {\n    uint public count;\n\n    function inc() external {\n        count += 1;\n    }\n\n    function dec() external {\n        count -= 1;\n    }\n}\n\ncontract TestCounter is Counter {\n    function echidna_test_true() public view returns (bool) {\n        return true;\n    }\n\n    function echidna_test_false() public view returns (bool) {\n        return false;\n    }\n\n    function echidna_test_count() public view returns (bool) {\n        // Here we are testing that Counter.count should always be <= 5.\n        // Test will fail. Echidna is smart enough to call Counter.inc() more\n        // than 5 times.\n        return count <= 5;\n    }\n}\n\n/*\nechidna-test TestEchidna.sol --contract TestAssert --check-asserts\n*/\ncontract TestAssert {\n    // Asserts not detected in 0.8.\n    // Switch to 0.7 to test assertions\n    function test_assert(uint _i) external {\n        assert(_i < 10);\n    }\n\n    // More complex example\n    function abs(uint x, uint y) private pure returns (uint) {\n        if (x >= y) {\n            return x - y;\n        }\n        return y - x;\n    }\n\n    function test_abs(uint x, uint y) external {\n        uint z = abs(x, y);\n        if (x >= y) {\n            assert(z <= x);\n        } else {\n            assert(z <= y);\n        }\n    }\n}\n\n")),(0,i.kt)("h3",{id:"testing-time-and-sender"},"Testing Time and Sender"),(0,i.kt)("p",null,"Echidna can fuzz timestamp. Range of timestamp is set in the configuration. Default is 7 days."),(0,i.kt)("p",null,"Contract callers can also be set in the configuration. Default accounts are"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x10000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x20000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x00a329C0648769a73afAC7F9381e08fb43DBEA70"))),(0,i.kt)("p",null,"Click ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/crytic/echidna/blob/master/examples/solidity/basic/default.yaml"},"here")," to see the default configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\n/*\ndocker run -it --rm -v $PWD:/code trailofbits/eth-security-toolbox\nechidna-test EchidnaTestTimeAndCaller.sol --contract EchidnaTestTimeAndCaller\n*/\ncontract EchidnaTestTimeAndCaller {\n    bool private pass = true;\n    uint private createdAt = block.timestamp;\n\n    /*\n    test will fail if Echidna can call setFail()\n    test will pass otherwise\n    */\n    function echidna_test_pass() public view returns (bool) {\n        return pass;\n    }\n\n    function setFail() external {\n        /*\n        Echidna can call this function if delay <= max block delay\n        Otherwise Echidna will not be able to call this function.\n        Max block delay can be extended by specifying it in a configuration file.\n        */\n        uint delay = 7 days;\n        require(block.timestamp >= createdAt + delay);\n        pass = false;\n    }\n\n    // Default senders\n    // Change the addresses to see the test fail\n    address[3] private senders = [\n        address(0x10000),\n        address(0x20000),\n        address(0x00a329C0648769a73afAC7F9381e08fb43DBEA70)\n    ];\n\n    address private sender = msg.sender;\n\n    // Pass _sender as input and require msg.sender == _sender\n    // to see _sender for counter example\n    function setSender(address _sender) external {\n        require(_sender == msg.sender);\n        sender = msg.sender;\n    }\n\n    // Check default senders. Sender should be one of the 3 default accounts.\n    function echidna_test_sender() public view returns (bool) {\n        for (uint i; i < 3; i++) {\n            if (sender == senders[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n")))}p.isMDXComponent=!0}}]);