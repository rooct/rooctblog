"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9790],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),f=a,g=m["".concat(c,".").concat(f)]||m[f]||s[f]||l;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9341:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={title:"Multi Call",version:"0.8.10",description:"An example of contract to aggregate multiple calls."},c=void 0,u={unversionedId:"Example/app/Muticall",id:"Example/app/Muticall",isDocsHomePage:!1,title:"Multi Call",description:"An example of contract to aggregate multiple calls.",source:"@site/docs/Example/app/Muticall.md",sourceDirName:"Example/app",slug:"/Example/app/Muticall",permalink:"/rooctblog/docs/Example/app/Muticall",tags:[],version:"current",frontMatter:{title:"Multi Call",version:"0.8.10",description:"An example of contract to aggregate multiple calls."},sidebar:"tutorialSidebar",previous:{title:"Multi-Sig Wallet",permalink:"/rooctblog/docs/Example/app/MutiSignWallet"},next:{title:"Proxy",permalink:"/rooctblog/docs/Example/app/Proxy"}},p=[],s={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"An example of contract that aggregates multiple queries using a for loop and ",(0,l.kt)("inlineCode",{parentName:"p"},"staticcall"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract MultiCall {\n    function multiCall(address[] calldata targets, bytes[] calldata data)\n        external\n        view\n        returns (bytes[] memory)\n    {\n        require(targets.length == data.length, "target length != data length");\n\n        bytes[] memory results = new bytes[](data.length);\n\n        for (uint i; i < targets.length; i++) {\n            (bool success, bytes memory result) = targets[i].staticcall(data[i]);\n            require(success, "call failed");\n            results[i] = result;\n        }\n\n        return results;\n    }\n}\n\n')),(0,l.kt)("p",null,"Contract to test ",(0,l.kt)("inlineCode",{parentName:"p"},"MultiCall")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract TestMultiCall {\n    function test(uint _i) external pure returns (uint) {\n        return _i;\n    }\n\n    function getData(uint _i) external pure returns (bytes memory) {\n        return abi.encodeWithSelector(this.test.selector, _i);\n    }\n}\n\n")))}m.isMDXComponent=!0}}]);