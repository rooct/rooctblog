"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9797],{3905:function(e,n,t){t.d(n,{Zo:function(){return o},kt:function(){return p}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},o=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),d=l(t),p=a,m=d["".concat(c,".").concat(p)]||d[p]||g[p]||i;return t?r.createElement(m,s(s({ref:n},o),{},{components:t})):r.createElement(m,s({ref:n},o))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,s[1]=u;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3526:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return o}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),s=["components"],u={},c=void 0,l={unversionedId:"dapps/Example/\u4ee5\u592a\u867e\u519c\u5e84",id:"dapps/Example/\u4ee5\u592a\u867e\u519c\u5e84",isDocsHomePage:!1,title:"\u4ee5\u592a\u867e\u519c\u5e84",description:"------",source:"@site/docs/dapps/Example/\u4ee5\u592a\u867e\u519c\u5e84.md",sourceDirName:"dapps/Example",slug:"/dapps/Example/\u4ee5\u592a\u867e\u519c\u5e84",permalink:"/rooctblog/docs/dapps/Example/\u4ee5\u592a\u867e\u519c\u5e84",tags:[],version:"current",frontMatter:{},sidebar:"dapp",previous:{title:"\u4ee3\u7406\u6295\u7968",permalink:"/rooctblog/docs/dapps/Example/\u4ee3\u7406\u6295\u7968"},next:{title:"\u4f9b\u5e94\u94fe",permalink:"/rooctblog/docs/dapps/Example/\u4f9b\u5e94\u94fe"}},o=[],g={toc:o};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("h1",{id:"ether-shrimp-farm-\u4ee5\u592a\u867e\u519c\u5e84"},"Ether Shrimp Farm (\u4ee5\u592a\u867e\u519c\u5e84)"),(0,i.kt)("p",null,"\u6bcf\u4e2a\u65b0\u73a9\u5bb6\u8fdb\u6765\uff0c\u90fd\u80fd\u83b7\u5f97300\u4e2a\u514d\u8d39\u7684\u867e\uff0c\u6bcf\u53ea\u867e\u6bcf\u79d2\u949f\u4ea7\u4e0b1\u4e2a\u867e\u7c7d\uff0c\u8fd9\u4e9b\u867e\u7c7d\u4f1a\u7d2f\u79ef\u8d77\u6765\uff0c\u6700\u591a\u6301\u7eed\u7d2f\u79ef\u4e00\u5929\u3002"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u7d2f\u8ba1\u7684\u867e\u7c7d\uff0c\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u5356\u6389\u6362\u6210\u4ee5\u592a\u5e01\uff0c\u6216\u8005\u6309\u716786400\u7684\u6bd4\u4f8b\u8f6c\u6362\u6210\u4e00\u53ea\u867e\u3002"),(0,i.kt)("p",null,"\u4f60\u4e70\u5165\u548c\u5356\u51fa\u867e\u7684\u4ef7\u683c\u6709\u4ec0\u4e48\u51b3\u5b9a\u5462\uff1f"),(0,i.kt)("p",null,"\u9879\u76ee\u5f00\u53d1\u8005\u600e\u4e48\u6323\u94b1\u5462\uff1f5%\u7684\u4ea4\u6613\u8d39\u4f1a\u8fdb\u5165\u9879\u76ee\u5f00\u53d1\u8005\u7684\u53e3\u888b\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u63a8\u8350\u4e86\u65b0\u73a9\u5bb6\u52a0\u5165\uff0c\u90a3\u4e48\u4ed6\u6bcf\u6b21\u628a\u867e\u7c7d\u5b75\u5316\u4e3a\u867e\u7684\u65f6\u5019\uff0c\u63a8\u8350\u8005\u4f1a\u6536\u523020%\u7684\u867e\u7c7d\u3002"),(0,i.kt)("p",null,"\u8fd9\u4e2a\u6e38\u620f\u7684\u7279\u70b9\u662f\uff0c\u4f60\u4ec0\u4e48\u90fd\u4e0d\u9700\u8981\u652f\u4ed8\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u514d\u8d39\u7684300\u53ea\u867e\u3002\u4e8e\u662f\u6781\u5927\u7684\u589e\u52a0\u7684\u73a9\u5bb6\u7684\u53c2\u4e0e\u5ea6\u3002\u5f53\u7136\u73a9\u5bb6\u8fd8\u662f\u9700\u8981\u652f\u4ed8gas\u8d39\u7528\u7684\u3002\u4e8e\u662fEOS\u5c31\u7279\u522b\u9002\u5408\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity ^0.4.18; // solhint-disable-line\n\n\n\ncontract ShrimpFarmer{\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1; // QY\uff0c\u731c\u60f3\u9879\u76ee\u5f00\u53d1\u8005\u5f00\u59cb\u60f3\u6309\u7167\u79d2\u6570\u6765\u8ba1\u7b97\u4e0b\u7c7d\u7684\u903b\u8f91\uff0c\u4f46\u662f\u540e\u6765\u6362\u6210\u4e86\u6309\u71671\u5929\u6765\u8ba1\u7b97\u7684\u65b9\u5f0f\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;// \u901a\u8fc7\u4e00\u6574\u5929\u7684\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u8ba1\u7b97\u5b75\u5316\u867e\u7c7d\u7684\u60c5\u51b5\n    uint256 public STARTING_SHRIMP=300; // \u5f00\u59cb\u7ed9\u4e00\u4e2a\u4eba\u7684\u867e\u7684\u6570\u91cf\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false; // \u662f\u5426\u5b8c\u6210\u521d\u59cb\u5316\n    address public ceoAddress; // CEO\u7684\u5730\u5740\n    mapping (address => uint256) public hatcheryShrimp; // \u6b63\u5728\u4e0b\u7c7d\u7684\u867e\u7684\u6570\u91cf\n    mapping (address => uint256) public claimedEggs; // \u4fdd\u5b58\u7528\u6237\u8d2d\u4e70\u7684\u867e\u7c7d\u548c\u63a8\u8350\u5f97\u5230\u7684\u867e\u7c7d\u603b\u6570\uff0c\u4f46\u662f\u4e0d\u5305\u542b\u6c60\u5858\u4e2d\u7684\u867e\u4ea7\u4e0b\u6765\u7684\u867e\u7c7d\n    mapping (address => uint256) public lastHatch; // \u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\n    mapping (address => address) public referrals; // \u63a8\u8350\u4eba\n    uint256 public marketEggs; // \u5e02\u573a\u867e\u7c7d\u6570\u7684\u8bc4\u4f30\u6307\u6807\n    function ShrimpFarmer() public{\n        ceoAddress=msg.sender; // \u8bbe\u7f6e\u521b\u5efa\u8005\u4e3aCEO\n    }\n    function hatchEggs(address ref) public{ // \u628a\u867e\u7c7d\u5b75\u5316\u4e3a\u867e\n        require(initialized); // \u9700\u8981\u5b8c\u6210\u5e73\u53f0\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){ // \u5f53\u81ea\u5df1\u6ca1\u6709\u63a8\u8350\u4eba\uff0c\u5e76\u4e14\u81ea\u5df1\u4fdd\u5b58\u7684\u63a8\u8350\u4eba\u4e0d\u662f\u81ea\u5df1\uff0c\u8fdb\u884c\u66f4\u65b0\uff1bQY\uff0c\u4ee3\u7801\u6709\u53ef\u80fd\u5199\u9519\u4e86\uff0c\u5e94\u8be5\u662fref!=msg.sender\n            referrals[msg.sender]=ref; // \u8bbe\u7f6e\u63a8\u8350\u4eba\n        }\n        uint256 eggsUsed=getMyEggs(); // \u5f97\u5230\u81ea\u5df1\u7684\u867e\u7c7d\u7684\u6570\u91cf\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP); // \u4e00\u5929\u7684\u79d2\u6570\u4f5c\u4e3a\u9664\u6570\uff0c\u8ba1\u7b97\u5b75\u5316\u51fa\u6765\u7684\u867e\u7684\u6570\u91cf\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp); //\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now; // \u8bb0\u5f55\u6700\u540e\u4e00\u6b21\u5b75\u5316\u867e\u7c7d\u7684\u65f6\u95f4\u4e3a\u5f53\u524d\u65f6\u95f4\n\n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5)); // \u63a8\u8350\u8005\u83b7\u5f97\u4f7f\u7528\u7684\u867e\u7c7d\u768420%\n\n        //boost market to nerf shrimp hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10)); // \u589e\u52a0\u5e02\u573a\u4e0a\u867e\u7c7d\u7684\u6570\u91cf\uff0c\u589e\u52a0\u6d88\u8017\u6389\u7684\u867e\u7c7d\u6570\u91cf\u9664\u4ee510\n    }\n    function sellEggs() public{\n        require(initialized); // \u9700\u8981\u5b8c\u6210\u5e73\u53f0\u521d\u59cb\u5316\u8fc7\u7a0b\n        uint256 hasEggs=getMyEggs(); // \u5f97\u5230\u867e\u7c7d\u7684\u6570\u91cf\n        uint256 eggValue=calculateEggSell(hasEggs); // \u8ba1\u7b97\u867e\u7c7d\u7684\u4ef7\u503c\n        uint256 fee=devFee(eggValue); // \u8ba1\u7b97\u8d39\u7528\n        claimedEggs[msg.sender]=0; // \u6e05\u7a7a\n        lastHatch[msg.sender]=now; // \u66f4\u65b0\u6700\u540e\u7684\u65f6\u95f4\n        marketEggs=SafeMath.add(marketEggs,hasEggs); // \u66f4\u65b0\u5e02\u573a\u4e0a\u867e\u7684\u6570\u91cf\uff0c\u589e\u52a0\u5356\u6389\u7684\u867e\u7c7d\u603b\u6570\n        ceoAddress.transfer(fee); // \u628a\u8d39\u7528\u7ed9CEO\n        msg.sender.transfer(SafeMath.sub(eggValue,fee)); // \u7ed9\u51fa\u552e\u8005\u6536\u76ca\n    }\n    function buyEggs() public payable{\n        require(initialized); // \u9700\u8981\u5b8c\u6210\u5e73\u53f0\u521d\u59cb\u5316\u8fc7\u7a0b\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value)); // \u57fa\u4e8e\u51fa\u4ef7\u8ba1\u7b97\u8d2d\u4e70\u7684\u6570\u91cf\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought)); // \u51cf\u5c11\u6570\u91cf\n        ceoAddress.transfer(devFee(msg.value)); // ceo\u7ed9\u81ea\u5df1\u8f6c\u8d26\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought); // \u7ed9\u81ea\u5df1\u6dfb\u52a0\u867e\u7c7d\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){ // \u57fa\u4e8e\u5356\u7684\u867e\u7c7d\u7684\u6570\u91cf\uff0c\u5e02\u573a\u4e0a\u867e\u7c7d\u7684\u6570\u91cf\uff0c\u81ea\u5df1\u7684\u8d26\u6237\u4f59\u989d\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt)); // \u8ba1\u7b97\u516c\u5f0f 10000, 5000\n        // bs / ( 1 + rs/rt )\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){ // \u8ba1\u7b97\u5bf9\u5e94\u867e\u7c7d\u6570\u91cf\u7684\u4ef7\u503c\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs); // \u4e09\u4e2a\u53c2\u6570\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance); // \u4f20\u5165ETH\uff0c\u6dfb\u52a0\u81ea\u5df1\u7684balance\u4e3a\u53c2\u6570\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100); // \u4e58\u4ee54\uff0c\u9664\u4ee5100\uff0c\u4e5f\u5c31\u662f4%\u7684\u8d39\u7528\n    }\n    function seedMarket(uint256 eggs) public payable{ // QY\uff0c\u611f\u89c9payable\u53ef\u4ee5\u4e0d\u7528\n        require(marketEggs==0); // \u5e02\u573a\u4e0a\u6ca1\u6709\u4efb\u4f55\u867e\u7c7d\uff0c\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\n        initialized=true; // \u5df2\u7ecf\u5f00\u542f\u4e86\u521d\u59cb\u5316\u8fc7\u7a0b\n        marketEggs=eggs; // \u8bbe\u7f6e\u867e\u7c7d\u7684\u6570\u91cf\u7684\u521d\u59cb\u503c\n    }\n    function getFreeShrimp() public{\n        require(initialized); // \u9700\u8981\u5df2\u7ecf\u5b8c\u6210\u4e86\u521d\u59cb\u5316\n        require(hatcheryShrimp[msg.sender]==0); // \u9700\u8981\u8c03\u7528\u8005\u7684\u867e\u7684\u6570\u91cf\u4e3a\u7a7a\n        lastHatch[msg.sender]=now; // \u8bbe\u7f6e\u6700\u540e\u64cd\u4f5c\u65f6\u95f4\u4e3a\u5f53\u4e0b\n        hatcheryShrimp[msg.sender]=STARTING_SHRIMP; // \u8bbe\u7f6e\u521d\u59cb\u8d60\u9001\u7684\u867e300\u53ea\n    }\n    function getBalance() public view returns(uint256){ // \u5f97\u5230\u8d26\u4e0a\u4f59\u989d\n        return this.balance;\n    }\n    function getMyShrimp() public view returns(uint256){ // \u5f97\u5230\u8c03\u7528\u8005\u867e\u7684\u6570\u91cf\n        return hatcheryShrimp[msg.sender];\n    }\n    function getMyEggs() public view returns(uint256){ // \u5f97\u5230\u8c03\u7528\u8005\u867e\u7c7d\u7684\u6570\u91cf\uff0c\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u81ea\u5df1\u53ef\u4ee5claim\u7684\u867e\u7684\u6570\u91cf\u548c\u8ddd\u79bb\u4e0a\u6b21\u65b0\u751f\u4ea7\u51fa\u7684\u867e\u7c7d\u7684\u6570\u91cf\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr])); // \u8bb0\u5f55\u7ecf\u8fc7\u4e86\u591a\u4e45\u7684\u867e\u7684\u7edf\u8ba1\u65f6\u95f4\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]); // \u6bcf\u4e00\u79d2\u90fd\u80fd\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u867e\u7c7d\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) { // \u6bd4\u8f83\u4e24\u4e2a\u6570\u5927\u5c0f\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) { // \u5b89\u5168\u4e58\u6cd5\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) { // \u5b89\u5168\u9664\u6cd5\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) { // \u5b89\u5168\u51cf\u6cd5\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) { // \u5b89\u5168\u52a0\u6cd5\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n")))}d.isMDXComponent=!0}}]);