"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6520],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),s=d(n),m=o,y=s["".concat(u,".").concat(m)]||s[m]||p[m]||a;return n?r.createElement(y,c(c({ref:t},l),{},{components:n})):r.createElement(y,c({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=s;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var d=2;d<a;d++)c[d]=n[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},5824:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return s},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return l}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],i={title:"ABI Decode",version:"0.8.10",description:"ABI decode bytes"},u=void 0,d={unversionedId:"Example/AbiDecode",id:"Example/AbiDecode",isDocsHomePage:!1,title:"ABI Decode",description:"ABI decode bytes",source:"@site/docs/Example/AbiDecode.md",sourceDirName:"Example",slug:"/Example/AbiDecode",permalink:"/rooctblog/docs/Example/AbiDecode",tags:[],version:"current",frontMatter:{title:"ABI Decode",version:"0.8.10",description:"ABI decode bytes"},sidebar:"tutorialSidebar",previous:{title:"Tutorial Intro",permalink:"/rooctblog/docs/intro"},next:{title:"Array",permalink:"/rooctblog/docs/Example/Array"}},l=[],p={toc:l};function s(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"abi.encode")," encodes data into ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"abi.decode")," decodes ",(0,a.kt)("inlineCode",{parentName:"p"},"bytes")," back into data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract AbiDecode {\n    struct MyStruct {\n        string name;\n        uint[2] nums;\n    }\n\n    function encode(\n        uint x,\n        address addr,\n        uint[] calldata arr,\n        MyStruct calldata myStruct\n    ) external pure returns (bytes memory) {\n        return abi.encode(x, addr, arr, myStruct);\n    }\n\n    function decode(bytes calldata data)\n        external\n        pure\n        returns (\n            uint x,\n            address addr,\n            uint[] memory arr,\n            MyStruct memory myStruct\n        )\n    {\n        // (uint x, address addr, uint[] memory arr, MyStruct myStruct) = ...\n        (x, addr, arr, myStruct) = abi.decode(data, (uint, address, uint[], MyStruct));\n    }\n}\n\n")))}s.isMDXComponent=!0}}]);