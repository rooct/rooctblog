"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[946],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=l(t),f=o,m=u["".concat(i,".").concat(f)]||u[f]||p[f]||c;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,a=new Array(c);a[0]=u;var d={};for(var i in n)hasOwnProperty.call(n,i)&&(d[i]=n[i]);d.originalType=e,d.mdxType="string"==typeof e?e:o,a[1]=d;for(var l=2;l<c;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1496:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return d},metadata:function(){return l},toc:function(){return s}});var r=t(7462),o=t(3366),c=(t(7294),t(3905)),a=["components"],d={},i="\u5b57\u7b26\u7f16\u7801",l={unversionedId:"rusty/encoding/strings",id:"rusty/encoding/strings",isDocsHomePage:!1,title:"\u5b57\u7b26\u7f16\u7801",description:"\u767e\u5206\u53f7\u7f16\u7801( Percent encoding )",source:"@site/docs/rusty/encoding/strings.md",sourceDirName:"rusty/encoding",slug:"/rusty/encoding/strings",permalink:"/rooctblog/docs/rusty/encoding/strings",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"protobuf",permalink:"/rooctblog/docs/rusty/encoding/protobuf"},next:{title:"\u7ed3\u6784\u5316\u6570\u636e",permalink:"/rooctblog/docs/rusty/encoding/structured"}},s=[{value:"\u767e\u5206\u53f7\u7f16\u7801( Percent encoding )",id:"\u767e\u5206\u53f7\u7f16\u7801-percent-encoding-",children:[]},{value:"\u5c06\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a application/x-www-form-urlencoded",id:"\u5c06\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a-applicationx-www-form-urlencoded",children:[]},{value:"\u5341\u516d\u8fdb\u5236\u7f16\u89e3\u7801",id:"\u5341\u516d\u8fdb\u5236\u7f16\u89e3\u7801",children:[]},{value:"Base64 \u7f16\u89e3\u7801",id:"base64-\u7f16\u89e3\u7801",children:[]}],p={toc:s};function u(e){var n=e.components,t=(0,o.Z)(e,a);return(0,c.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"\u5b57\u7b26\u7f16\u7801"},"\u5b57\u7b26\u7f16\u7801"),(0,c.kt)("h3",{id:"\u767e\u5206\u53f7\u7f16\u7801-percent-encoding-"},"\u767e\u5206\u53f7\u7f16\u7801( Percent encoding )"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Percent-encoding"},"\u767e\u5206\u53f7\u7f16\u7801"),"\u53c8\u79f0 URL \u7f16\u7801\u3002"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://docs.rs/crate/percent-encoding/2.1.0"},"percent-encoding")," \u5305\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570\uff1a",(0,c.kt)("inlineCode",{parentName:"p"},"utf8_percent_encode")," \u51fd\u6570\u7528\u4e8e\u7f16\u7801\u3001",(0,c.kt)("inlineCode",{parentName:"p"},"percent_decode")," \u7528\u4e8e\u89e3\u7801\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-rust,editable"},"use percent_encoding::{utf8_percent_encode, percent_decode, AsciiSet, CONTROLS};\nuse std::str::Utf8Error;\n\n/// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\n\nfn main -> Result<, Utf8Error> {\n    let input = \"confident, productive systems programming\";\n\n    let iter = utf8_percent_encode(input, FRAGMENT);\n    // \u5c06\u5143\u7d20\u7c7b\u578b\u4e3a &str \u7684\u8fed\u4ee3\u5668\u6536\u96c6\u4e3a String \u7c7b\u578b\n    let encoded: String = iter.collect;\n    assert_eq!(encoded, \"confident,%20productive%20systems%20programming\");\n\n    let iter = percent_decode(encoded.as_bytes);\n    let decoded = iter.decode_utf8?;\n    assert_eq!(decoded, \"confident, productive systems programming\");\n\n    Ok()\n}\n")),(0,c.kt)("p",null,"\u8be5\u7f16\u7801\u96c6\u5b9a\u4e49\u4e86\u54ea\u4e9b\u5b57\u7b26( \u7279\u522b\u662f\u975e ASCII \u548c\u63a7\u5236\u5b57\u7b26 )\u9700\u8981\u88ab\u767e\u5206\u6bd4\u7f16\u7801\u3002\u5177\u4f53\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\uff0c\u4f8b\u5982 ",(0,c.kt)("inlineCode",{parentName:"p"},"url")," \u4f1a\u5bf9 URL \u8def\u5f84\u4e2d\u7684 ",(0,c.kt)("inlineCode",{parentName:"p"},"?")," \u8fdb\u884c\u7f16\u7801\uff0c\u4f46\u662f\u5728\u8def\u5f84\u540e\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u4e2d\uff0c\u5e76\u4e0d\u4f1a\u8fdb\u884c\u7f16\u7801\u3002"),(0,c.kt)("h3",{id:"\u5c06\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a-applicationx-www-form-urlencoded"},"\u5c06\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a application/x-www-form-urlencoded"),(0,c.kt)("p",null,"\u4f7f\u7528 ",(0,c.kt)("a",{parentName:"p",href:"https://docs.rs/form_urlencoded/1.0.1/form_urlencoded/fn.byte_serialize.html"},"form_urlencoded::byte_serialize")," \u51fd\u6570\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u7f16\u7801\u6210 ",(0,c.kt)("a",{parentName:"p",href:"https://url.spec.whatwg.org/#application/x-www-form-urlencoded"},"application/x-www-form-urlencoded")," \u683c\u5f0f\uff0c\u7136\u540e\u518d\u4f7f\u7528 ",(0,c.kt)("a",{parentName:"p",href:"https://docs.rs/form_urlencoded/1.0.1/form_urlencoded/fn.parse.html"},"form_urlencoded::parse")," \u5bf9\u5176\u8fdb\u884c\u89e3\u7801\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use url::form_urlencoded::{byte_serialize, parse};\n\nfn main {\n    let urlencoded: String = byte_serialize("What is \u2764?".as_bytes).collect;\n    assert_eq!(urlencoded, "What+is+%E2%9D%A4%3F");\n    println!("urlencoded:\'{}\'", urlencoded);\n\n    let decoded: String = parse(urlencoded.as_bytes)\n        .map(|(key, val)| [key, val].concat)\n        .collect;\n    assert_eq!(decoded, "What is \u2764?");\n    println!("decoded:\'{}\'", decoded);\n}\n')),(0,c.kt)("h3",{id:"\u5341\u516d\u8fdb\u5236\u7f16\u89e3\u7801"},"\u5341\u516d\u8fdb\u5236\u7f16\u89e3\u7801"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://docs.rs/data-encoding/*/data_encoding/"},"data_encoding")," \u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u7f16\u7801\u6210\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002"),(0,c.kt)("p",null,"\u4e0b\u9762\u7684\u4f8b\u5b50\u5c06 ",(0,c.kt)("inlineCode",{parentName:"p"},"&[u8]")," \u8f6c\u6362\u6210\u5341\u516d\u8fdb\u5236\u7b49\u6548\u5f62\u5f0f\uff0c\u7136\u540e\u4e0e\u671f\u5f85\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use data_encoding::{HEXUPPER, DecodeError};\n\nfn main -> Result<, DecodeError> {\n    let original = b"The quick brown fox jumps over the lazy dog.";\n    let expected = "54686520717569636B2062726F776E20666F78206A756D7073206F76\\\n        657220746865206C617A7920646F672E";\n\n    let encoded = HEXUPPER.encode(original);\n    assert_eq!(encoded, expected);\n\n    let decoded = HEXUPPER.decode(&encoded.into_bytes)?;\n    assert_eq!(&decoded[..], &original[..]);\n\n    Ok()\n}\n')),(0,c.kt)("h3",{id:"base64-\u7f16\u89e3\u7801"},"Base64 \u7f16\u89e3\u7801"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://docs.rs/base64/0.13.0/base64/index.html"},"base64")," \u53ef\u4ee5\u628a\u4e00\u4e2a\u5b57\u8282\u5207\u7247\u7f16\u7801\u6210 ",(0,c.kt)("inlineCode",{parentName:"p"},"base64")," String\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use error_chain::error_chain;\n\nuse std::str;\nuse base64::{encode, decode};\n\nerror_chain! {\n    foreign_links {\n        Base64(base64::DecodeError);\n        Utf8Error(str::Utf8Error);\n    }\n}\n\nfn main -> Result<> {\n    // \u5c06 `&str` \u8f6c\u6362\u6210 `&[u8; N]` \n    let hello = b"hello rustaceans";\n    let encoded = encode(hello);\n    let decoded = decode(&encoded)?;\n\n    println!("origin: {}", str::from_utf8(hello)?);\n    println!("base64 encoded: {}", encoded);\n    println!("back to origin: {}", str::from_utf8(&decoded)?);\n\n    Ok()\n}\n')))}u.isMDXComponent=!0}}]);