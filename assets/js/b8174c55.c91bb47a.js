"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2142],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=m(t),d=a,f=u["".concat(s,".").concat(d)]||u[d]||p[d]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var m=2;m<o;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2916:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return l}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={},s="\u89e3\u6790\u548c\u663e\u793a",m={unversionedId:"rusty/datetime/parsing",id:"rusty/datetime/parsing",isDocsHomePage:!1,title:"\u89e3\u6790\u548c\u663e\u793a",description:"\u68c0\u67e5\u65e5\u671f\u548c\u65f6\u95f4",source:"@site/docs/rusty/datetime/parsing.md",sourceDirName:"rusty/datetime",slug:"/rusty/datetime/parsing",permalink:"/rooctblog/docs/rusty/datetime/parsing",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u65f6\u95f4\u8ba1\u7b97\u548c\u8f6c\u6362",permalink:"/rooctblog/docs/rusty/datetime/duration"},next:{title:"\u5f00\u53d1\u8c03\u8bd5",permalink:"/rooctblog/docs/rusty/dev/intro"}},l=[{value:"\u68c0\u67e5\u65e5\u671f\u548c\u65f6\u95f4",id:"\u68c0\u67e5\u65e5\u671f\u548c\u65f6\u95f4",children:[]},{value:"\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u76f8\u4e92\u8f6c\u6362",id:"\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u76f8\u4e92\u8f6c\u6362",children:[]},{value:"\u663e\u793a\u683c\u5f0f\u5316\u7684\u65e5\u671f\u548c\u65f6\u95f4",id:"\u663e\u793a\u683c\u5f0f\u5316\u7684\u65e5\u671f\u548c\u65f6\u95f4",children:[]},{value:"\u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a DateTime \u7ed3\u6784\u4f53",id:"\u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a-datetime-\u7ed3\u6784\u4f53",children:[]}],p={toc:l};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u89e3\u6790\u548c\u663e\u793a"},"\u89e3\u6790\u548c\u663e\u793a"),(0,o.kt)("h3",{id:"\u68c0\u67e5\u65e5\u671f\u548c\u65f6\u95f4"},"\u68c0\u67e5\u65e5\u671f\u548c\u65f6\u95f4"),(0,o.kt)("p",null,"\u901a\u8fc7 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/chrono/*/chrono/struct.DateTime.html"},"DateTime")," \u83b7\u53d6\u5f53\u524d\u7684 UTC \u65f6\u95f4:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.rs/chrono/*/chrono/trait.Timelike.html"},"Timelike"),", \u65f6/\u5206/\u79d2"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.rs/chrono/*/chrono/trait.Datelike.html"},"Datelike"),", \u5e74/\u6708/\u65e5")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use chrono::{Datelike, Timelike, Utc};\n\nfn main {\n    let now = Utc::now;\n\n    let (is_pm, hour) = now.hour12;\n    println!(\n        "The current UTC time is {:02}:{:02}:{:02} {}",\n        hour,\n        now.minute,\n        now.second,\n        if is_pm { "PM" } else { "AM" }\n    );\n    println!(\n        "And there have been {} seconds since midnight",\n        now.num_seconds_from_midnight\n    );\n\n    let (is_common_era, year) = now.year_ce;\n    println!(\n        "The current UTC date is {}-{:02}-{:02} {:?} ({})",\n        year,\n        now.month,\n        now.day,\n        now.weekday,\n        if is_common_era { "CE" } else { "BCE" }\n    );\n    println!(\n        "And the Common Era began {} days ago",\n        now.num_days_from_ce\n    );\n}\n')),(0,o.kt)("h3",{id:"\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u76f8\u4e92\u8f6c\u6362"},"\u65e5\u671f\u548c\u65f6\u95f4\u6233\u7684\u76f8\u4e92\u8f6c\u6362"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use chrono::{NaiveDate, NaiveDateTime};\n\nfn main {\n    // \u751f\u6210\u4e00\u4e2a\u5177\u4f53\u7684\u65e5\u671f\u65f6\u95f4\n    let date_time: NaiveDateTime = NaiveDate::from_ymd(2017, 11, 12).and_hms(17, 33, 44);\n    println!(\n        "Number of seconds between 1970-01-01 00:00:00 and {} is {}.",\n        // \u6253\u5370\u65e5\u671f\u548c\u65e5\u671f\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\n        date_time, date_time.timestamp);\n\n    // \u8ba1\u7b97\u4ece 1970 1\u67081\u65e5 0:00:00 UTC \u5f00\u59cb\uff0c10\u4ebf\u79d2\u540e\u662f\u4ec0\u4e48\u65e5\u671f\u65f6\u95f4\n    let date_time_after_a_billion_seconds = NaiveDateTime::from_timestamp(1_000_000_000, 0);\n    println!(\n        "Date after a billion seconds since 1970-01-01 00:00:00 was {}.",\n        date_time_after_a_billion_seconds);\n}\n')),(0,o.kt)("h3",{id:"\u663e\u793a\u683c\u5f0f\u5316\u7684\u65e5\u671f\u548c\u65f6\u95f4"},"\u663e\u793a\u683c\u5f0f\u5316\u7684\u65e5\u671f\u548c\u65f6\u95f4"),(0,o.kt)("p",null,"\u901a\u8fc7 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/chrono/*/chrono/offset/struct.Utc.html#method.now"},"Utc::now")," \u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u7684 UTC \u65f6\u95f4\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use chrono::{DateTime, Utc};\n\nfn main {\n    let now: DateTime<Utc> = Utc::now;\n\n    println!("UTC now is: {}", now);\n    // \u4f7f\u7528 RFC 2822 \u683c\u5f0f\u663e\u793a\u5f53\u524d\u65f6\u95f4\n    println!("UTC now in RFC 2822 is: {}", now.to_rfc2822);\n    // \u4f7f\u7528 RFC 3339 \u683c\u5f0f\u663e\u793a\u5f53\u524d\u65f6\u95f4\n    println!("UTC now in RFC 3339 is: {}", now.to_rfc3339);\n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u683c\u5f0f\u663e\u793a\u5f53\u524d\u65f6\u95f4\n    println!("UTC now in a custom format is: {}", now.format("%a %b %e %T %Y"));\n}\n')),(0,o.kt)("h3",{id:"\u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a-datetime-\u7ed3\u6784\u4f53"},"\u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a DateTime \u7ed3\u6784\u4f53"),(0,o.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u5c06\u591a\u79cd\u683c\u5f0f\u7684\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/chrono/*/chrono/struct.DateTime.html"},"DateTime")," \u7ed3\u6784\u4f53\u3002",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/chrono/*/chrono/struct.DateTime.html#method.parse_from_str"},"DateTime::parse_from_str")," \u4f7f\u7528\u7684\u8f6c\u4e49\u5e8f\u5217\u53ef\u4ee5\u5728 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/chrono/0.4.19/chrono/format/strftime/index.html"},"chrono::format::strftime")," \u627e\u5230."),(0,o.kt)("p",null,"\u53ea\u6709\u5f53\u80fd\u552f\u4e00\u7684\u6807\u8bc6\u51fa\u65e5\u671f\u548c\u65f6\u95f4\u65f6\uff0c\u624d\u80fd\u521b\u5efa ",(0,o.kt)("inlineCode",{parentName:"p"},"DateTime"),"\u3002\u5982\u679c\u8981\u5728\u6ca1\u6709\u65f6\u533a\u7684\u60c5\u51b5\u4e0b\u89e3\u6790\u65e5\u671f\u6216\u65f6\u95f4\uff0c\u4f60\u9700\u8981\u4f7f\u7528 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/chrono/*/chrono/naive/struct.NaiveDate.html"},(0,o.kt)("inlineCode",{parentName:"a"},"NativeDate"))," \u7b49\u51fd\u6570\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use chrono::{DateTime, NaiveDate, NaiveDateTime, NaiveTime};\nuse chrono::format::ParseError;\n\n\nfn main -> Result<, ParseError> {\n    let rfc2822 = DateTime::parse_from_rfc2822("Tue, 1 Jul 2003 10:52:37 +0200")?;\n    println!("{}", rfc2822);\n\n    let rfc3339 = DateTime::parse_from_rfc3339("1996-12-19T16:39:57-08:00")?;\n    println!("{}", rfc3339);\n    \n    let custom = DateTime::parse_from_str("5.8.1994 8:00 am +0000", "%d.%m.%Y %H:%M %P %z")?;\n    println!("{}", custom);\n\n    let time_only = NaiveTime::parse_from_str("23:56:04", "%H:%M:%S")?;\n    println!("{}", time_only);\n\n    let date_only = NaiveDate::parse_from_str("2015-09-05", "%Y-%m-%d")?;\n    println!("{}", date_only);\n\n    let no_timezone = NaiveDateTime::parse_from_str("2015-09-05 23:56:04", "%Y-%m-%d %H:%M:%S")?;\n    println!("{}", no_timezone);\n\n    Ok()\n}\n')))}u.isMDXComponent=!0}}]);