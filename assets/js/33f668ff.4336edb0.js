"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5660],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return d}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return r?t.createElement(f,i(i({ref:n},c),{},{components:r})):t.createElement(f,i({ref:n},c))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6316:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var t=r(7462),a=r(3366),l=(r(7294),r(3905)),i=["components"],o={},s="\u7ebf\u6027\u4ee3\u6570",p={unversionedId:"rusty/algos/math/linear-algebra",id:"rusty/algos/math/linear-algebra",isDocsHomePage:!1,title:"\u7ebf\u6027\u4ee3\u6570",description:"\u77e9\u9635\u76f8\u52a0",source:"@site/docs/rusty/algos/math/linear-algebra.md",sourceDirName:"rusty/algos/math",slug:"/rusty/algos/math/linear-algebra",permalink:"/rooctblog/docs/rusty/algos/math/linear-algebra",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u590d\u6570",permalink:"/rooctblog/docs/rusty/algos/math/complex"},next:{title:"\u6742\u9879",permalink:"/rooctblog/docs/rusty/algos/math/misc"}},c=[{value:"\u77e9\u9635\u76f8\u52a0",id:"\u77e9\u9635\u76f8\u52a0",children:[]},{value:"\u77e9\u9635\u76f8\u4e58",id:"\u77e9\u9635\u76f8\u4e58",children:[]},{value:"\u6807\u91cf\u3001\u5411\u91cf\u3001\u77e9\u9635\u76f8\u4e58",id:"\u6807\u91cf\u5411\u91cf\u77e9\u9635\u76f8\u4e58",children:[]},{value:"\u5411\u91cf\u6bd4\u8f83",id:"\u5411\u91cf\u6bd4\u8f83",children:[]},{value:"\u5411\u91cf\u8303\u6570( norm )",id:"\u5411\u91cf\u8303\u6570-norm-",children:[]},{value:"\u77e9\u9635\u7684\u9006\u53d8\u6362",id:"\u77e9\u9635\u7684\u9006\u53d8\u6362",children:[]},{value:"\u5e8f\u5217/\u53cd\u5e8f\u5217\u5316\u4e00\u4e2a\u77e9\u9635",id:"\u5e8f\u5217\u53cd\u5e8f\u5217\u5316\u4e00\u4e2a\u77e9\u9635",children:[]}],m={toc:c};function u(e){var n=e.components,r=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u7ebf\u6027\u4ee3\u6570"},"\u7ebf\u6027\u4ee3\u6570"),(0,l.kt)("h3",{id:"\u77e9\u9635\u76f8\u52a0"},"\u77e9\u9635\u76f8\u52a0"),(0,l.kt)("p",null,"\u4f7f\u7528 ",(0,l.kt)("a",{parentName:"p",href:"https://docs.rs/ndarray/*/ndarray/fn.arr2.html"},"ndarray::arr2")," \u53ef\u4ee5\u521b\u5efa\u4e8c\u9636\u77e9\u9635\uff0c\u5e76\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use ndarray::arr2;\n\nfn main {\n    let a = arr2(&[[1, 2, 3],\n                   [4, 5, 6]]);\n\n    let b = arr2(&[[6, 5, 4],\n                   [3, 2, 1]]);\n\n    // \u501f\u7528 a \u548c b\uff0c\u6c42\u548c\u540e\u751f\u6210\u65b0\u7684\u77e9\u9635 sum\n    let sum = &a + &b;\n\n    println!("{}", a);\n    println!("+");\n    println!("{}", b);\n    println!("=");\n    println!("{}", sum);\n}\n')),(0,l.kt)("h3",{id:"\u77e9\u9635\u76f8\u4e58"},"\u77e9\u9635\u76f8\u4e58"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://docs.rs/ndarray/0.15.4/ndarray/struct.ArrayBase.html#method.dot-1"},"ndarray::ArrayBase::dot")," \u53ef\u4ee5\u7528\u4e8e\u8ba1\u7b97\u77e9\u9635\u4e58\u6cd5\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use ndarray::arr2;\n\nfn main {\n    let a = arr2(&[[1, 2, 3],\n                   [4, 5, 6]]);\n\n    let b = arr2(&[[6, 3],\n                   [5, 2],\n                   [4, 1]]);\n\n    println!("{}", a.dot(&b));\n}\n')),(0,l.kt)("h3",{id:"\u6807\u91cf\u5411\u91cf\u77e9\u9635\u76f8\u4e58"},"\u6807\u91cf\u3001\u5411\u91cf\u3001\u77e9\u9635\u76f8\u4e58"),(0,l.kt)("p",null,"\u5728 ",(0,l.kt)("inlineCode",{parentName:"p"},"ndarry"),"\u4e2d\uff0c1 \u9636\u6570\u7ec4\u6839\u636e\u4e0a\u4e0b\u6587\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u884c\u5411\u91cf\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5217\u5411\u91cf\u3002\u5982\u679c\u5bf9\u4f60\u6765\u8bf4\uff0c\u8fd9\u4e2a\u884c\u6216\u5217\u7684\u65b9\u5411\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u884c\u6216\u4e00\u5217\u7684 2 \u9636\u6570\u7ec4\u6765\u8868\u793a\u3002"),(0,l.kt)("p",null,"\u5728\u4e0b\u9762\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e 1 \u9636\u6570\u7ec4\u5904\u4e8e\u4e58\u53f7\u7684\u53f3\u8fb9\u4f4d\u7f6e\uff0c\u56e0\u6b64 ",(0,l.kt)("inlineCode",{parentName:"p"},"dot")," \u4f1a\u628a\u5b83\u5f53\u6210\u5217\u5411\u91cf\u6765\u5904\u7406\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use ndarray::{arr1, arr2, Array1};\n\nfn main {\n    let scalar = 4;\n\n    let vector = arr1(&[1, 2, 3]);\n\n    let matrix = arr2(&[[4, 5, 6],\n                        [7, 8, 9]]);\n\n    let new_vector: Array1<_> = scalar * vector;\n    println!("{}", new_vector);\n\n    let new_matrix = matrix.dot(&new_vector);\n    println!("{}", new_matrix);\n}\n')),(0,l.kt)("h3",{id:"\u5411\u91cf\u6bd4\u8f83"},"\u5411\u91cf\u6bd4\u8f83"),(0,l.kt)("p",null,"\u6d6e\u70b9\u6570\u901a\u5e38\u662f\u4e0d\u7cbe\u786e\u7684\uff0c\u56e0\u6b64\u6bd4\u8f83\u6d6e\u70b9\u6570\u4e0d\u662f\u4e00\u4ef6\u7b80\u5355\u7684\u4e8b\u3002",(0,l.kt)("a",{parentName:"p",href:"https://docs.rs/approx/*/approx/index.html"},"approx")," \u63d0\u4f9b\u7684 ",(0,l.kt)("a",{parentName:"p",href:"https://docs.rs/approx/0.5.1/approx/macro.assert_abs_diff_eq.html"},"assert_abs_diff_eq!")," \u5b8f\u63d0\u4f9b\u4e86\u65b9\u4fbf\u7684\u6309\u5143\u7d20\u6bd4\u8f83\u7684\u65b9\u5f0f\u3002\u4e3a\u4e86\u4f7f\u7528 ",(0,l.kt)("inlineCode",{parentName:"p"},"approx")," \uff0c\u4f60\u9700\u8981\u5728 ",(0,l.kt)("inlineCode",{parentName:"p"},"ndarray")," \u7684\u4f9d\u8d56\u4e2d\u5f00\u542f\u76f8\u5e94\u7684 feature\uff1a\u4f8b\u5982\uff0c\u5728 ",(0,l.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," \u4e2d\u4fee\u6539 ",(0,l.kt)("inlineCode",{parentName:"p"},"ndarray")," \u7684\u4f9d\u8d56\u5f15\u5165\u4e3a ",(0,l.kt)("inlineCode",{parentName:"p"},'ndarray = { version = "0.13", features = ["approx"] }'),"\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use approx::assert_abs_diff_eq;\nuse ndarray::Array;\n\nfn main {\n  let a = Array::from(vec![1., 2., 3., 4., 5.]);\n  let b = Array::from(vec![5., 4., 3., 2., 1.]);\n  let mut c = Array::from(vec![1., 2., 3., 4., 5.]);\n  let mut d = Array::from(vec![5., 4., 3., 2., 1.]);\n  \n  // \u6d88\u8017 a \u548c b \u7684\u6240\u6709\u6743\n  let z = a + b;\n  // \u501f\u7528 c \u548c d\n  let w =  &c + &d;\n\n  assert_abs_diff_eq!(z, Array::from(vec![6., 6., 6., 6., 6.]));\n\n  println!("c = {}", c);\n  c[0] = 10.;\n  d[1] = 10.;\n\n  assert_abs_diff_eq!(w, Array::from(vec![6., 6., 6., 6., 6.]));\n\n}\n')),(0,l.kt)("h3",{id:"\u5411\u91cf\u8303\u6570-norm-"},"\u5411\u91cf\u8303\u6570( norm )"),(0,l.kt)("p",null,"\u9700\u8981\u6ce8\u610f\u7684\u662f ",(0,l.kt)("inlineCode",{parentName:"p"},"Array")," \u548c ",(0,l.kt)("inlineCode",{parentName:"p"},"ArrayView")," \u90fd\u662f ",(0,l.kt)("inlineCode",{parentName:"p"},"ArrayBase")," \u7684\u522b\u540d\u3002\u56e0\u6b64\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u53c2\u6570\u5e94\u8be5\u662f ",(0,l.kt)("inlineCode",{parentName:"p"},"&ArrayBase<S, Ix1> where S: Data"),"\uff0c\u7279\u522b\u662f\u5728\u4f60\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171 API \u7ed9\u5176\u5b83\u7528\u6237\u65f6\uff0c\u4f46\u7531\u4e8e\u54b1\u4eec\u662f\u5185\u90e8\u4f7f\u7528\uff0c\u56e0\u6b64\u66f4\u7cbe\u51c6\u7684 ",(0,l.kt)("inlineCode",{parentName:"p"},"ArrayView1<f64>")," \u4f1a\u66f4\u9002\u5408\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use ndarray::{array, Array1, ArrayView1};\n\nfn l1_norm(x: ArrayView1<f64>) -> f64 {\n    x.fold(0., |acc, elem| acc + elem.abs)\n}\n\nfn l2_norm(x: ArrayView1<f64>) -> f64 {\n    x.dot(&x).sqrt\n}\n\nfn normalize(mut x: Array1<f64>) -> Array1<f64> {\n    let norm = l2_norm(x.view);\n    x.mapv_inplace(|e| e/norm);\n    x\n}\n\nfn main {\n    let x = array![1., 2., 3., 4., 5.];\n    println!("||x||_2 = {}", l2_norm(x.view));\n    println!("||x||_1 = {}", l1_norm(x.view));\n    println!("Normalizing x yields {:?}", normalize(x));\n}\n')),(0,l.kt)("h3",{id:"\u77e9\u9635\u7684\u9006\u53d8\u6362"},"\u77e9\u9635\u7684\u9006\u53d8\u6362"),(0,l.kt)("p",null,"\u4f8b\u5b50\u4e2d\u4f7f\u7528 ",(0,l.kt)("a",{parentName:"p",href:"https://docs.rs/nalgebra/*/nalgebra/base/type.Matrix3.html"},"nalgebra::Matrix3")," \u521b\u5efa\u4e00\u4e2a 3x3 \u7684\u77e9\u9635\uff0c\u7136\u540e\u5c1d\u8bd5\u5bf9\u5176\u8fdb\u884c\u9006\u53d8\u6362\uff0c\u83b7\u53d6\u4e00\u4e2a\u9006\u77e9\u9635\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use nalgebra::Matrix3;\n\nfn main {\n    let m1 = Matrix3::new(2.0, 1.0, 1.0, 3.0, 2.0, 1.0, 2.0, 1.0, 2.0);\n    println!("m1 = {}", m1);\n    match m1.try_inverse {\n        Some(inv) => {\n            println!("The inverse of m1 is: {}", inv);\n        }\n        None => {\n            println!("m1 is not invertible!");\n        }\n    }\n}\n')),(0,l.kt)("h3",{id:"\u5e8f\u5217\u53cd\u5e8f\u5217\u5316\u4e00\u4e2a\u77e9\u9635"},"\u5e8f\u5217/\u53cd\u5e8f\u5217\u5316\u4e00\u4e2a\u77e9\u9635"),(0,l.kt)("p",null,"\u4e0b\u9762\u5c06\u5c55\u793a\u5982\u4f55\u5c06\u77e9\u9635\u5e8f\u5217\u5316\u4e3a JSON \uff0c\u7136\u540e\u518d\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u77e9\u9635\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust,editable"},"extern crate nalgebra;\nextern crate serde_json;\n\nuse nalgebra::DMatrix;\n\nfn main -> Result<, std::io::Error> {\n    let row_slice: Vec<i32> = (1..5001).collect;\n    let matrix = DMatrix::from_row_slice(50, 100, &row_slice);\n\n    // \u5e8f\u5217\u5316\u77e9\u9635\n    let serialized_matrix = serde_json::to_string(&matrix)?;\n\n    // \u53cd\u5e8f\u5217\u5316\n    let deserialized_matrix: DMatrix<i32> = serde_json::from_str(&serialized_matrix)?;\n\n    // \u9a8c\u8bc1\u53cd\u5e8f\u5217\u5316\u540e\u7684\u77e9\u9635\u8ddf\u539f\u59cb\u77e9\u9635\u76f8\u7b49\n    assert!(deserialized_matrix == matrix);\n\n    Ok()\n}\n")))}u.isMDXComponent=!0}}]);