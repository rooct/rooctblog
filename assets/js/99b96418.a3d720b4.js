"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6019],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=l(t),f=i,m=d["".concat(c,".").concat(f)]||d[f]||s[f]||o;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7985:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return p}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],u={title:"View and Pure Functions",version:"0.8.10",description:"An example of view and pure functions in Solidity"},c=void 0,l={unversionedId:"solidity/example/ViewAndPureFunctions",id:"solidity/example/ViewAndPureFunctions",isDocsHomePage:!1,title:"View and Pure Functions",description:"An example of view and pure functions in Solidity",source:"@site/docs/solidity/example/ViewAndPureFunctions.md",sourceDirName:"solidity/example",slug:"/solidity/example/ViewAndPureFunctions",permalink:"/rooctblog/docs/solidity/example/ViewAndPureFunctions",tags:[],version:"current",frontMatter:{title:"View and Pure Functions",version:"0.8.10",description:"An example of view and pure functions in Solidity"},sidebar:"docs",previous:{title:"Accessing Private Data",permalink:"/rooctblog/docs/solidity/example/Vault"},next:{title:"Visibility",permalink:"/rooctblog/docs/solidity/example/Visibility"}},p=[],s={toc:p};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u53ea\u8981\u8bfb\u53d6\u4e86\u94fe\u4e0a\u7684\u72b6\u6001\u53d8\u91cf\uff0c\u5c31\u9700\u8981\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"view"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6ca1\u6709\u8bfb\u53d6\u94fe\u4e0a\u7684\u6570\u636e \uff0c\u8be5\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"pure"))),(0,o.kt)("p",null,"Getter functions can be declared ",(0,o.kt)("inlineCode",{parentName:"p"},"view")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"pure"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"View")," function declares that no state will be changed."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Pure")," function declares that no state variable will be changed or read."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract ViewAndPure {\n    uint public x = 1;\n\n    // Promise not to modify the state.\n    function addToX(uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Promise not to modify or read from the state.\n    function add(uint i, uint j) public pure returns (uint) {\n        return i + j;\n    }\n}\n\n")))}d.isMDXComponent=!0}}]);