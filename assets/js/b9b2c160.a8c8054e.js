"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4937],{3905:function(n,t,e){e.d(t,{Zo:function(){return c},kt:function(){return g}});var r=e(7294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,r,o=function(n,t){if(null==n)return{};var e,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var u=r.createContext({}),l=function(n){var t=r.useContext(u),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},c=function(n){var t=l(n.components);return r.createElement(u.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(n,t){var e=n.components,o=n.mdxType,a=n.originalType,u=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),m=l(e),g=o,y=m["".concat(u,".").concat(g)]||m[g]||p[g]||a;return e?r.createElement(y,i(i({ref:t},c),{},{components:e})):r.createElement(y,i({ref:t},c))}));function g(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var a=e.length,i=new Array(a);i[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=n,s.mdxType="string"==typeof n?n:o,i[1]=s;for(var l=2;l<a;l++)i[l]=e[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}m.displayName="MDXCreateElement"},4036:function(n,t,e){e.r(t),e.d(t,{contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=e(7462),o=e(3366),a=(e(7294),e(3905)),i=["components"],s={},u="Postgres",l={unversionedId:"rusty/database/postgres",id:"rusty/database/postgres",isDocsHomePage:!1,title:"Postgres",description:"\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u683c",source:"@site/docs/rusty/database/postgres.md",sourceDirName:"rusty/database",slug:"/rusty/database/postgres",permalink:"/rooctblog/docs/rusty/database/postgres",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u65e5\u5e38\u5f00\u53d1\u5e38\u7528\u5e93",permalink:"/rooctblog/docs/rusty/daily-dev"},next:{title:"SQLite",permalink:"/rooctblog/docs/rusty/database/sqlite"}},c=[{value:"\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u683c",id:"\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u683c",children:[]},{value:"\u63d2\u5165\u548c\u67e5\u8be2",id:"\u63d2\u5165\u548c\u67e5\u8be2",children:[]},{value:"\u805a\u5408\u6570\u636e",id:"\u805a\u5408\u6570\u636e",children:[]}],p={toc:c};function m(n){var t=n.components,e=(0,o.Z)(n,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"postgres"},"Postgres"),(0,a.kt)("h3",{id:"\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u683c"},"\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u8868\u683c"),(0,a.kt)("p",null,"\u6211\u4eec\u901a\u8fc7 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/postgres/0.17.2/postgres/"},"postgres")," \u6765\u64cd\u4f5c\u6570\u636e\u5e93\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u6709\u4e00\u4e2a\u524d\u63d0\uff1a\u6570\u636e\u5e93 ",(0,a.kt)("inlineCode",{parentName:"p"},"library")," \u5df2\u7ecf\u5b58\u5728\uff0c\u5176\u4e2d\u7528\u6237\u540d\u548c\u5bc6\u7801\u90fd\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"postgres"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use postgres::{Client, NoTls, Error};\n\nfn main -> Result<, Error> {\n    // \u8fde\u63a5\u5230\u6570\u636e\u5e93 library\n    let mut client = Client::connect("postgresql://postgres:postgres@localhost/library", NoTls)?;\n    \n    client.batch_execute("\n        CREATE TABLE IF NOT EXISTS author (\n            id              SERIAL PRIMARY KEY,\n            name            VARCHAR NOT NULL,\n            country         VARCHAR NOT NULL\n            )\n    ")?;\n\n    client.batch_execute("\n        CREATE TABLE IF NOT EXISTS book  (\n            id              SERIAL PRIMARY KEY,\n            title           VARCHAR NOT NULL,\n            author_id       INTEGER NOT NULL REFERENCES author\n            )\n    ")?;\n\n    Ok()\n\n}\n')),(0,a.kt)("h3",{id:"\u63d2\u5165\u548c\u67e5\u8be2"},"\u63d2\u5165\u548c\u67e5\u8be2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use postgres::{Client, NoTls, Error};\nuse std::collections::HashMap;\n\nstruct Author {\n    _id: i32,\n    name: String,\n    country: String\n}\n\nfn main -> Result<, Error> {\n    let mut client = Client::connect("postgresql://postgres:postgres@localhost/library", \n                                    NoTls)?;\n    \n    let mut authors = HashMap::new;\n    authors.insert(String::from("Chinua Achebe"), "Nigeria");\n    authors.insert(String::from("Rabindranath Tagore"), "India");\n    authors.insert(String::from("Anita Nair"), "India");\n\n    for (key, value) in &authors {\n        let author = Author {\n            _id: 0,\n            name: key.to_string,\n            country: value.to_string\n        };\n\n        // \u63d2\u5165\u6570\u636e\n        client.execute(\n                "INSERT INTO author (name, country) VALUES ($1, $2)",\n                &[&author.name, &author.country],\n        )?;\n    }\n\n    // \u67e5\u8be2\u6570\u636e\n    for row in client.query("SELECT id, name, country FROM author", &[])? {\n        let author = Author {\n            _id: row.get(0),\n            name: row.get(1),\n            country: row.get(2),\n        };\n        println!("Author {} is from {}", author.name, author.country);\n    }\n\n    Ok()\n\n}\n')),(0,a.kt)("h3",{id:"\u805a\u5408\u6570\u636e"},"\u805a\u5408\u6570\u636e"),(0,a.kt)("p",null,"\u4e0b\u9762\u4ee3\u7801\u5c06\u4f7f\u7528\u964d\u5e8f\u7684\u65b9\u5f0f\u5217\u51fa ","[Museum of Modern Art]"," \u6570\u636e\u5e93\u4e2d\u7684\u524d 7999 \u540d\u827a\u672f\u5bb6\u7684\u56fd\u7c4d\u5206\u5e03."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use postgres::{Client, Error, NoTls};\n\nstruct Nation {\n    nationality: String,\n    count: i64,\n}\n\nfn main -> Result<, Error> {\n    let mut client = Client::connect(\n        "postgresql://postgres:postgres@127.0.0.1/moma",\n        NoTls,\n    )?;\n\n    for row in client.query \n    ("SELECT nationality, COUNT(nationality) AS count \n    FROM artists GROUP BY nationality ORDER BY count DESC", &[])? {\n        \n        let (nationality, count) : (Option<String>, Option<i64>) \n        = (row.get (0), row.get (1));\n        \n        if nationality.is_some  && count.is_some  {\n\n            let nation = Nation{\n                nationality: nationality.unwrap,\n                count: count.unwrap,\n        };\n            println!("{} {}", nation.nationality, nation.count);\n            \n        }\n    }\n\n    Ok()\n}\n')))}m.isMDXComponent=!0}}]);