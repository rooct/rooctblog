"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[715],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3843:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=t(7462),a=t(3366),s=(t(7294),t(3905)),o=["components"],i={},l="\u7ebf\u7a0b",c={unversionedId:"rusty/cocurrency/threads",id:"rusty/cocurrency/threads",isDocsHomePage:!1,title:"\u7ebf\u7a0b",description:"\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u6027\u7684\u7ebf\u7a0b",source:"@site/docs/rusty/cocurrency/threads.md",sourceDirName:"rusty/cocurrency",slug:"/rusty/cocurrency/threads",permalink:"/rooctblog/docs/rusty/cocurrency/threads",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u4efb\u52a1\u5e76\u884c\u5904\u7406",permalink:"/rooctblog/docs/rusty/cocurrency/parallel"},next:{title:"\u65e5\u5e38\u5f00\u53d1\u5e38\u7528\u5e93",permalink:"/rooctblog/docs/rusty/daily-dev"}},u=[{value:"\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u6027\u7684\u7ebf\u7a0b",id:"\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u6027\u7684\u7ebf\u7a0b",children:[]},{value:"\u521b\u5efa\u5e76\u884c\u6d41\u6c34\u7ebf",id:"\u521b\u5efa\u5e76\u884c\u6d41\u6c34\u7ebf",children:[]},{value:"\u7ebf\u7a0b\u95f4\u4f20\u9012\u6570\u636e",id:"\u7ebf\u7a0b\u95f4\u4f20\u9012\u6570\u636e",children:[]},{value:"\u7ef4\u62a4\u5168\u5c40\u53ef\u53d8\u7684\u72b6\u6001",id:"\u7ef4\u62a4\u5168\u5c40\u53ef\u53d8\u7684\u72b6\u6001",children:[]},{value:"\u5e76\u884c\u8ba1\u7b97 iso \u6587\u4ef6\u7684 SHA256",id:"\u5e76\u884c\u8ba1\u7b97-iso-\u6587\u4ef6\u7684-sha256",children:[]},{value:"\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6765\u7ed8\u5236\u5206\u5f62",id:"\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6765\u7ed8\u5236\u5206\u5f62",children:[]}],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"\u7ebf\u7a0b"},"\u7ebf\u7a0b"),(0,s.kt)("h3",{id:"\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u6027\u7684\u7ebf\u7a0b"},"\u751f\u6210\u4e00\u4e2a\u4e34\u65f6\u6027\u7684\u7ebf\u7a0b"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/crossbeam/*/crossbeam/thread/struct.Scope.html#method.spawn"},"Scope::spawn")," \u4f1a\u751f\u6210\u4e00\u4e2a\u88ab\u9650\u5b9a\u4e86\u4f5c\u7528\u57df\u7684\u7ebf\u7a0b\uff0c\u8be5\u7ebf\u7a0b\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\uff1a\u5b83\u4f1a\u5728\u4f20\u7ed9 ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/crossbeam/0.8.1/crossbeam/fn.scope.html"},"crossbeam::scope")," \u7684\u95ed\u5305\u51fd\u6570\u8fd4\u56de\u524d\u5148\u884c\u7ed3\u675f\u3002\u5f97\u76ca\u4e8e\u8fd9\u4e2a\u7279\u70b9\uff0c\u5b50\u7ebf\u7a0b\u7684\u521b\u5efa\u4f7f\u7528\u5c31\u50cf\u662f\u672c\u5730\u95ed\u5305\u51fd\u6570\u8c03\u7528\uff0c\u56e0\u6b64\u751f\u6210\u7684\u7ebf\u7a0b\u5185\u90e8\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u73af\u5883\u4e2d\u7684\u53d8\u91cf\uff01"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},"fn main {\n    let arr = &[1, 25, -4, 10];\n    let max = find_max(arr);\n    assert_eq!(max, Some(25));\n}\n\n// \u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u5e76\u4f7f\u7528\u65b0\u7684\u7ebf\u7a0b\u5bf9\u5b83\u4eec\u8fdb\u884c\u5904\u7406\nfn find_max(arr: &[i32]) -> Option<i32> {\n    const THRESHOLD: usize = 2;\n  \n    if arr.len <= THRESHOLD {\n        return arr.iter.cloned.max;\n    }\n\n    let mid = arr.len / 2;\n    let (left, right) = arr.split_at(mid);\n  \n    crossbeam::scope(|s| {\n        let thread_l = s.spawn(|_| find_max(left));\n        let thread_r = s.spawn(|_| find_max(right));\n  \n        let max_l = thread_l.join.unwrap?;\n        let max_r = thread_r.join.unwrap?;\n  \n        Some(max_l.max(max_r))\n    }).unwrap\n}\n")),(0,s.kt)("h3",{id:"\u521b\u5efa\u5e76\u884c\u6d41\u6c34\u7ebf"},"\u521b\u5efa\u5e76\u884c\u6d41\u6c34\u7ebf"),(0,s.kt)("p",null,"\u4e0b\u9762\u6211\u4eec\u4f7f\u7528 ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/crossbeam/latest/crossbeam/"},"crossbeam")," \u548c ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/crossbeam-channel/*/crossbeam_channel/index.html"},"crossbeam-channel")," \u6765\u521b\u5efa\u4e00\u4e2a\u5e76\u884c\u6d41\u6c34\u7ebf\uff1a\u6d41\u6c34\u7ebf\u7684\u4e24\u7aef\u5206\u522b\u662f\u6570\u636e\u6e90\u548c\u6570\u636e\u4e0b\u6c89( sink )\uff0c\u5728\u6d41\u6c34\u7ebf\u4e2d\u95f4\uff0c\u6709\u4e24\u4e2a\u5de5\u4f5c\u7ebf\u7a0b\u4f1a\u4ece\u6e90\u5934\u63a5\u6536\u6570\u636e\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u5e76\u884c\u5904\u7406\uff0c\u6700\u540e\u5c06\u6570\u636e\u4e0b\u6c89\u3002"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u6d88\u606f\u901a\u9053( channel )\u662f ",(0,s.kt)("a",{parentName:"li",href:"https://docs.rs/crossbeam-channel/0.5.4/crossbeam_channel/fn.bounded.html"},"crossbeam_channel::bounded"),"\uff0c\u5b83\u53ea\u80fd\u7f13\u5b58\u4e00\u6761\u6d88\u606f\u3002\u5f53\u7f13\u5b58\u6ee1\u540e\uff0c\u53d1\u9001\u8005\u7ee7\u7eed\u8c03\u7528 ","[crossbeam_channel::Sender::send]"," \u53d1\u9001\u6d88\u606f\u65f6\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u4e00\u4e2a\u5de5\u4f5c\u7ebf\u7a0b( \u6d88\u8d39\u8005 ) \u62ff\u8d70\u8fd9\u6761\u6d88\u606f"),(0,s.kt)("li",{parentName:"ul"},"\u6d88\u8d39\u8005\u83b7\u53d6\u6d88\u606f\u65f6\u5148\u5230\u5148\u5f97\u7684\u7b56\u7565\uff0c\u56e0\u6b64\u4e24\u4e2a\u5de5\u4f5c\u7ebf\u7a0b\u53ea\u6709\u4e00\u4e2a\u80fd\u53d6\u5230\u6d88\u606f\uff0c\u4fdd\u8bc1\u6d88\u606f\u4e0d\u4f1a\u88ab\u91cd\u590d\u6d88\u8d39\u3001\u5904\u7406"),(0,s.kt)("li",{parentName:"ul"},"\u901a\u8fc7\u8fed\u4ee3\u5668 ",(0,s.kt)("a",{parentName:"li",href:"https://docs.rs/crossbeam-channel/*/crossbeam_channel/struct.Receiver.html#method.iter"},"crossbeam_channel::Receiver::iter")," \u8bfb\u53d6\u6d88\u606f\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u76f4\u5230\u65b0\u6d88\u606f\u7684\u5230\u6765\u6216 channel \u5173\u95ed"),(0,s.kt)("li",{parentName:"ul"},"channel \u53ea\u6709\u5728\u6240\u6709\u7684\u53d1\u9001\u8005\u6216\u6d88\u8d39\u8005\u5173\u95ed\u540e\uff0c\u624d\u80fd\u88ab\u5173\u95ed\u3002\u800c\u5176\u4e2d\u4e00\u4e2a\u6d88\u8d39\u8005 ",(0,s.kt)("inlineCode",{parentName:"li"},"rcv2")," \u5904\u4e8e\u963b\u585e\u8bfb\u53d6\u72b6\u6001\uff0c\u65e0\u6bd4\u88ab\u5173\u95ed\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u8981\u5173\u95ed\u6240\u6709\u53d1\u9001\u8005: ",(0,s.kt)("inlineCode",{parentName:"li"},"drop(snd1);"),"  ",(0,s.kt)("inlineCode",{parentName:"li"},"drop(snd2)")," \uff0c\u8fd9\u6837 channel \u5173\u95ed\u540e\uff0c\u4e3b\u7ebf\u7a0b\u7684 ",(0,s.kt)("inlineCode",{parentName:"li"},"rcv2")," \u624d\u80fd\u4ece\u963b\u585e\u72b6\u6001\u9000\u51fa\uff0c\u6700\u540e\u6574\u4e2a\u7a0b\u5e8f\u7ed3\u675f\u3002\u5927\u5bb6\u8fd8\u662f\u8ff7\u60d1\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u770b\u8fd9\u7bc7",(0,s.kt)("a",{parentName:"li",href:"https://course.rs/practice/pitfalls/main-with-channel-blocked.html"},"\u6587\u7ae0"),"\u3002")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'extern crate crossbeam;\nextern crate crossbeam_channel;\n\nuse std::thread;\nuse std::time::Duration;\nuse crossbeam_channel::bounded;\n\nfn main {\n    let (snd1, rcv1) = bounded(1);\n    let (snd2, rcv2) = bounded(1);\n    let n_msgs = 4;\n    let n_workers = 2;\n\n    crossbeam::scope(|s| {\n        // \u751f\u4ea7\u8005\u7ebf\u7a0b\n        s.spawn(|_| {\n            for i in 0..n_msgs {\n                snd1.send(i).unwrap;\n                println!("Source sent {}", i);\n            }\n \n            // \u5173\u95ed\u5176\u4e2d\u4e00\u4e2a\u53d1\u9001\u8005 snd1\n            // \u8be5\u5173\u95ed\u64cd\u4f5c\u5bf9\u4e8e\u7ed3\u675f\u6700\u540e\u7684\u5faa\u73af\u662f\u5fc5\u987b\u7684\n            drop(snd1);\n        });\n\n        // \u901a\u8fc7\u4e24\u4e2a\u7ebf\u7a0b\u5e76\u884c\u5904\u7406\n        for _ in 0..n_workers {\n            // \u4ece\u6570\u636e\u6e90\u63a5\u6536\u6570\u636e\uff0c\u7136\u540e\u53d1\u9001\u5230\u4e0b\u6c89\u7aef\n            let (sendr, recvr) = (snd2.clone, rcv1.clone);\n            // \u751f\u6210\u5355\u72ec\u7684\u5de5\u4f5c\u7ebf\u7a0b\n            s.spawn(move |_| {\n            thread::sleep(Duration::from_millis(500));\n                // \u7b49\u5f85\u901a\u9053\u7684\u5173\u95ed\n                for msg in recvr.iter {\n                    println!("Worker {:?} received {}.",\n                             thread::current.id, msg);\n                    sendr.send(msg * 2).unwrap;\n                }\n            });\n        }\n        // \u5173\u95ed\u901a\u9053\uff0c\u5982\u679c\u4e0d\u5173\u95ed\uff0c\u4e0b\u6c89\u7aef\u5c06\u6c38\u8fdc\u65e0\u6cd5\u7ed3\u675f\u5faa\u73af\n        drop(snd2);\n\n        // \u4e0b\u6c89\u7aef\n        for msg in rcv2.iter {\n            println!("Sink received {}", msg);\n        }\n    }).unwrap;\n}\n')),(0,s.kt)("h3",{id:"\u7ebf\u7a0b\u95f4\u4f20\u9012\u6570\u636e"},"\u7ebf\u7a0b\u95f4\u4f20\u9012\u6570\u636e"),(0,s.kt)("p",null,"\u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/crossbeam-channel/*/crossbeam_channel/index.html"},"crossbeam-channel")," \u7684\u5355\u751f\u4ea7\u8005\u5355\u6d88\u8d39\u8005( SPSC ) \u4f7f\u7528\u573a\u666f\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use std::{thread, time};\nuse crossbeam_channel::unbounded;\n\nfn main {\n    // unbounded \u610f\u5473\u7740 channel \u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u591a\u7684\u6d88\u606f\n    let (snd, rcv) = unbounded;\n    let n_msgs = 5;\n    crossbeam::scope(|s| {\n        s.spawn(|_| {\n            for i in 0..n_msgs {\n                snd.send(i).unwrap;\n                thread::sleep(time::Duration::from_millis(100));\n            }\n        });\n    }).unwrap;\n    for _ in 0..n_msgs {\n        let msg = rcv.recv.unwrap;\n        println!("Received {}", msg);\n    }\n}\n')),(0,s.kt)("h3",{id:"\u7ef4\u62a4\u5168\u5c40\u53ef\u53d8\u7684\u72b6\u6001"},"\u7ef4\u62a4\u5168\u5c40\u53ef\u53d8\u7684\u72b6\u6001"),(0,s.kt)("p",null,"[lazy_static]"," \u4f1a\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u7684\u9759\u6001\u5f15\u7528( static ref )\uff0c\u8be5\u5f15\u7528\u4f7f\u7528\u4e86 ",(0,s.kt)("inlineCode",{parentName:"p"},"Mutex")," \u4ee5\u652f\u6301\u53ef\u53d8\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002",(0,s.kt)("inlineCode",{parentName:"p"},"Mutex")," \u80fd\u4fdd\u8bc1\u8be5\u5168\u5c40\u72b6\u6001\u540c\u65f6\u53ea\u80fd\u88ab\u4e00\u4e2a\u7ebf\u7a0b\u6240\u8bbf\u95ee\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use error_chain::error_chain;\nuse lazy_static::lazy_static;\nuse std::sync::Mutex;\n\nerror_chain!{ }\n\nlazy_static! {\n    static ref FRUIT: Mutex<Vec<String>> = Mutex::new(Vec::new);\n}\n\nfn insert(fruit: &str) -> Result<> {\n    let mut db = FRUIT.lock.map_err(|_| "Failed to acquire MutexGuard")?;\n    db.push(fruit.to_string);\n    Ok()\n}\n\nfn main -> Result<> {\n    insert("apple")?;\n    insert("orange")?;\n    insert("peach")?;\n    {\n        let db = FRUIT.lock.map_err(|_| "Failed to acquire MutexGuard")?;\n\n        db.iter.enumerate.for_each(|(i, item)| println!("{}: {}", i, item));\n    }\n    insert("grape")?;\n    Ok()\n}\n')),(0,s.kt)("h3",{id:"\u5e76\u884c\u8ba1\u7b97-iso-\u6587\u4ef6\u7684-sha256"},"\u5e76\u884c\u8ba1\u7b97 iso \u6587\u4ef6\u7684 SHA256"),(0,s.kt)("p",null,"\u4e0b\u9762\u7684\u793a\u4f8b\u5c06\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6bcf\u4e00\u4e2a .iso \u6587\u4ef6\u90fd\u8ba1\u7b97\u4e00\u4e2a SHA256 sum\u3002\u5176\u4e2d\u7ebf\u7a0b\u6c60\u4e2d\u4f1a\u521d\u59cb\u5316\u548c CPU \u6838\u5fc3\u6570\u4e00\u81f4\u7684\u7ebf\u7a0b\u6570\uff0c\u5176\u4e2d\u6838\u5fc3\u6570\u662f\u901a\u8fc7 ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/num_cpus/*/num_cpus/fn.get.html"},"num_cpus::get")," \u51fd\u6570\u83b7\u53d6\u3002"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Walkdir::new")," \u53ef\u4ee5\u904d\u5386\u5f53\u524d\u7684\u76ee\u5f55\uff0c\u7136\u540e\u8c03\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"execute")," \u6765\u6267\u884c\u8bfb\u64cd\u4f5c\u548c SHA256 \u54c8\u5e0c\u8ba1\u7b97\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'\nuse walkdir::WalkDir;\nuse std::fs::File;\nuse std::io::{BufReader, Read, Error};\nuse std::path::Path;\nuse threadpool::ThreadPool;\nuse std::sync::mpsc::channel;\nuse ring::digest::{Context, Digest, SHA256};\n\n// Verify the iso extension\nfn is_iso(entry: &Path) -> bool {\n    match entry.extension {\n        Some(e) if e.to_string_lossy.to_lowercase == "iso" => true,\n        _ => false,\n    }\n}\n\nfn compute_digest<P: AsRef<Path>>(filepath: P) -> Result<(Digest, P), Error> {\n    let mut buf_reader = BufReader::new(File::open(&filepath)?);\n    let mut context = Context::new(&SHA256);\n    let mut buffer = [0; 1024];\n\n    loop {\n        let count = buf_reader.read(&mut buffer)?;\n        if count == 0 {\n            break;\n        }\n        context.update(&buffer[..count]);\n    }\n\n    Ok((context.finish, filepath))\n}\n\nfn main -> Result<, Error> {\n    let pool = ThreadPool::new(num_cpus::get);\n\n    let (tx, rx) = channel;\n\n    for entry in WalkDir::new("/home/user/Downloads")\n        .follow_links(true)\n        .into_iter\n        .filter_map(|e| e.ok)\n        .filter(|e| !e.path.is_dir && is_iso(e.path)) {\n            let path = entry.path.to_owned;\n            let tx = tx.clone;\n            pool.execute(move || {\n                let digest = compute_digest(path);\n                tx.send(digest).expect("Could not send data!");\n            });\n        }\n\n    drop(tx);\n    for t in rx.iter {\n        let (sha, path) = t?;\n        println!("{:?} {:?}", sha, path);\n    }\n    Ok()\n}\n')),(0,s.kt)("h3",{id:"\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6765\u7ed8\u5236\u5206\u5f62"},"\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6765\u7ed8\u5236\u5206\u5f62"),(0,s.kt)("p",null,"\u4e0b\u9762\u4f8b\u5b50\u4e2d\u5c06\u57fa\u4e8e ","[Julia Set]"," \u6765\u7ed8\u5236\u4e00\u4e2a\u5206\u5f62\u56fe\u7247\uff0c\u5176\u4e2d\u4f7f\u7528\u5230\u4e86\u7ebf\u7a0b\u6c60\u6765\u505a\u5206\u5e03\u5f0f\u8ba1\u7b97\u3002"),(0,s.kt)("img",{src:"https://cloud.githubusercontent.com/assets/221000/26546700/9be34e80-446b-11e7-81dc-dd9871614ea1.png"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,edtiable"},'# use error_chain::error_chain;\nuse std::sync::mpsc::{channel, RecvError};\nuse threadpool::ThreadPool;\nuse num::complex::Complex;\nuse image::{ImageBuffer, Pixel, Rgb};\n\n#\n# error_chain! {\n#     foreign_links {\n#         MpscRecv(RecvError);\n#         Io(std::io::Error);\n#     }\n# }\n#\n# // Function converting intensity values to RGB\n# // Based on http://www.efg2.com/Lab/ScienceAndEngineering/Spectra.htm\n# fn wavelength_to_rgb(wavelength: u32) -> Rgb<u8> {\n#     let wave = wavelength as f32;\n#\n#     let (r, g, b) = match wavelength {\n#         380..=439 => ((440. - wave) / (440. - 380.), 0.0, 1.0),\n#         440..=489 => (0.0, (wave - 440.) / (490. - 440.), 1.0),\n#         490..=509 => (0.0, 1.0, (510. - wave) / (510. - 490.)),\n#         510..=579 => ((wave - 510.) / (580. - 510.), 1.0, 0.0),\n#         580..=644 => (1.0, (645. - wave) / (645. - 580.), 0.0),\n#         645..=780 => (1.0, 0.0, 0.0),\n#         _ => (0.0, 0.0, 0.0),\n#     };\n#\n#     let factor = match wavelength {\n#         380..=419 => 0.3 + 0.7 * (wave - 380.) / (420. - 380.),\n#         701..=780 => 0.3 + 0.7 * (780. - wave) / (780. - 700.),\n#         _ => 1.0,\n#     };\n#\n#     let (r, g, b) = (normalize(r, factor), normalize(g, factor), normalize(b, factor));\n#     Rgb::from_channels(r, g, b, 0)\n# }\n#\n# // Maps Julia set distance estimation to intensity values\n# fn julia(c: Complex<f32>, x: u32, y: u32, width: u32, height: u32, max_iter: u32) -> u32 {\n#     let width = width as f32;\n#     let height = height as f32;\n#\n#     let mut z = Complex {\n#         // scale and translate the point to image coordinates\n#         re: 3.0 * (x as f32 - 0.5 * width) / width,\n#         im: 2.0 * (y as f32 - 0.5 * height) / height,\n#     };\n#\n#     let mut i = 0;\n#     for t in 0..max_iter {\n#         if z.norm >= 2.0 {\n#             break;\n#         }\n#         z = z * z + c;\n#         i = t;\n#     }\n#     i\n# }\n#\n# // Normalizes color intensity values within RGB range\n# fn normalize(color: f32, factor: f32) -> u8 {\n#     ((color * factor).powf(0.8) * 255.) as u8\n# }\n\nfn main -> Result<> {\n    let (width, height) = (1920, 1080);\n    // \u4e3a\u6307\u5b9a\u5bbd\u9ad8\u7684\u8f93\u51fa\u56fe\u7247\u5206\u914d\u5185\u5b58\n    let mut img = ImageBuffer::new(width, height);\n    let iterations = 300;\n\n    let c = Complex::new(-0.8, 0.156);\n\n    let pool = ThreadPool::new(num_cpus::get);\n    let (tx, rx) = channel;\n\n    for y in 0..height {\n        let tx = tx.clone;\n        // execute \u5c06\u6bcf\u4e2a\u50cf\u7d20\u4f5c\u4e3a\u5355\u72ec\u7684\u4f5c\u4e1a\u63a5\u6536\n        pool.execute(move || for x in 0..width {\n                         let i = julia(c, x, y, width, height, iterations);\n                         let pixel = wavelength_to_rgb(380 + i * 400 / iterations);\n                         tx.send((x, y, pixel)).expect("Could not send data!");\n                     });\n    }\n\n    for _ in 0..(width * height) {\n        let (x, y, pixel) = rx.recv?;\n        // \u4f7f\u7528\u6570\u636e\u6765\u8bbe\u7f6e\u50cf\u7d20\u7684\u989c\u8272\n        img.put_pixel(x, y, pixel);\n    }\n    \n    // \u8f93\u51fa\u56fe\u7247\u5185\u5bb9\u5230\u6307\u5b9a\u6587\u4ef6\u4e2d\n    let _ = img.save("output.png")?;\n    Ok()\n}\n')))}d.isMDXComponent=!0}}]);