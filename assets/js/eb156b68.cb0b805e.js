"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1902],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),f=p(t),d=o,y=f["".concat(c,".").concat(d)]||f[d]||u[d]||a;return t?r.createElement(y,s(s({ref:n},l),{},{components:t})):r.createElement(y,s({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6763:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return l}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),s=["components"],i={},c="\u52a0\u5bc6",p={unversionedId:"rusty/algos/cryptography/encryption",id:"rusty/algos/cryptography/encryption",isDocsHomePage:!1,title:"\u52a0\u5bc6",description:"\u4f7f\u7528  PBKDF2 \u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u548c\u52a0\u76d0( salt )",source:"@site/docs/rusty/algos/cryptography/encryption.md",sourceDirName:"rusty/algos/cryptography",slug:"/rusty/algos/cryptography/encryption",permalink:"/rooctblog/docs/rusty/algos/cryptography/encryption",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u4f7f\u7528tar\u5305",permalink:"/rooctblog/docs/rusty/algos/compression/tar"},next:{title:"\u54c8\u5e0c",permalink:"/rooctblog/docs/rusty/algos/cryptography/hashing"}},l=[{value:"\u4f7f\u7528  PBKDF2 \u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u548c\u52a0\u76d0( salt )",id:"\u4f7f\u7528--pbkdf2-\u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u548c\u52a0\u76d0-salt-",children:[]}],u={toc:l};function f(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u52a0\u5bc6"},"\u52a0\u5bc6"),(0,a.kt)("h3",{id:"\u4f7f\u7528--pbkdf2-\u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u548c\u52a0\u76d0-salt-"},"\u4f7f\u7528  PBKDF2 \u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u548c\u52a0\u76d0( salt )"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://briansmith.org/rustdoc/ring/pbkdf2/index.html"},"ring::pbkdf2")," \u53ef\u4ee5\u5bf9\u4e00\u4e2a\u52a0\u76d0\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust,editable"},'\nuse data_encoding::HEXUPPER;\nuse ring::error::Unspecified;\nuse ring::rand::SecureRandom;\nuse ring::{digest, pbkdf2, rand};\nuse std::num::NonZeroU32;\n\nfn main -> Result<, Unspecified> {\n    const CREDENTIAL_LEN: usize = digest::SHA512_OUTPUT_LEN;\n    let n_iter = NonZeroU32::new(100_000).unwrap;\n    let rng = rand::SystemRandom::new;\n\n    let mut salt = [0u8; CREDENTIAL_LEN];\n    // \u751f\u6210 salt: \u5c06\u5b89\u5168\u751f\u6210\u7684\u968f\u673a\u6570\u586b\u5165\u5230\u5b57\u8282\u6570\u7ec4\u4e2d\n    rng.fill(&mut salt)?;\n\n    let password = "Guess Me If You Can!";\n    let mut pbkdf2_hash = [0u8; CREDENTIAL_LEN];\n    pbkdf2::derive(\n        pbkdf2::PBKDF2_HMAC_SHA512,\n        n_iter,\n        &salt,\n        password.as_bytes,\n        &mut pbkdf2_hash,\n    );\n    println!("Salt: {}", HEXUPPER.encode(&salt));\n    println!("PBKDF2 hash: {}", HEXUPPER.encode(&pbkdf2_hash));\n\n    // `verify` \u68c0\u67e5\u54c8\u5e0c\u662f\u5426\u6b63\u786e\n    let should_`succeed = pbkdf2::verify(\n        pbkdf2::PBKDF2_HMAC_SHA512,\n        n_iter,\n        &salt,\n        password.as_bytes,\n        &pbkdf2_hash,\n    );\n    let wrong_password = "Definitely not the correct password";\n    let should_fail = pbkdf2::verify(\n        pbkdf2::PBKDF2_HMAC_SHA512,\n        n_iter,\n        &salt,\n        wrong_password.as_bytes,\n        &pbkdf2_hash,\n    );\n\n    assert!(should_succeed.is_ok);\n    assert!(!should_fail.is_ok);\n\n    Ok()\n}\n')))}f.isMDXComponent=!0}}]);