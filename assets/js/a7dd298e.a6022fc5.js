"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[752],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),i=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=i(e.components);return o.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=i(t),p=r,f=m["".concat(c,".").concat(p)]||m[p]||d[p]||l;return t?o.createElement(f,a(a({ref:n},u),{},{components:t})):o.createElement(f,a({ref:n},u))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var i=2;i<l;i++)a[i]=t[i];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3019:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return u}});var o=t(7462),r=t(3366),l=(t(7294),t(3905)),a=["components"],s={title:"Accounts"},c=void 0,i={unversionedId:"devtools/ethers.js/Accounts",id:"devtools/ethers.js/Accounts",isDocsHomePage:!1,title:"Accounts",description:"Accounts",source:"@site/docs/devtools/ethers.js/Accounts.md",sourceDirName:"devtools/ethers.js",slug:"/devtools/ethers.js/Accounts",permalink:"/rooctblog/docs/devtools/ethers.js/Accounts",tags:[],version:"current",frontMatter:{title:"Accounts"},sidebar:"devtools",previous:{title:"devtools",permalink:"/rooctblog/docs/devtool"}},u=[{value:"Accounts",id:"accounts",children:[]}],d={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,a);return(0,l.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"accounts"},"Accounts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'// 1A) Restore HD Wallet from Existing Mnemonic\n\nconst ethers = require(\'ethers\');\n\nfunction restoreHDNode(mnemonic) {\n    return ethers.utils.HDNode.fromMnemonic(mnemonic);\n}\nlet mnemonic = "upset fuel enhance depart portion hope core animal innocent will athlete snack";\n\nconsole.log(restoreHDNode(mnemonic));\n\n// 1B) Restore HD Wallet from Existing Mnemonic\n\nconsole.log();\n\nfunction restoreHDWallet(mnemonic) {\n    return ethers.Wallet.fromMnemonic(mnemonic);\n}\n\nconsole.log(restoreHDWallet(mnemonic));\n\n// 2A) Generate a New Random HD Wallet from Random Mnemonic\n\nconsole.log();\n\nfunction generateMnemonic() {\n    let randomEntropyBytes = ethers.utils.randomBytes(16);\n    return ethers.utils.HDNode.entropyToMnemonic(randomEntropyBytes);\n}\n\nfunction generateRandomHDNode() {\n    let mnemonic = generateMnemonic();\n    return ethers.utils.HDNode.fromMnemonic(mnemonic);\n}\n\nconsole.log(generateRandomHDNode());\n\nconsole.log();\n\n// 2B) Generate a New Random HD Wallet from Random Mnemonic\n\nfunction generateRandomWallet() {\n    return ethers.Wallet.createRandom();\n}\n\nconsole.log(generateRandomWallet());\n\nconsole.log();\n\n// 3A) Save HD Wallet as JSON\n\nasync function saveWalletAsJson(wallet, password) {\n    return wallet.encrypt(password);\n}\n\n(async() => {\n    let wallet = ethers.Wallet.createRandom();\n    let password = "p@$$word";\n    let json = await saveWalletAsJson(wallet, password);\n    console.log(json);\n})();\n\nconsole.log();\n\n\n// 3B) Load HD Wallet from JSON\n\nasync function decryptWallet(json, password) {\n    return ethers.Wallet.fromEncryptedJson(json, password);\n}\n\n(async() => {\n    let wallet = ethers.Wallet.createRandom();\n    let password = "p@$$word";\n    let json = await saveWalletAsJson(wallet, password);\n    let walletDecrypted = await decryptWallet(json, password);\n    console.log(walletDecrypted);\n})();\n\nconsole.log();\n\n// 4) Derive Keys from HD Wallet \u901a\u8fc7\u52a9\u8bb0\u8bcd\u6d3e\u751f\u591a\u4e2a\u94b1\u5305\u5730\u5740\u548c\u79c1\u94a5\n\nfunction deriveFiveWalletsFromHdNode(mnemonic, derivationPath) {\n    let wallets = [];\n\n        for (let i = 0; i < 5; i++) {\n            let hdNode = ethers.utils.HDNode.fromMnemonic(mnemonic).derivePath(derivationPath + "/" + i);\n            console.log(hdNode);\n            let wallet = new ethers.Wallet(hdNode.privateKey);\n            wallets.push(wallet);\n        }\n        return wallets;\n}\n\nlet derivationPath = "m/44\'/60\'/0\'/0";\n\nconsole.log(deriveFiveWalletsFromHdNode(mnemonic, derivationPath));\n\n// 5) Sign a Transaction\n\nasync function signTransaction(wallet, toAddress, value) {\n    let transaction = {\n        nonce: 0,\n        gasLimit: 21000,\n        gasPrice: ethers.utils.bigNumberify("2000000000"),\n        to: toAddress,\n        value: ethers.utils.parseEther(value),\n        data: "0x"\n    };\n    return wallet.sign(transaction);\n}\n\nlet wallets = deriveFiveWalletsFromHdNode(mnemonic, derivationPath);\nlet wallet = wallets[1];\nlet recipient = "0x933b946c4fec43372c5580096408d25b3c7936c5";\nlet value = "1.0";\n\n(async() => {\n    let signedTransaction = await signTransaction(wallet, recipient, value);\n    console.log("Signed Transaction:\\n" + signedTransaction); })();\n\nconsole.log();\n')))}m.isMDXComponent=!0}}]);