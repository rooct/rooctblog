"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3647],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),y=o,m=p["".concat(u,".").concat(y)]||p[y]||s[y]||i;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1936:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],c={title:"ABI Decode",version:"0.8.10",description:"ABI decode bytes"},u=void 0,l={unversionedId:"solidity/example/AbiDecode",id:"solidity/example/AbiDecode",isDocsHomePage:!1,title:"ABI Decode",description:"ABI decode bytes",source:"@site/docs/solidity/example/AbiDecode.md",sourceDirName:"solidity/example",slug:"/solidity/example/AbiDecode",permalink:"/rooctblog/docs/solidity/example/AbiDecode",tags:[],version:"current",frontMatter:{title:"ABI Decode",version:"0.8.10",description:"ABI decode bytes"},sidebar:"docs",previous:{title:"PiggyBank",permalink:"/rooctblog/docs/solidity/example/practice/PiggyBank"},next:{title:"AccountFactory",permalink:"/rooctblog/docs/solidity/example/AccountFactory"}},d=[],s={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"struct\u7ed3\u6784\u4f53\u5176\u5b9e\u662f\u4e00\u79cd\u591a\u7ef4\u7684\u6570\u7ec4\uff0cremix\u4f20\u53c2\u6570\u4f7f\u7528[]")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"abi.encode")," encodes data into ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"abi.decode")," decodes ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes")," back into data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract AbiDecode {\n    struct MyStruct {\n        string name;\n        uint[2] nums;\n    }\n\n    function encode(\n        uint x,\n        address addr,\n        uint[] calldata arr,\n        MyStruct calldata myStruct\n    ) external pure returns (bytes memory) {\n        return abi.encode(x, addr, arr, myStruct);\n    }\n\n    function decode(bytes calldata data)\n        external\n        pure\n        returns (\n            uint x,\n            address addr,\n            uint[] memory arr,\n            MyStruct memory myStruct\n        )\n    {\n        // (uint x, address addr, uint[] memory arr, MyStruct myStruct) = ...\n        (x, addr, arr, myStruct) = abi.decode(data, (uint, address, uint[], MyStruct));\n    }\n}\n\n")))}p.isMDXComponent=!0}}]);