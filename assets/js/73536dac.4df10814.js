"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3567],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(r),f=o,m=d["".concat(a,".").concat(f)]||d[f]||s[f]||c;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,i=new Array(c);i[0]=d;var p={};for(var a in t)hasOwnProperty.call(t,a)&&(p[a]=t[a]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var l=2;l<c;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3584:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return u}});var n=r(7462),o=r(3366),c=(r(7294),r(3905)),i=["components"],p={},a="TCP/IP",l={unversionedId:"rusty/protocols/tcpip",id:"rusty/protocols/tcpip",isDocsHomePage:!1,title:"TCP/IP",description:"\u76d1\u542c TCP \u7aef\u53e3",source:"@site/docs/rusty/protocols/tcpip.md",sourceDirName:"rusty/protocols",slug:"/rusty/protocols/tcpip",permalink:"/rooctblog/docs/rusty/protocols/tcpip",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u5904\u7406\u5668",permalink:"/rooctblog/docs/rusty/os/processor"},next:{title:"\u6b63\u5219\u8868\u8fbe\u5f0f",permalink:"/rooctblog/docs/rusty/text/regex"}},u=[{value:"\u76d1\u542c TCP \u7aef\u53e3",id:"\u76d1\u542c-tcp-\u7aef\u53e3",children:[]},{value:"\u5faa\u73af\u63a5\u6536\u8fdb\u5165\u7684 TCP \u8fde\u63a5",id:"\u5faa\u73af\u63a5\u6536\u8fdb\u5165\u7684-tcp-\u8fde\u63a5",children:[]}],s={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"tcpip"},"TCP/IP"),(0,c.kt)("h3",{id:"\u76d1\u542c-tcp-\u7aef\u53e3"},"\u76d1\u542c TCP \u7aef\u53e3"),(0,c.kt)("p",null,"\u4ee5\u4e0b\u4ee3\u7801\u4f1a\u76d1\u542c\u6307\u5b9a\u7684 TCP \u7aef\u53e3\uff0c\u5e76\u63a5\u6536\u4e00\u6761\u5916\u90e8\u8fdb\u5165\u7684 TCP \u8fde\u63a5\uff0c\u7136\u540e\u5c06\u8bfb\u53d6\u5230\u7684\u4e00\u6761\u4fe1\u606f\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa( ",(0,c.kt)("inlineCode",{parentName:"p"},"println!")," )\u3002"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use std::net::{SocketAddrV4, Ipv4Addr, TcpListener};\nuse std::io::{Read, Error};\n\nfn main -> Result<, Error> {\n    let loopback = Ipv4Addr::new(127, 0, 0, 1);\n    let socket = SocketAddrV4::new(loopback, 0);\n    let listener = TcpListener::bind(socket)?;\n    let port = listener.local_addr?;\n    println!("Listening on {}, access this port to end the program", port);\n    let (mut tcp_stream, addr) = listener.accept?; //block  until requested\n    println!("Connection received! {:?} is sending data.", addr);\n    let mut input = String::new;\n    let _ = tcp_stream.read_to_string(&mut input)?;\n    println!("{:?} says {}", addr, input);\n    Ok()\n}\n')),(0,c.kt)("h3",{id:"\u5faa\u73af\u63a5\u6536\u8fdb\u5165\u7684-tcp-\u8fde\u63a5"},"\u5faa\u73af\u63a5\u6536\u8fdb\u5165\u7684 TCP \u8fde\u63a5"),(0,c.kt)("p",null,"@todo"))}d.isMDXComponent=!0}}]);