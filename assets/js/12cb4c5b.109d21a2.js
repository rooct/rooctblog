"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6718],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(t),f=i,m=p["".concat(d,".").concat(f)]||p[f]||u[f]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5055:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return d},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],s={title:"English Auction",version:"0.8.10",description:"An example of English auction in Solidity"},d=void 0,l={unversionedId:"Example/app/EnglishAuction",id:"Example/app/EnglishAuction",isDocsHomePage:!1,title:"English Auction",description:"An example of English auction in Solidity",source:"@site/docs/Example/app/EnglishAuction.md",sourceDirName:"Example/app",slug:"/Example/app/EnglishAuction",permalink:"/rooctblog/docs/Example/app/EnglishAuction",tags:[],version:"current",frontMatter:{title:"English Auction",version:"0.8.10",description:"An example of English auction in Solidity"},sidebar:"tutorialSidebar",previous:{title:"Dutch Auction",permalink:"/rooctblog/docs/Example/app/DutchAuction"},next:{title:"ERC20",permalink:"/rooctblog/docs/Example/app/Erc20"}},c=[{value:"Auction",id:"auction",children:[]},{value:"After the auction",id:"after-the-auction",children:[]}],u={toc:c};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"English auction for NFT."),(0,a.kt)("h3",{id:"auction"},"Auction"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Seller of NFT deploys this contract."),(0,a.kt)("li",{parentName:"ol"},"Auction lasts for 7 days."),(0,a.kt)("li",{parentName:"ol"},"Participants can bid by depositing ETH greater than the current highest bidder."),(0,a.kt)("li",{parentName:"ol"},"All bidders can withdraw their bid if it is not the current highest bid.")),(0,a.kt)("h3",{id:"after-the-auction"},"After the auction"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Highest bidder becomes the new owner of NFT."),(0,a.kt)("li",{parentName:"ol"},"The seller receives the highest bid of ETH.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IERC721 {\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint tokenId\n    ) external;\n\n    function transferFrom(\n        address,\n        address,\n        uint\n    ) external;\n}\n\ncontract EnglishAuction {\n    event Start();\n    event Bid(address indexed sender, uint amount);\n    event Withdraw(address indexed bidder, uint amount);\n    event End(address winner, uint amount);\n\n    IERC721 public nft;\n    uint public nftId;\n\n    address payable public seller;\n    uint public endAt;\n    bool public started;\n    bool public ended;\n\n    address public highestBidder;\n    uint public highestBid;\n    mapping(address => uint) public bids;\n\n    constructor(\n        address _nft,\n        uint _nftId,\n        uint _startingBid\n    ) {\n        nft = IERC721(_nft);\n        nftId = _nftId;\n\n        seller = payable(msg.sender);\n        highestBid = _startingBid;\n    }\n\n    function start() external {\n        require(!started, "started");\n        require(msg.sender == seller, "not seller");\n\n        nft.transferFrom(msg.sender, address(this), nftId);\n        started = true;\n        endAt = block.timestamp + 7 days;\n\n        emit Start();\n    }\n\n    function bid() external payable {\n        require(started, "not started");\n        require(block.timestamp < endAt, "ended");\n        require(msg.value > highestBid, "value < highest");\n\n        if (highestBidder != address(0)) {\n            bids[highestBidder] += highestBid;\n        }\n\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n\n        emit Bid(msg.sender, msg.value);\n    }\n\n    function withdraw() external {\n        uint bal = bids[msg.sender];\n        bids[msg.sender] = 0;\n        payable(msg.sender).transfer(bal);\n\n        emit Withdraw(msg.sender, bal);\n    }\n\n    function end() external {\n        require(started, "not started");\n        require(block.timestamp >= endAt, "not ended");\n        require(!ended, "ended");\n\n        ended = true;\n        if (highestBidder != address(0)) {\n            nft.safeTransferFrom(address(this), highestBidder, nftId);\n            seller.transfer(highestBid);\n        } else {\n            nft.safeTransferFrom(address(this), seller, nftId);\n        }\n\n        emit End(highestBidder, highestBid);\n    }\n}\n\n')))}p.isMDXComponent=!0}}]);