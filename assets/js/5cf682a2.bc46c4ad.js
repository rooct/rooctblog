"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3353],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(n),f=a,d=m["".concat(i,".").concat(f)]||m[f]||p[f]||l;return n?r.createElement(d,c(c({ref:t},u),{},{components:n})):r.createElement(d,c({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,c=new Array(l);c[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<l;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1175:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),c=["components"],o={},i=void 0,s={unversionedId:"dapps/Example/UniswapMultcall",id:"dapps/Example/UniswapMultcall",isDocsHomePage:!1,title:"UniswapMultcall",description:"`",source:"@site/docs/dapps/Example/UniswapMultcall.md",sourceDirName:"dapps/Example",slug:"/dapps/Example/UniswapMultcall",permalink:"/rooctblog/docs/dapps/Example/UniswapMultcall",tags:[],version:"current",frontMatter:{},sidebar:"dapp",previous:{title:"Multicall",permalink:"/rooctblog/docs/dapps/Example/Multicall"},next:{title:"\u4ee3\u7406\u6295\u7968",permalink:"/rooctblog/docs/dapps/Example/\u4ee3\u7406\u6295\u7968"}},u=[],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"/**\n *Submitted for verification at BscScan.com on 2022-05-07\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity =0.7.6;\npragma abicoder v2;\n\n/// @notice A fork of Multicall2 specifically tailored for the Uniswap Interface\ncontract UniswapInterfaceMulticall {\n    struct Call {\n        address target;\n        uint256 gasLimit;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        uint256 gasUsed;\n        bytes returnData;\n    }\n\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n        timestamp = block.timestamp;\n    }\n\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function multicall(Call[] memory calls) public returns (uint256 blockNumber, Result[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new Result[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (address target, uint256 gasLimit, bytes memory callData) =\n                (calls[i].target, calls[i].gasLimit, calls[i].callData);\n            uint256 gasLeftBefore = gasleft();\n            (bool success, bytes memory ret) = target.call{gas: gasLimit}(callData);\n            uint256 gasUsed = gasLeftBefore - gasleft();\n            returnData[i] = Result(success, gasUsed, ret);\n        }\n    }\n}\n")))}m.isMDXComponent=!0}}]);