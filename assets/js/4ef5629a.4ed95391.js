"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9244],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),y=o,f=d["".concat(c,".").concat(y)]||d[y]||p[y]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},737:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"Payable",version:"0.8.10",description:"An example of how to use the keyword payable in Solidity"},c=void 0,s={unversionedId:"solidity/example/Payable",id:"solidity/example/Payable",isDocsHomePage:!1,title:"Payable",description:"An example of how to use the keyword payable in Solidity",source:"@site/docs/solidity/example/Payable.md",sourceDirName:"solidity/example",slug:"/solidity/example/Payable",permalink:"/rooctblog/docs/solidity/example/Payable",tags:[],version:"current",frontMatter:{title:"Payable",version:"0.8.10",description:"An example of how to use the keyword payable in Solidity"},sidebar:"docs",previous:{title:"Arithmetic Overflow and Underflow",permalink:"/rooctblog/docs/solidity/example/Overflow"},next:{title:"Primitive Data Types",permalink:"/rooctblog/docs/solidity/example/Primitives"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Functions and addresses declared ",(0,a.kt)("inlineCode",{parentName:"p"},"payable")," can receive ",(0,a.kt)("inlineCode",{parentName:"p"},"ether")," into the contract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract Payable {\n    // Payable address can receive Ether\n    address payable public owner;\n\n    // Payable constructor can receive Ether\n    constructor() payable {\n        owner = payable(msg.sender);\n    }\n\n    // Function to deposit Ether into this contract.\n    // Call this function along with some Ether.\n    // The balance of this contract will be automatically updated.\n    function deposit() public payable {}\n\n    // Call this function along with some Ether.\n    // The function will throw an error since this function is not payable.\n    function notPayable() public {}\n\n    // Function to withdraw all Ether from this contract.\n    function withdraw() public {\n        // get the amount of Ether stored in this contract\n        uint amount = address(this).balance;\n\n        // send all Ether to owner\n        // Owner can receive Ether since the address of owner is payable\n        (bool success, ) = owner.call{value: amount}("");\n        require(success, "Failed to send Ether");\n    }\n\n    // Function to transfer Ether from this contract to address from input\n    function transfer(address payable _to, uint _amount) public {\n        // Note that "to" is declared as payable\n        (bool success, ) = _to.call{value: _amount}("");\n        require(success, "Failed to send Ether");\n    }\n}\n\n')))}d.isMDXComponent=!0}}]);