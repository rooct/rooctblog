"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4725],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var s=r.createContext({}),d=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):u(u({},e),n)),t},l=function(n){var e=d(n.components);return r.createElement(s.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,s=n.parentName,l=o(n,["components","mdxType","originalType","parentName"]),p=d(t),m=i,f=p["".concat(s,".").concat(m)]||p[m]||c[m]||a;return t?r.createElement(f,u(u({ref:e},l),{},{components:t})):r.createElement(f,u({ref:e},l))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,u=new Array(a);u[0]=p;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=n,o.mdxType="string"==typeof n?n:i,u[1]=o;for(var d=2;d<a;d++)u[d]=t[d];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1681:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return l}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),u=["components"],o={title:"CFP"},s=void 0,d={unversionedId:"dapps/Example/CFP",id:"dapps/Example/CFP",isDocsHomePage:!1,title:"CFP",description:"bsc contract 0x9621f378c7cb96eeb2633cee1a68ebb0c3ea5191",source:"@site/docs/dapps/Example/CFP.md",sourceDirName:"dapps/Example",slug:"/dapps/Example/CFP",permalink:"/rooctblog/docs/dapps/Example/CFP",tags:[],version:"current",frontMatter:{title:"CFP"},sidebar:"dapp",previous:{title:"X2Y2: \u5fc5\u987b\u4fee\u6539\u7684\u4e2d\u5fc3\u5316NFT\u6302\u5355\u5956\u52b1\u673a\u5236",permalink:"/rooctblog/docs/dapps/Event/X2Y2_DecentralizedOrderReward"},next:{title:"DOR DNP DNPD",permalink:"/rooctblog/docs/dapps/Example/DORToken"}},l=[{value:"bsc contract 0x9621f378c7cb96eeb2633cee1a68ebb0c3ea5191",id:"bsc-contract-0x9621f378c7cb96eeb2633cee1a68ebb0c3ea5191",children:[]}],c={toc:l};function p(n){var e=n.components,t=(0,i.Z)(n,u);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"bsc-contract-0x9621f378c7cb96eeb2633cee1a68ebb0c3ea5191"},"bsc contract 0x9621f378c7cb96eeb2633cee1a68ebb0c3ea5191"),(0,a.kt)("p",null,"conqueror\u5f81\u670d\u8005\u4ee3\u5e01\u57fa\u4e8e\u5e01\u5b89\u667a\u80fd\u94fe\u53d1\u884c\u7531\u8584\u997cPancakeSwap\u4ea4\u6613\u6240\u8fdb\u5165\u4ea4\u6613\u9996\u6b3ewab3.0\uff0bGamefi\u751f\u6001+NFT+DAO\u6a21\u578b\u4ee3\u5e01\u81f4\u529b\u4e8e\u6253\u9020\u4e00\u4e2a\u5b8c\u5168\u53bb\u4e2d\u5fc3\u5316\u8054\u52a8\u751f\u6001\uff0c\u673a\u5236\u6a21\u578b\u516c\u5f00\u900f\u660e\u8d85\u5f3a\u6781\u81f4\u901a\u7f29+\u9632\u66b4\u8dcc+Gamefi\u5168\u7403\u9996\u521b\u901a\u8bc1\u6a21\u578b\n\u4ee3\u5e01\u673a\u5236\uff1a\n\u4ee3\u5e01\u82f1\u6587\u540d\u79f0\uff1aconqueror\n\u4ee3\u5e01\u4e2d\u6587\u540d\u79f0\uff1a\u5f81\u670d\u8005\n\u603b\u53d1\u884c\u91cf\uff1a4000\u4e07\u679a\n\u516c\u52df\uff1a400\u4e07\u679a      10%\n\u6e38\u620f\u6316\u77ff\uff1a3200\u4e07\u679a     80%",(0,a.kt)("br",{parentName:"p"}),"\n","LP\u5e95\u6c60\uff1a200\u4e07\u679a    5%\n\u793e\u533a\u5efa\u8bbe\uff1a 40\u4e07\u679a     1%\n\u6280\u672f\uff1a 40\u4e07\u679a           1%\n\u57fa\u91d1\u4f1a\uff1a  40\u4e07\u679a      1%\n\u7a7a\u6295\uff1a80\u4e07\u679a         2%\n\u4ea4\u6613\u673a\u5236:\n\u624b\u7eed\u8d39\u4e70\u5356\u8f6c\u8d268%\n\u9ed1\u6d1e\u9500\u6bc14%\n\u5feb\u901f\u9500\u6bc1\u901a\u7f29\uff0c\u6700\u7ec8\u901a\u7f29\u523040\u4e07\u679a\n\u6301\u5e01\u5206\u7ea22%\n\u6301\u5e01\u591f200u\u7b49\u4ef7\u5e01\u8fdb\u884c\u5206\u7ea2\uff0c\u771f\u6b63\u7684\u8eba\u8d62\u5e01\u5708\n\u6307\u5b9a\u8425\u9500\u5730\u57402%\nv1\u767e\u4f4d\u8054\u521b\u80a1\u4e1c\u6bcf\u65e5\u5206\u7ea2\uff0cv2\u8d4b\u80fd\u516c\u4f1a\u548c\u751f\u6001\u53ca\u8054\u521b\u5206\u7ea2"),(0,a.kt)("p",null,"\u5b89\u5168\u673a\u5236\uff1a\n\u9632\u7206\u8dcc\u6781\u901f\u901a\u7f29\n\uff081\uff09\u5f53\u5e01\u4ef7\u8dcc\u5e45\u5927\u4e8e10%\u65f6\uff0c\u6bcf\u4e0b\u8dcc1%\uff0c\u5219\u4ea4\u6613\u624b\u7eed\u8d39\u4e0a\u6da85%\n\uff082\uff09\u4ea4\u6613\u624b\u7eed\u8d39\u6700\u5927\u4e3a\uff1a48%\n\uff083\uff09\u589e\u52a0\u7684\u624b\u7eed\u8d39\u76f4\u63a5\u89e6\u53d1\u5408\u7ea6\u81ea\u52a8\u9ed1\u6d1e\u9500\u6bc1\n\u4ee3\u5e01\u5b98\u7f51\u516c\u52df\n\u9650\u91cf400\u4e07\u679a\u9636\u68af\u5236\u516c\u52df\u53d1\u552e\n\u8054\u5408\u521b\u59cb\u80a1\u4e1c\uff1a    0.1u       200\u4e07\u679a \uff08\u9501\u4ed3\u91ca\u653e\uff09\n\u4e0a\u7ebf\u9996\u6b21\u53d1\u653e10%\uff08\u5269\u4f5990%\u6708\u91ca\u653e) \u6bcf\u670810%\n\u9996\u8f6e\u79c1\u52df\uff1a0.15u   110\u4e07\u679a    1650\u4efd     666\u679a/\u4efd\n\u9996\u6b21\u53d1\u653e30%\uff0c\u5269\u4f59\u7684\u6b21\u6708\u8d77\u6bcf\u670820%\u300120% \u300130%\n\u6b21\u8f6e\u516c\u52df\uff1a0.2u    85\u4e07\u679a      1700\u4efd      500\u679a/\u4efd\n\u9996\u6b21\u53d1\u653e30%\uff0c\u5269\u4f59\u7684\u6b21\u6708\u8d77\u6bcf\u670820%\u300120% \u300130%\n\u672b\u8f6e\u516c\u52df\uff1a0.25u    5\u4e07\u679a       250\u4efd       200\u679a/\u4efd\uff08\u5168\u90e8\u91ca\u653e)\n\u53d1\u5c55\u7ebf\u8def"),(0,a.kt)("p",null,"1.\u5b98\u7f51\uff0c\u767d\u76ae\u4e66\u4e0a\u7ebf\n2.\u6838\u5fc3\u516c\u52df\u7ade\u8d5b(\u62db\u52df\u767e\u5927\u793e\u533a\u8054\u5408\u63a8\u52a8\u6e38\u620f\u8054\u76df\u751f\u6001)\n3.\u5b98\u7f51\u516c\u52df(\u9650\u91cf400\u4e07\u679a\u9636\u68af\u5236\u516c\u52df\u53d1\u552e)\n4.\u6d77\u5916\u5927V\uff0c\u6d77\u5185\u5916\u5404\u5e73\u53f0\u5e7f\u544a\u4e0a\u7ebf\n5.\u4e0a\u7ebfpancakeswap\u8584\u997c\u4ea4\u6613\u6240\n6.\u5b8c\u6210\u5e95\u6c60\u589e\u957f\u8ba1\u5212\n\u5e95\u6c60LP\u8d852000BNB\u5f00\u542f\u5b50\u5e01\u901a\u8bc1\u6316\u77ff\n\u5e95\u6c60LP\u8d854000BNB\u5f00\u542f\u6e38\u620fNFT\u5361\u724c\u5408\u6210\n\u5e95\u6c60LP\u8d856000BNB\u4e0a\u7ebf\u6e38\u620f\u751f\u6001\u7cfb\u7edf\u4ee5\u53ca\u6e38\u620f\u6d88\u8017\u901a\u8bc1\n\u5e95\u6c60LP\u8d858000BNB\u4e0a\u7ebf\u516c\u94fe\u548cNFT\u4ea4\u6613\u5e02\u573a\u53ca\u5143\u5b87\u5b99\u751f\u6001\n7.\u5168\u751f\u6001\u5b8c\u5584\u5f00\u53d1\u5e76\u4e0a\u7ebf\u516c\u94fe"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'/**\n *Submitted for verification at BscScan.com on 2022-05-26\n*/\n\n/**\n *Submitted for verification at BscScan.com on 2021-05-30\n */\n\n/**\n *Submitted for verification at BscScan.com on 2021-05-20\n */\n\n/**\n *Submitted for verification at BscScan.com on 2021-05-16\n */\n\npragma solidity ^0.6.12;\n\n// SPDX-License-Identifier: Unlicensed\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\'s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\'s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\'s recommended to use it always.\n */\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\'s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, "SafeMath: addition overflow");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\'s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, "SafeMath: subtraction overflow");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\'s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\'s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n        // benefit is lost if \'b\' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, "SafeMath: multiplication overflow");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, "SafeMath: division by zero");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, "SafeMath: modulo by zero");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        require(address(token).isContract(), "SafeERC20: call to non-contract");\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, "SafeERC20: low-level call failed");\n        if (returndata.length > 0) { // Return data is optional\n            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n        }\n    }\n}\n\n\n\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\'\')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            "Address: insufficient balance"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}("");\n        require(\n            success,\n            "Address: unable to send value, recipient may have reverted"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                "Address: low-level call with value failed"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            "Address: insufficient balance for call"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), "Address: call to non-contract");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n            data\n        );\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            "Ownable: new owner is the zero address"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function geUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    //Locks the contract for owner for the amount of time provided\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = now + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n\n    //Unlocks the contract for owner when _lockTime is exceeds\n    function unlock() public virtual {\n        require(\n            _previousOwner == msg.sender,\n            "You don\'t have permission to unlock"\n        );\n        require(now > _lockTime, "Contract is locked until 7 days");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ncontract CoffeePeople is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    mapping(address => bool) private _isExcludedFromFee;\n\n    mapping(address => bool) private _isExcludedFromSwap;\n\n    bool public inSwapEnable = true ;\n\n    mapping(address => bool) private _isExcluded;\n    address[] private _excluded;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal = 1000 * 10**4 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    uint256 private _tBurnTotal;\n\n    string private _name = "CoffeePeople";\n    string private _symbol = "CFP";\n    uint8 private _decimals = 9;\n\n    uint256 public _taxFee = 5;\n    uint256 private _previousTaxFee = _taxFee; \n\n    uint256 public _liquidityFee = 5;\n    uint256 private _previousLiquidityFee = _liquidityFee;\n\n    uint256 public _burnFee = 10;\n    uint256 private _previousBurnFee = _burnFee;\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n\n    uint256 public _maxTxAmount = 800 * 10**4 * 10**9;\n    uint256 private numTokensSellToAddToLiquidity = 20 * 10**4 * 10**9;\n\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\n\n    address private cpDeadAddress = 0x000000000000000000000000000000000000dEaD; \n\n    //usdt testnet: 0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684\n    //usdt mainet: 0x55d398326f99059fF775485246999027B3197955   \n    //usdt2 mainet: 0x475aFe59c05a681A620002013E76D196dCeAEA2c\n\n    address public usdtTokenAddr = 0x55d398326f99059fF775485246999027B3197955; \n\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor() public {\n\n        _rOwned[_msgSender()] = _rTotal;\n\n        // testnet 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3 router         \n      \n        // mainnet 0x10ED43C718714eb63d5aA57B78B54704E256024E router\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\n        );\n        // Create a uniswap pair for this new token\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), usdtTokenAddr);\n\n        // set the rest of the contract variables\n        uniswapV2Router = _uniswapV2Router;\n\n        //exclude owner and this contract from fee\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[deadAddress] = true;\n        _isExcludedFromSwap[owner()] = true;\n        _isExcludedFromSwap[address(this)] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                "ERC20: transfer amount exceeds allowance"\n            )\n        );\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                "ERC20: decreased allowance below zero"\n            )\n        );\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    function totalBurn() public view returns (uint256) {\n        return _tBurnTotal;\n    }\n\n    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(\n            !_isExcluded[sender],\n            "Excluded addresses cannot call this function"\n        );\n        (uint256 rAmount, , , , , , ) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rTotal = _rTotal.sub(rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n    }\n\n\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\n        public\n        view\n        returns (uint256)\n    {\n        require(tAmount <= _tTotal, "Amount must be less than supply");\n        if (!deductTransferFee) {\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount)\n        public\n        view\n        returns (uint256)\n    {\n        require(\n            rAmount <= _rTotal,\n            "Amount must be less than total reflections"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeFromReward(address account) public onlyOwner {\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, \'We can not exclude Uniswap router.\');\n        require(!_isExcluded[account], "Account is already excluded");\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner {\n        require(_isExcluded[account], "Account is already excluded");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function _transferBothExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        uint256 currentRate = _getRate();\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity,\n            uint256 tBurn\n        ) = _getValues(tAmount);\n        uint256 rBurn = tBurn.mul(currentRate);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        _reflectBurn(rBurn, tBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function setBurnAddr(address account) public onlyOwner {\n        cpDeadAddress = account ;\n\n    }\n\n    function excludeFromSwap(address account) public onlyOwner {\n        _isExcludedFromSwap[account] = true;\n    }\n\n    function includeInSwap(address account) public onlyOwner {\n        _isExcludedFromSwap[account] = false;\n    }\n\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner {\n        _taxFee = taxFee;\n    }\n\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\n        _liquidityFee = liquidityFee;\n    }\n\n    function setBurnFeePercent(uint256 burnFee) external onlyOwner {\n        _burnFee = burnFee;\n    }\n\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    function setSwapEnabled(bool _enabled) public onlyOwner {\n        \n        inSwapEnable = _enabled;\n        \n    }\n\n    //to recieve ETH from uniswapV2Router when swaping\n    receive() external payable {}\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _reflectBurn(uint256 rBurn, uint256 tBurn) private {\n        //_rTotal = _rTotal.sub(rBurn);\n        _tBurnTotal = _tBurnTotal.add(tBurn);\n        //_tTotal = _tTotal.sub(tBurn);\n\n        _rOwned[cpDeadAddress] = _rOwned[cpDeadAddress].add(rBurn);\n        if (_isExcluded[cpDeadAddress])\n            _tOwned[cpDeadAddress] = _tOwned[cpDeadAddress].add(tBurn);\n\n        if(tBurn != 0 ) {\n            //emit Transfer(address(this), cpDeadAddress, tBurn);\n        }\n        \n\n    }\n\n    function _getValues(uint256 tAmount)\n        private\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity,\n            uint256 tBurn\n        ) = _getTValues(tAmount);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\n            tAmount,\n            tFee,\n            tLiquidity,\n            tBurn,\n            _getRate()\n        );\n        return (\n            rAmount,\n            rTransferAmount,\n            rFee,\n            tTransferAmount,\n            tFee,\n            tLiquidity,\n            tBurn\n        );\n    }\n\n    function _getTValues(uint256 tAmount)\n        private\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 tFee = calculateTaxFee(tAmount);\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n        uint256 tBurn = calculateBurnFee(tAmount);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tBurn);\n        return (tTransferAmount, tFee, tLiquidity, tBurn);\n    }\n\n    function _getRValues(\n        uint256 tAmount,\n        uint256 tFee,\n        uint256 tLiquidity,\n        uint256 tBurn,\n        uint256 currentRate\n    )\n        private\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        uint256 rBurn = tBurn.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rBurn);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (\n                _rOwned[_excluded[i]] > rSupply ||\n                _tOwned[_excluded[i]] > tSupply\n            ) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _takeLiquidity(uint256 tLiquidity) private {\n        uint256 currentRate = _getRate();\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n        if (_isExcluded[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n    }\n\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_taxFee).div(10**3);\n    }\n\n    function calculateLiquidityFee(uint256 _amount)\n        private\n        view\n        returns (uint256)\n    {\n        return _amount.mul(_liquidityFee).div(10**3);\n    }\n\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_burnFee).div(10**3);\n    }\n\n    function removeAllFee() private {\n        if (_taxFee == 0 && _liquidityFee == 0 && _burnFee == 0) return;\n\n        _previousTaxFee = _taxFee;\n        _previousLiquidityFee = _liquidityFee;\n        _previousBurnFee = _burnFee;\n\n        _taxFee = 0;\n        _liquidityFee = 0;\n        _burnFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _taxFee = _previousTaxFee;\n        _liquidityFee = _previousLiquidityFee;\n        _burnFee = _previousBurnFee;\n    }\n\n    function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function isExcludedFromSwap(address account) public view returns (bool) {\n        return _isExcludedFromSwap[account];\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), "BEP20: approve from the zero address");\n        require(spender != address(0), "BEP20: approve to the zero address");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), "BEP20: transfer from the zero address");\n        require(to != address(0), "BEP20: transfer to the zero address");\n        require(amount > 0, "Transfer amount must be greater than zero");\n        if (from != owner() && to != owner())\n            require(\n                amount <= _maxTxAmount,\n                "Transfer amount exceeds the maxTxAmount."\n            );\n\n        if (!inSwapEnable ) {\n              if(from == uniswapV2Pair && !_isExcludedFromSwap[to]){\n                  require(false, "Transfer permission wrong !");\n              }\n              \n        }\n\n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don\'t get caught in a circular liquidity event.\n        // also, don\'t swap & liquify if sender is uniswap pair.\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        if (contractTokenBalance >= _maxTxAmount) {\n            contractTokenBalance = _maxTxAmount;\n        }\n\n        bool overMinTokenBalance = contractTokenBalance >=\n            numTokensSellToAddToLiquidity;\n        if (\n            overMinTokenBalance &&\n            !inSwapAndLiquify &&\n            from != uniswapV2Pair &&\n            swapAndLiquifyEnabled\n        ) {\n            contractTokenBalance = numTokensSellToAddToLiquidity;\n            //add liquidity\n            swapAndLiquify(contractTokenBalance);\n        }\n\n        //indicates if fee should be deducted from transfer\n        bool takeFee = true;\n\n        //if any account belongs to _isExcludedFromFee account then remove the fee\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n            takeFee = false;\n        }\n\n        //transfer amount, it will take tax, burn, liquidity fee\n\n        _tokenTransfer(from, to, amount, takeFee);\n      \n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        // split the contract balance into halves\n        uint256 half = contractTokenBalance.div(2);\n        uint256 otherHalf = contractTokenBalance.sub(half);\n\n        // capture the contract\'s current ETH balance.\n        // this is so that we can capture exactly the amount of ETH that the\n        // swap creates, and not make the liquidity event include any ETH that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n\n        // how much ETH did we just swap into?\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = usdtTokenAddr;//uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(0x0000000000000000000000000000000000000000),\n            block.timestamp\n        );\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool takeFee\n    ) private {\n        if (!takeFee) removeAllFee();\n\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n\n        if (!takeFee) restoreAllFee();\n    }\n\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        uint256 currentRate = _getRate();\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity,\n            uint256 tBurn\n        ) = _getValues(tAmount);\n        uint256 rBurn = tBurn.mul(currentRate);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        _reflectBurn(rBurn, tBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferToExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        uint256 currentRate = _getRate();\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity,\n            uint256 tBurn\n        ) = _getValues(tAmount);\n        uint256 rBurn = tBurn.mul(currentRate);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        _reflectBurn(rBurn, tBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferFromExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        uint256 currentRate = _getRate();\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity,\n            uint256 tBurn\n        ) = _getValues(tAmount);\n        uint256 rBurn = tBurn.mul(currentRate);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        _reflectBurn(rBurn, tBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n}\n')))}p.isMDXComponent=!0}}]);