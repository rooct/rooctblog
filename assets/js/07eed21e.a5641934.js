"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1913],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8757:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),l=["components"],i={},s="\u4f7f\u7528tar\u5305",c={unversionedId:"rusty/algos/compression/tar",id:"rusty/algos/compression/tar",isDocsHomePage:!1,title:"\u4f7f\u7528tar\u5305",description:"\u89e3\u538b tar \u5305",source:"@site/docs/rusty/algos/compression/tar.md",sourceDirName:"rusty/algos/compression",slug:"/rusty/algos/compression/tar",permalink:"/rooctblog/docs/rusty/algos/compression/tar",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"Awesome \u7b97\u6cd5",permalink:"/rooctblog/docs/rusty/algos/awesome"},next:{title:"\u52a0\u5bc6",permalink:"/rooctblog/docs/rusty/algos/cryptography/encryption"}},p=[{value:"\u89e3\u538b tar \u5305",id:"\u89e3\u538b-tar-\u5305",children:[]},{value:"\u5c06\u76ee\u5f55\u538b\u7f29\u6210 tar \u5305",id:"\u5c06\u76ee\u5f55\u538b\u7f29\u6210-tar-\u5305",children:[]},{value:"\u89e3\u538b\u7684\u540c\u65f6\u5220\u9664\u6307\u5b9a\u7684\u6587\u4ef6\u524d\u7f00",id:"\u89e3\u538b\u7684\u540c\u65f6\u5220\u9664\u6307\u5b9a\u7684\u6587\u4ef6\u524d\u7f00",children:[]}],u={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u4f7f\u7528tar\u5305"},"\u4f7f\u7528tar\u5305"),(0,o.kt)("h2",{id:"\u89e3\u538b-tar-\u5305"},"\u89e3\u538b tar \u5305"),(0,o.kt)("p",null,"\u4ee5\u4e0b\u4ee3\u7801\u5c06\u89e3\u538b\u7f29( ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/flate2/*/flate2/read/struct.GzDecoder.html"},"GzDecoder")," )\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"archive.tar.gz")," \uff0c\u5e76\u5c06\u6240\u6709\u6587\u4ef6\u62bd\u53d6\u51fa( ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/tar/*/tar/struct.Archive.html#method.unpack"},"Archive::unpack")," )\u6765\u540e\u5f53\u5165\u5230\u5f53\u524d\u76ee\u5f55\u4e2d\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use std::fs::File;\nuse flate2::read::GzDecoder;\nuse tar::Archive;\n\nfn main -> Result<, std::io::Error> {\n    let path = "archive.tar.gz";\n\n    let tar_gz = File::open(path)?;\n    let tar = GzDecoder::new(tar_gz);\n    let mut archive = Archive::new(tar);\n    archive.unpack(".")?;\n\n    Ok()\n}\n')),(0,o.kt)("h2",{id:"\u5c06\u76ee\u5f55\u538b\u7f29\u6210-tar-\u5305"},"\u5c06\u76ee\u5f55\u538b\u7f29\u6210 tar \u5305"),(0,o.kt)("p",null,"\u4ee5\u4e0b\u4ee3\u7801\u5c06 ",(0,o.kt)("inlineCode",{parentName:"p"},"/var/log")," \u76ee\u5f55\u538b\u7f29\u6210 ",(0,o.kt)("inlineCode",{parentName:"p"},"archive.tar.gz"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u521b\u5efa\u4e00\u4e2a ",(0,o.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/fs/struct.File.html"},"File")," \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 ",(0,o.kt)("a",{parentName:"li",href:"https://docs.rs/flate2/*/flate2/write/struct.GzEncoder.html"},"GzEncoder")," \u548c ",(0,o.kt)("a",{parentName:"li",href:"https://docs.rs/tar/*/tar/struct.Builder.html"},"tar::Builder")," \u5bf9\u5176\u8fdb\u884c\u5305\u88f9"),(0,o.kt)("li",{parentName:"ul"},"\u901a\u8fc7 ",(0,o.kt)("a",{parentName:"li",href:"https://docs.rs/tar/*/tar/struct.Builder.html#method.append_dir_all"},"Builder::append_dir_all")," \u5c06 ",(0,o.kt)("inlineCode",{parentName:"li"},"/var/log")," \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u5185\u5bb9\u6dfb\u52a0\u5230\u538b\u7f29\u6587\u4ef6\u4e2d\uff0c\u8be5\u6587\u4ef6\u5728 ",(0,o.kt)("inlineCode",{parentName:"li"},"backup/logs")," \u76ee\u5f55\u4e0b\u3002"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.rs/flate2/*/flate2/write/struct.GzEncoder.html"},"GzEncoder")," \u8d1f\u8d23\u5728\u5199\u5165\u538b\u7f29\u6587\u4ef6 ",(0,o.kt)("inlineCode",{parentName:"li"},"archive.tar.gz")," \u4e4b\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u538b\u7f29\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use std::fs::File;\nuse flate2::Compression;\nuse flate2::write::GzEncoder;\n\nfn main -> Result<, std::io::Error> {\n    let tar_gz = File::create("archive.tar.gz")?;\n    let enc = GzEncoder::new(tar_gz, Compression::default);\n    let mut tar = tar::Builder::new(enc);\n    tar.append_dir_all("backup/logs", "/var/log")?;\n    Ok()\n}\n')),(0,o.kt)("h2",{id:"\u89e3\u538b\u7684\u540c\u65f6\u5220\u9664\u6307\u5b9a\u7684\u6587\u4ef6\u524d\u7f00"},"\u89e3\u538b\u7684\u540c\u65f6\u5220\u9664\u6307\u5b9a\u7684\u6587\u4ef6\u524d\u7f00"),(0,o.kt)("p",null,"\u904d\u5386\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6 ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/tar/*/tar/struct.Archive.html#method.entries"},"Archive::entries"),"\uff0c\u82e5\u89e3\u538b\u524d\u7684\u6587\u4ef6\u540d\u5305\u542b ",(0,o.kt)("inlineCode",{parentName:"p"},"bundle/logs")," \u524d\u7f00\uff0c\u9700\u8981\u5c06\u524d\u7f00\u4ece\u6587\u4ef6\u540d\u79fb\u9664( ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/path/struct.Path.html#method.strip_prefix"},"Path::strip_prefix")," )\u540e\uff0c\u518d\u89e3\u538b\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use std::fs::File;\nuse std::path::PathBuf;\nuse flate2::read::GzDecoder;\nuse tar::Archive;\n\nfn main -> Result<> {\n    let file = File::open("archive.tar.gz")?;\n    let mut archive = Archive::new(GzDecoder::new(file));\n    let prefix = "bundle/logs";\n\n    println!("Extracted the following files:");\n    archive\n        .entries? // \u83b7\u53d6\u538b\u7f29\u6863\u6848\u4e2d\u7684\u6587\u4ef6\u6761\u76ee\u5217\u8868\n        .filter_map(|e| e.ok)\n        // \u5bf9\u6bcf\u4e2a\u6587\u4ef6\u6761\u76ee\u8fdb\u884c map \u5904\u7406\n        .map(|mut entry| -> Result<PathBuf> {\n            // \u5c06\u6587\u4ef6\u8def\u5f84\u540d\u4e2d\u7684\u524d\u7f00\u79fb\u9664\uff0c\u83b7\u53d6\u4e00\u4e2a\u65b0\u7684\u8def\u5f84\u540d\n            let path = entry.path?.strip_prefix(prefix)?.to_owned;\n            // \u5c06\u5185\u5bb9\u89e3\u538b\u5230\u65b0\u7684\u8def\u5f84\u540d\u4e2d\n            entry.unpack(&path)?;\n            Ok(path)\n        })\n        .filter_map(|e| e.ok)\n        .for_each(|x| println!("> {}", x.display));\n\n    Ok()\n}\n')))}d.isMDXComponent=!0}}]);