"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8093],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return y}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(r),y=a,f=m["".concat(c,".").concat(y)]||m[y]||p[y]||i;return r?t.createElement(f,o(o({ref:n},s),{},{components:r})):t.createElement(f,o({ref:n},s))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3994:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return s}});var t=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],l={title:"Array",version:"0.8.10",description:"Learn about arrays in Solidity"},c=void 0,u={unversionedId:"Example/Array",id:"Example/Array",isDocsHomePage:!1,title:"Array",description:"Learn about arrays in Solidity",source:"@site/docs/Example/Array.md",sourceDirName:"Example",slug:"/Example/Array",permalink:"/rooctblog/docs/Example/Array",tags:[],version:"current",frontMatter:{title:"Array",version:"0.8.10",description:"Learn about arrays in Solidity"},sidebar:"tutorialSidebar",previous:{title:"ABI Decode",permalink:"/rooctblog/docs/Example/AbiDecode"},next:{title:"Block Timestamp Manipulation",permalink:"/rooctblog/docs/Example/BlockTimesatmp"}},s=[{value:"Examples of removing array element",id:"examples-of-removing-array-element",children:[]}],p={toc:s};function m(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Array can have a compile-time fixed size or a dynamic size."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract Array {\n    // Several ways to initialize an array\n    uint[] public arr;\n    uint[] public arr2 = [1, 2, 3];\n    // Fixed sized array, all elements initialize to 0\n    uint[10] public myFixedSizeArr;\n\n    function get(uint i) public view returns (uint) {\n        return arr[i];\n    }\n\n    // Solidity can return the entire array.\n    // But this function should be avoided for\n    // arrays that can grow indefinitely in length.\n    function getArr() public view returns (uint[] memory) {\n        return arr;\n    }\n\n    function push(uint i) public {\n        // Append to array\n        // This will increase the array length by 1.\n        arr.push(i);\n    }\n\n    function pop() public {\n        // Remove last element from array\n        // This will decrease the array length by 1\n        arr.pop();\n    }\n\n    function getLength() public view returns (uint) {\n        return arr.length;\n    }\n\n    function remove(uint index) public {\n        // Delete does not change the array length.\n        // It resets the value at index to it's default value,\n        // in this case 0\n        delete arr[index];\n    }\n\n    function examples() external {\n        // create array in memory, only fixed size can be created\n        uint[] memory a = new uint[](5);\n    }\n}\n\n")),(0,i.kt)("h3",{id:"examples-of-removing-array-element"},"Examples of removing array element"),(0,i.kt)("p",null,"Remove array element by shifting elements from right to left"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract ArrayRemoveByShifting {\n    // [1, 2, 3] -- remove(1) --\x3e [1, 3, 3] --\x3e [1, 3]\n    // [1, 2, 3, 4, 5, 6] -- remove(2) --\x3e [1, 2, 4, 5, 6, 6] --\x3e [1, 2, 4, 5, 6]\n    // [1, 2, 3, 4, 5, 6] -- remove(0) --\x3e [2, 3, 4, 5, 6, 6] --\x3e [2, 3, 4, 5, 6]\n    // [1] -- remove(0) --\x3e [1] --\x3e []\n\n    uint[] public arr;\n\n    function remove(uint _index) public {\n        require(_index < arr.length, "index out of bound");\n\n        for (uint i = _index; i < arr.length - 1; i++) {\n            arr[i] = arr[i + 1];\n        }\n        arr.pop();\n    }\n\n    function test() external {\n        arr = [1, 2, 3, 4, 5];\n        remove(2);\n        // [1, 2, 4, 5]\n        assert(arr[0] == 1);\n        assert(arr[1] == 2);\n        assert(arr[2] == 4);\n        assert(arr[3] == 5);\n        assert(arr.length == 4);\n\n        arr = [1];\n        remove(0);\n        // []\n        assert(arr.length == 0);\n    }\n}\n\n')),(0,i.kt)("p",null,"Remove array element by copying last element into to the place to remove"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract ArrayReplaceFromEnd {\n    uint[] public arr;\n\n    // Deleting an element creates a gap in the array.\n    // One trick to keep the array compact is to\n    // move the last element into the place to delete.\n    function remove(uint index) public {\n        // Move the last element into the place to delete\n        arr[index] = arr[arr.length - 1];\n        // Remove the last element\n        arr.pop();\n    }\n\n    function test() public {\n        arr = [1, 2, 3, 4];\n\n        remove(1);\n        // [1, 4, 3]\n        assert(arr.length == 3);\n        assert(arr[0] == 1);\n        assert(arr[1] == 4);\n        assert(arr[2] == 3);\n\n        remove(2);\n        // [1, 4]\n        assert(arr.length == 2);\n        assert(arr[0] == 1);\n        assert(arr[1] == 4);\n    }\n}\n\n")))}m.isMDXComponent=!0}}]);