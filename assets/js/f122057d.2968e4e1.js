"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[658],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return m}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=t.createContext({}),u=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(d.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,f=p["".concat(d,".").concat(m)]||p[m]||l[m]||i;return r?t.createElement(f,o(o({ref:n},c),{},{components:r})):t.createElement(f,o({ref:n},c))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5129:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return d},default:function(){return p},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var t=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={title:"Staking Rewards",version:"0.8.10",description:"Staking rewards contract based on Synthetix StakingRewards.sol"},d=void 0,u={unversionedId:"solidity/example/defi/StakingRewards",id:"solidity/example/defi/StakingRewards",isDocsHomePage:!1,title:"Staking Rewards",description:"Staking rewards contract based on Synthetix StakingRewards.sol",source:"@site/docs/solidity/example/defi/StakingRewards.md",sourceDirName:"solidity/example/defi",slug:"/solidity/example/defi/StakingRewards",permalink:"/rooctblog/docs/solidity/example/defi/StakingRewards",tags:[],version:"current",frontMatter:{title:"Staking Rewards",version:"0.8.10",description:"Staking rewards contract based on Synthetix StakingRewards.sol"},sidebar:"docs",previous:{title:"Uniswap V2 Optimal One Sided Supply",permalink:"/rooctblog/docs/solidity/example/defi/Optimal"},next:{title:"Uniswap V2 Swap",permalink:"/rooctblog/docs/solidity/example/defi/Swap"}},c=[{value:"Staking Rewards",id:"staking-rewards",children:[]}],l={toc:c};function p(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a minimal example of a contract that rewards users for staking their token."),(0,i.kt)("p",null,"Code is a stripped down version of Synthetix ",(0,i.kt)("a",{href:"https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol",target:"__blank"},"StakingRewards.sol")),(0,i.kt)("h3",{id:"staking-rewards"},"Staking Rewards"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\ncontract StakingRewards {\n    IERC20 public rewardsToken;\n    IERC20 public stakingToken;\n\n    uint public rewardRate = 100;\n    uint public lastUpdateTime;\n    uint public rewardPerTokenStored;\n\n    mapping(address => uint) public userRewardPerTokenPaid;\n    mapping(address => uint) public rewards;\n\n    uint private _totalSupply;\n    mapping(address => uint) private _balances;\n\n    constructor(address _stakingToken, address _rewardsToken) {\n        stakingToken = IERC20(_stakingToken);\n        rewardsToken = IERC20(_rewardsToken);\n    }\n\n    function rewardPerToken() public view returns (uint) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored +\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\n    }\n\n    function earned(address account) public view returns (uint) {\n        return\n            ((_balances[account] *\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\n            rewards[account];\n    }\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = block.timestamp;\n\n        rewards[account] = earned(account);\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        _;\n    }\n\n    function stake(uint _amount) external updateReward(msg.sender) {\n        _totalSupply += _amount;\n        _balances[msg.sender] += _amount;\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function withdraw(uint _amount) external updateReward(msg.sender) {\n        _totalSupply -= _amount;\n        _balances[msg.sender] -= _amount;\n        stakingToken.transfer(msg.sender, _amount);\n    }\n\n    function getReward() external updateReward(msg.sender) {\n        uint reward = rewards[msg.sender];\n        rewards[msg.sender] = 0;\n        rewardsToken.transfer(msg.sender, reward);\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address account) external view returns (uint);\n\n    function transfer(address recipient, uint amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n")))}p.isMDXComponent=!0}}]);