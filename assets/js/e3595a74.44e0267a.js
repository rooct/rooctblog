"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5547],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(t),f=a,c=m["".concat(s,".").concat(f)]||m[f]||u[f]||i;return t?r.createElement(c,l(l({ref:n},d),{},{components:t})):r.createElement(c,l({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},209:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],o={},s="\u76ee\u5f55\u8bbf\u95ee",p={unversionedId:"rusty/files/dir",id:"rusty/files/dir",isDocsHomePage:!1,title:"\u76ee\u5f55\u8bbf\u95ee",description:"\u83b7\u53d624\u5c0f\u65f6\u5185\u88ab\u4fee\u6539\u8fc7\u7684\u6587\u4ef6",source:"@site/docs/rusty/files/dir.md",sourceDirName:"rusty/files",slug:"/rusty/files/dir",permalink:"/rooctblog/docs/rusty/files/dir",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u7ed3\u6784\u5316\u6570\u636e",permalink:"/rooctblog/docs/rusty/encoding/structured"},next:{title:"\u6587\u4ef6\u8bfb\u5199",permalink:"/rooctblog/docs/rusty/files/read-write"}},d=[{value:"\u83b7\u53d624\u5c0f\u65f6\u5185\u88ab\u4fee\u6539\u8fc7\u7684\u6587\u4ef6",id:"\u83b7\u53d624\u5c0f\u65f6\u5185\u88ab\u4fee\u6539\u8fc7\u7684\u6587\u4ef6",children:[]},{value:"\u83b7\u53d6\u7ed9\u5b9a\u8def\u5f84\u7684 loops",id:"\u83b7\u53d6\u7ed9\u5b9a\u8def\u5f84\u7684-loops",children:[]},{value:"\u9012\u5f52\u67e5\u627e\u91cd\u590d\u7684\u6587\u4ef6\u540d",id:"\u9012\u5f52\u67e5\u627e\u91cd\u590d\u7684\u6587\u4ef6\u540d",children:[]},{value:"\u9012\u5f52\u67e5\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6",id:"\u9012\u5f52\u67e5\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6",children:[]},{value:"\u904d\u5386\u76ee\u5f55\u8df3\u8fc7\u9690\u85cf\u6587\u4ef6",id:"\u904d\u5386\u76ee\u5f55\u8df3\u8fc7\u9690\u85cf\u6587\u4ef6",children:[]},{value:"\u9012\u5f52\u8ba1\u7b97\u7ed9\u5b9a\u6df1\u5ea6\u7684\u6587\u4ef6\u5927\u5c0f",id:"\u9012\u5f52\u8ba1\u7b97\u7ed9\u5b9a\u6df1\u5ea6\u7684\u6587\u4ef6\u5927\u5c0f",children:[]},{value:"\u9012\u5f52\u67e5\u627e\u6240\u6709 png \u6587\u4ef6",id:"\u9012\u5f52\u67e5\u627e\u6240\u6709-png-\u6587\u4ef6",children:[]},{value:"\u67e5\u627e\u6ee1\u8db3\u7ed9\u5b9a\u6b63\u5219\u7684\u6240\u6709\u6587\u4ef6\u4e14\u5ffd\u7565\u6587\u4ef6\u540d\u5927\u5c0f\u5199",id:"\u67e5\u627e\u6ee1\u8db3\u7ed9\u5b9a\u6b63\u5219\u7684\u6240\u6709\u6587\u4ef6\u4e14\u5ffd\u7565\u6587\u4ef6\u540d\u5927\u5c0f\u5199",children:[]}],u={toc:d};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u76ee\u5f55\u8bbf\u95ee"},"\u76ee\u5f55\u8bbf\u95ee"),(0,i.kt)("h3",{id:"\u83b7\u53d624\u5c0f\u65f6\u5185\u88ab\u4fee\u6539\u8fc7\u7684\u6587\u4ef6"},"\u83b7\u53d624\u5c0f\u65f6\u5185\u88ab\u4fee\u6539\u8fc7\u7684\u6587\u4ef6"),(0,i.kt)("p",null,"\u901a\u8fc7\u904d\u5386\u8bfb\u53d6\u76ee\u5f55\u4e2d\u6587\u4ef6\u7684 ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified"},"Metadata::modified")," \u5c5e\u6027\uff0c\u6765\u83b7\u53d6\u76ee\u6807\u6587\u4ef6\u540d\u5217\u8868\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use error_chain::error_chain;\n\nuse std::{env, fs};\n\nerror_chain! {\n    foreign_links {\n        Io(std::io::Error);\n        SystemTimeError(std::time::SystemTimeError);\n    }\n}\n\nfn main -> Result<> {\n    let current_dir = env::current_dir?;\n    println!(\n        "Entries modified in the last 24 hours in {:?}:",\n        current_dir\n    );\n\n    for entry in fs::read_dir(current_dir)? {\n        let entry = entry?;\n        let path = entry.path;\n\n        let metadata = fs::metadata(&path)?;\n        let last_modified = metadata.modified?.elapsed?.as_secs;\n\n        if last_modified < 24 * 3600 && metadata.is_file {\n            println!(\n                "Last modified: {:?} seconds, is read only: {:?}, size: {:?} bytes, filename: {:?}",\n                last_modified,\n                metadata.permissions.readonly,\n                metadata.len,\n                path.file_name.ok_or("No filename")?\n            );\n        }\n    }\n\n    Ok()\n}\n')),(0,i.kt)("h3",{id:"\u83b7\u53d6\u7ed9\u5b9a\u8def\u5f84\u7684-loops"},"\u83b7\u53d6\u7ed9\u5b9a\u8def\u5f84\u7684 loops"),(0,i.kt)("p",null,"\u4f7f\u7528 ","[same_file::is_same_file]"," \u53ef\u4ee5\u68c0\u67e5\u7ed9\u5b9a\u8def\u5f84\u7684 loops\uff0cloop \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p /tmp/foo/bar/baz\nln -s /tmp/foo/  /tmp/foo/bar/baz/qux\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use std::io;\nuse std::path::{Path, PathBuf};\nuse same_file::is_same_file;\n\nfn contains_loop<P: AsRef<Path>>(path: P) -> io::Result<Option<(PathBuf, PathBuf)>> {\n    let path = path.as_ref;\n    let mut path_buf = path.to_path_buf;\n    while path_buf.pop {\n        if is_same_file(&path_buf, path)? {\n            return Ok(Some((path_buf, path.to_path_buf)));\n        } else if let Some(looped_paths) = contains_loop(&path_buf)? {\n            return Ok(Some(looped_paths));\n        }\n    }\n    return Ok(None);\n}\n\nfn main {\n    assert_eq!(\n        contains_loop("/tmp/foo/bar/baz/qux/bar/baz").unwrap,\n        Some((\n            PathBuf::from("/tmp/foo"),\n            PathBuf::from("/tmp/foo/bar/baz/qux")\n        ))\n    );\n}\n')),(0,i.kt)("h3",{id:"\u9012\u5f52\u67e5\u627e\u91cd\u590d\u7684\u6587\u4ef6\u540d"},"\u9012\u5f52\u67e5\u627e\u91cd\u590d\u7684\u6587\u4ef6\u540d"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/walkdir/latest/walkdir/"},"walkdir")," \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u904d\u5386\u6307\u5b9a\u7684\u76ee\u5f55\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use std::collections::HashMap;\nuse walkdir::WalkDir;\n\nfn main {\n    let mut filenames = HashMap::new;\n\n    // \u904d\u5386\u5f53\u524d\u76ee\u5f55\n    for entry in WalkDir::new(".")\n            .into_iter\n            .filter_map(Result::ok)\n            .filter(|e| !e.file_type.is_dir) {\n        let f_name = String::from(entry.file_name.to_string_lossy);\n        let counter = filenames.entry(f_name.clone).or_insert(0);\n        *counter += 1;\n\n        if *counter == 2 {\n            println!("{}", f_name);\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"\u9012\u5f52\u67e5\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6"},"\u9012\u5f52\u67e5\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u6587\u4ef6"),(0,i.kt)("p",null,"\u4e0b\u9762\u7684\u4ee3\u7801\u901a\u8fc7 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/walkdir/latest/walkdir/"},"walkdir")," \u6765\u67e5\u627e\u5f53\u524d\u76ee\u5f55\u4e2d\u6700\u8fd1\u4e00\u5929\u5185\u53d1\u751f\u8fc7\u4fee\u6539\u7684\u6240\u6709\u6587\u4ef6\u3002"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/walkdir/*/walkdir/struct.WalkDir.html#method.follow_links"},"follow_links")," \u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," \u65f6\uff0c\u90a3\u8f6f\u94fe\u63a5\u4f1a\u88ab\u5f53\u6210\u6b63\u5e38\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u4e00\u6837\u5bf9\u5f85\uff0c\u4e5f\u5c31\u662f\u8bf4\u8f6f\u94fe\u63a5\u6307\u5411\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u4e5f\u4f1a\u88ab\u8bbf\u95ee\u548c\u68c0\u67e5\u3002\u82e5\u8f6f\u94fe\u63a5\u6307\u5411\u7684\u76ee\u6807\u4e0d\u5b58\u5728\u6216\u5b83\u662f\u4e00\u4e2a loops\uff0c\u5c31\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u53d1\u751f\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'#use error_chain::error_chain;\n\nuse walkdir::WalkDir;\n\n#error_chain! {\n#    foreign_links {\n#        WalkDir(walkdir::Error);\n#        Io(std::io::Error);\n#        SystemTime(std::time::SystemTimeError);\n#    }\n#}\n\nfn main -> Result<> {\n    for entry in WalkDir::new(".")\n            .follow_links(true)\n            .into_iter\n            .filter_map(|e| e.ok) {\n        let f_name = entry.file_name.to_string_lossy;\n        let sec = entry.metadata?.modified?;\n\n        if f_name.ends_with(".json") && sec.elapsed?.as_secs < 86400 {\n            println!("{}", f_name);\n        }\n    }\n\n    Ok()\n}\n')),(0,i.kt)("h3",{id:"\u904d\u5386\u76ee\u5f55\u8df3\u8fc7\u9690\u85cf\u6587\u4ef6"},"\u904d\u5386\u76ee\u5f55\u8df3\u8fc7\u9690\u85cf\u6587\u4ef6"),(0,i.kt)("p",null,"\u4e0b\u9762\u4f8b\u5b50\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/walkdir/latest/walkdir/"},"walkdir")," \u6765\u904d\u5386\u4e00\u4e2a\u76ee\u5f55\uff0c\u540c\u65f6\u8df3\u8fc7\u9690\u85cf\u6587\u4ef6 ",(0,i.kt)("inlineCode",{parentName:"p"},"is_not_hidden"),"\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use walkdir::{DirEntry, WalkDir};\n\nfn is_not_hidden(entry: &DirEntry) -> bool {\n    entry\n         .file_name\n         .to_str\n         .map(|s| entry.depth == 0 || !s.starts_with("."))\n         .unwrap_or(false)\n}\n\nfn main {\n    WalkDir::new(".")\n        .into_iter\n        .filter_entry(|e| is_not_hidden(e))\n        .filter_map(|v| v.ok)\n        .for_each(|x| println!("{}", x.path.display));\n}\n')),(0,i.kt)("h3",{id:"\u9012\u5f52\u8ba1\u7b97\u7ed9\u5b9a\u6df1\u5ea6\u7684\u6587\u4ef6\u5927\u5c0f"},"\u9012\u5f52\u8ba1\u7b97\u7ed9\u5b9a\u6df1\u5ea6\u7684\u6587\u4ef6\u5927\u5c0f"),(0,i.kt)("p",null,"\u9012\u5f52\u8bbf\u95ee\u7684\u6df1\u5ea6\u53ef\u4ee5\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/walkdir/*/walkdir/struct.WalkDir.html#method.min_depth"},"WalkDir::min_depth")," \u548c ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/walkdir/2.3.2/walkdir/struct.WalkDir.html#method.max_depth"},"WalkDir::max_depth")," \u6765\u63a7\u5236\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use walkdir::WalkDir;\n\nfn main {\n    let total_size = WalkDir::new(".")\n        .min_depth(1)\n        .max_depth(3)\n        .into_iter\n        .filter_map(|entry| entry.ok)\n        .filter_map(|entry| entry.metadata.ok)\n        .filter(|metadata| metadata.is_file)\n        .fold(0, |acc, m| acc + m.len);\n\n    println!("Total size: {} bytes.", total_size);\n}\n')),(0,i.kt)("h3",{id:"\u9012\u5f52\u67e5\u627e\u6240\u6709-png-\u6587\u4ef6"},"\u9012\u5f52\u67e5\u627e\u6240\u6709 png \u6587\u4ef6"),(0,i.kt)("p",null,"\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e86 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/glob/"},"glob")," \u5305\uff0c\u5176\u4e2d\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"**")," \u4ee3\u8868\u5f53\u524d\u76ee\u5f55\u53ca\u5176\u6240\u6709\u5b50\u76ee\u5f55\uff0c\u4f8b\u5982\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"/media/**/*.png")," \u4ee3\u8868\u5728 ",(0,i.kt)("inlineCode",{parentName:"p"},"media")," \u548c\u5b83\u7684\u6240\u6709\u5b50\u76ee\u5f55\u4e0b\u67e5\u627e png \u6587\u4ef6."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'#use error_chain::error_chain;\n\nuse glob::glob;\n\n#error_chain! {\n#    foreign_links {\n#        Glob(glob::GlobError);\n#        Pattern(glob::PatternError);\n#    }\n#}\n\nfn main -> Result<> {\n    for entry in glob("**/*.png")? {\n        println!("{}", entry?.display);\n    }\n\n    Ok()\n}\n')),(0,i.kt)("h3",{id:"\u67e5\u627e\u6ee1\u8db3\u7ed9\u5b9a\u6b63\u5219\u7684\u6240\u6709\u6587\u4ef6\u4e14\u5ffd\u7565\u6587\u4ef6\u540d\u5927\u5c0f\u5199"},"\u67e5\u627e\u6ee1\u8db3\u7ed9\u5b9a\u6b63\u5219\u7684\u6240\u6709\u6587\u4ef6\u4e14\u5ffd\u7565\u6587\u4ef6\u540d\u5927\u5c0f\u5199"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/glob/*/glob/fn.glob_with.html"},"glob_with")," \u51fd\u6570\u53ef\u4ee5\u6309\u7167\u7ed9\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u67e5\u627e\uff0c\u540c\u65f6\u8fd8\u80fd\u4f7f\u7528\u9009\u9879\u6765\u63a7\u5236\u4e00\u4e9b\u5339\u914d\u8bbe\u7f6e\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use error_chain::error_chain;\nuse glob::{glob_with, MatchOptions};\n\nerror_chain! {\n    foreign_links {\n        Glob(glob::GlobError);\n        Pattern(glob::PatternError);\n    }\n}\n\nfn main -> Result<> {\n    let options = MatchOptions {\n        case_sensitive: false,\n        ..Default::default\n    };\n\n    for entry in glob_with("/media/img_[0-9]*.png", options)? {\n        println!("{}", entry?.display);\n    }\n\n    Ok()\n}\n')))}m.isMDXComponent=!0}}]);