"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4371],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var u=r.createContext({}),d=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},l=function(n){var e=d(n.components);return r.createElement(u.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,u=n.parentName,l=i(n,["components","mdxType","originalType","parentName"]),p=d(t),m=a,f=p["".concat(u,".").concat(m)]||p[m]||c[m]||o;return t?r.createElement(f,s(s({ref:e},l),{},{components:t})):r.createElement(f,s({ref:e},l))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,s=new Array(o);s[0]=p;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=n,i.mdxType="string"==typeof n?n:a,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9298:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return l}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),s=["components"],i={title:"Constant Sum AMM",version:"0.8.10",description:"Constant sum AMM"},u=void 0,d={unversionedId:"Example/defi/CSamm",id:"Example/defi/CSamm",isDocsHomePage:!1,title:"Constant Sum AMM",description:"Constant sum AMM",source:"@site/docs/Example/defi/CSamm.md",sourceDirName:"Example/defi",slug:"/Example/defi/CSamm",permalink:"/rooctblog/docs/Example/defi/CSamm",tags:[],version:"current",frontMatter:{title:"Constant Sum AMM",version:"0.8.10",description:"Constant sum AMM"},sidebar:"tutorialSidebar",previous:{title:"Constant Product AMM",permalink:"/rooctblog/docs/Example/defi/CPAMM"},next:{title:"Chainlink Price Oracle",permalink:"/rooctblog/docs/Example/defi/Chainlink"}},l=[],c={toc:l};function p(n){var e=n.components,t=(0,a.Z)(n,s);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Constant sum AMM ",(0,o.kt)("inlineCode",{parentName:"p"},"X + Y = K")),(0,o.kt)("p",null,"Tokens trade one to one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract CSAMM {\n    IERC20 public immutable token0;\n    IERC20 public immutable token1;\n\n    uint public reserve0;\n    uint public reserve1;\n\n    uint public totalSupply;\n    mapping(address => uint) public balanceOf;\n\n    constructor(address _token0, address _token1) {\n        // NOTE: This contract assumes that token0 and token1\n        // both have same decimals\n        token0 = IERC20(_token0);\n        token1 = IERC20(_token1);\n    }\n\n    function _mint(address _to, uint _amount) private {\n        balanceOf[_to] += _amount;\n        totalSupply += _amount;\n    }\n\n    function _burn(address _from, uint _amount) private {\n        balanceOf[_from] -= _amount;\n        totalSupply -= _amount;\n    }\n\n    function _update(uint _res0, uint _res1) private {\n        reserve0 = _res0;\n        reserve1 = _res1;\n    }\n\n    function swap(address _tokenIn, uint _amountIn) external returns (uint amountOut) {\n        require(\n            _tokenIn == address(token0) || _tokenIn == address(token1),\n            "invalid token"\n        );\n\n        bool isToken0 = _tokenIn == address(token0);\n\n        (IERC20 tokenIn, IERC20 tokenOut, uint resIn, uint resOut) = isToken0\n            ? (token0, token1, reserve0, reserve1)\n            : (token1, token0, reserve1, reserve0);\n\n        tokenIn.transferFrom(msg.sender, address(this), _amountIn);\n        uint amountIn = tokenIn.balanceOf(address(this)) - resIn;\n\n        // 0.3% fee\n        amountOut = (amountIn * 997) / 1000;\n\n        (uint res0, uint res1) = isToken0\n            ? (resIn + amountIn, resOut - amountOut)\n            : (resOut - amountOut, resIn + amountIn);\n\n        _update(res0, res1);\n        tokenOut.transfer(msg.sender, amountOut);\n    }\n\n    function addLiquidity(uint _amount0, uint _amount1) external returns (uint shares) {\n        token0.transferFrom(msg.sender, address(this), _amount0);\n        token1.transferFrom(msg.sender, address(this), _amount1);\n\n        uint bal0 = token0.balanceOf(address(this));\n        uint bal1 = token1.balanceOf(address(this));\n\n        uint d0 = bal0 - reserve0;\n        uint d1 = bal1 - reserve1;\n\n        /*\n        a = amount in\n        L = total liquidity\n        s = shares to mint\n        T = total supply\n\n        s should be proportional to increase from L to L + a\n        (L + a) / L = (T + s) / T\n\n        s = a * T / L\n        */\n        if (totalSupply > 0) {\n            shares = ((d0 + d1) * totalSupply) / (reserve0 + reserve1);\n        } else {\n            shares = d0 + d1;\n        }\n\n        require(shares > 0, "shares = 0");\n        _mint(msg.sender, shares);\n\n        _update(bal0, bal1);\n    }\n\n    function removeLiquidity(uint _shares) external returns (uint d0, uint d1) {\n        /*\n        a = amount out\n        L = total liquidity\n        s = shares\n        T = total supply\n\n        a / L = s / T\n\n        a = L * s / T\n          = (reserve0 + reserve1) * s / T\n        */\n        d0 = (reserve0 * _shares) / totalSupply;\n        d1 = (reserve1 * _shares) / totalSupply;\n\n        _burn(msg.sender, _shares);\n        _update(reserve0 - d0, reserve1 - d1);\n\n        if (d0 > 0) {\n            token0.transfer(msg.sender, d0);\n        }\n        if (d1 > 0) {\n            token1.transfer(msg.sender, d1);\n        }\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address account) external view returns (uint);\n\n    function transfer(address recipient, uint amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint amount);\n    event Approval(address indexed owner, address indexed spender, uint amount);\n}\n\n')))}p.isMDXComponent=!0}}]);