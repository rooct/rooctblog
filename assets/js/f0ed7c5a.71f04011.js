"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3505],{3905:function(e,r,n){n.d(r,{Zo:function(){return l},kt:function(){return m}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=t.createContext({}),s=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},l=function(e){var r=s(e.components);return t.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return n?t.createElement(f,a(a({ref:r},l),{},{components:n})):t.createElement(f,a({ref:r},l))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var u in r)hasOwnProperty.call(r,u)&&(c[u]=r[u]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1265:function(e,r,n){n.r(r),n.d(r,{contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l}});var t=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],c={},u="\u5b57\u7b26\u4e32\u89e3\u6790",s={unversionedId:"rusty/text/string",id:"rusty/text/string",isDocsHomePage:!1,title:"\u5b57\u7b26\u4e32\u89e3\u6790",description:"\u8bbf\u95ee Unicode \u5b57\u7b26",source:"@site/docs/rusty/text/string.md",sourceDirName:"rusty/text",slug:"/rusty/text/string",permalink:"/rooctblog/docs/rusty/text/string",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u6b63\u5219\u8868\u8fbe\u5f0f",permalink:"/rooctblog/docs/rusty/text/regex"},next:{title:"\u63d0\u53d6\u7f51\u7edc\u94fe\u63a5( \u722c\u866b )",permalink:"/rooctblog/docs/rusty/web/scraping"}},l=[{value:"\u8bbf\u95ee Unicode \u5b57\u7b26",id:"\u8bbf\u95ee-unicode-\u5b57\u7b26",children:[]},{value:"\u4e3a\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u5b9e\u73b0 FromStr \u7279\u5f81",id:"\u4e3a\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u5b9e\u73b0-fromstr-\u7279\u5f81",children:[]},{value:"\u5b9e\u73b0 Display \u7279\u5f81",id:"\u5b9e\u73b0-display-\u7279\u5f81",children:[]}],p={toc:l};function d(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u5b57\u7b26\u4e32\u89e3\u6790"},"\u5b57\u7b26\u4e32\u89e3\u6790"),(0,i.kt)("h3",{id:"\u8bbf\u95ee-unicode-\u5b57\u7b26"},"\u8bbf\u95ee Unicode \u5b57\u7b26"),(0,i.kt)("p",null,"[unicode-segmentation]"," \u5305\u7684 ","[UnicodeSegmentation::graphemes]"," \u51fd\u6570\u53ef\u4ee5\u5c06 UTF-8 \u5b57\u7b26\u4e32\u6536\u96c6\u6210\u4e00\u4e2a Unicode \u5b57\u7b26\u7ec4\u6210\u7684\u6570\u7ec4\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u5bf9\u5e94\u7684\u5b57\u7b26\u4e86\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use unicode_segmentation::UnicodeSegmentation;\n\nfn main {\n    let name = "Jos\xe9 Guimar\xe3es\\r\\n";\n    let graphemes = UnicodeSegmentation::graphemes(name, true)\n        .collect::<Vec<&str>>;\n    assert_eq!(graphemes[3], "\xe9");\n}\n')),(0,i.kt)("h3",{id:"\u4e3a\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u5b9e\u73b0-fromstr-\u7279\u5f81"},"\u4e3a\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u5b9e\u73b0 FromStr \u7279\u5f81"),(0,i.kt)("p",null,"\u4e3a\u6211\u4eec\u7684 RGB \u7ed3\u6784\u4f53\u5b9e\u73b0 ",(0,i.kt)("inlineCode",{parentName:"p"},"FromStr")," \u7279\u5f81\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u7684\u989c\u8272\u8868\u793a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 RGB \u7ed3\u6784\u4f53\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use std::str::FromStr;\n\n#[derive(Debug, PartialEq)]\nstruct RGB {\n    r: u8,\n    g: u8,\n    b: u8,\n}\n\nimpl FromStr for RGB {\n    type Err = std::num::ParseIntError;\n\n\n    // \u5c06\u5341\u516d\u8fdb\u5236\u7684\u989c\u8272\u7801\u89e3\u6790\u4e3a `RGB` \u7684\u5b9e\u4f8b\n    fn from_str(hex_code: &str) -> Result<Self, Self::Err> {\n    \n        // u8::from_str_radix(src: &str, radix: u32) \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u5207\u7247\u6309\u7167\u6307\u5b9a\u7684\u57fa\u6570\u8f6c\u6362\u4e3a u8 \u7c7b\u578b\n        let r: u8 = u8::from_str_radix(&hex_code[1..3], 16)?;\n        let g: u8 = u8::from_str_radix(&hex_code[3..5], 16)?;\n        let b: u8 = u8::from_str_radix(&hex_code[5..7], 16)?;\n\n        Ok(RGB { r, g, b })\n    }\n}\n\nfn main {\n    let code: &str = &r"#fa7268";\n    match RGB::from_str(code) {\n        Ok(rgb) => {\n            println!(\n                r"The RGB color code is: R: {} G: {} B: {}",\n                rgb.r, rgb.g, rgb.b\n            );\n        }\n        Err(_) => {\n            println!("{} is not a valid color hex code!", code);\n        }\n    }\n\n    // \u6d4b\u8bd5 from_str \u662f\u5426\u6309\u7167\u9884\u671f\u5de5\u4f5c\n    assert_eq!(\n        RGB::from_str(&r"#fa7268").unwrap,\n        RGB {\n            r: 250,\n            g: 114,\n            b: 104\n        }\n    );\n}\n')),(0,i.kt)("h3",{id:"\u5b9e\u73b0-display-\u7279\u5f81"},"\u5b9e\u73b0 Display \u7279\u5f81"),(0,i.kt)("p",null,"@todo"))}d.isMDXComponent=!0}}]);