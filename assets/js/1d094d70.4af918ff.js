"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[426],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||s;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8911:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=t(7462),a=t(3366),s=(t(7294),t(3905)),o=["components"],i={},l="\u6b63\u5219\u8868\u8fbe\u5f0f",c={unversionedId:"rusty/text/regex",id:"rusty/text/regex",isDocsHomePage:!1,title:"\u6b63\u5219\u8868\u8fbe\u5f0f",description:"\u9a8c\u8bc1\u90ae\u4ef6\u683c\u5f0f\u5e76\u53d6\u51fa @ \u524d\u7684\u4fe1\u606f",source:"@site/docs/rusty/text/regex.md",sourceDirName:"rusty/text",slug:"/rusty/text/regex",permalink:"/rooctblog/docs/rusty/text/regex",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"TCP/IP",permalink:"/rooctblog/docs/rusty/protocols/tcpip"},next:{title:"\u5b57\u7b26\u4e32\u89e3\u6790",permalink:"/rooctblog/docs/rusty/text/string"}},u=[{value:"\u9a8c\u8bc1\u90ae\u4ef6\u683c\u5f0f\u5e76\u53d6\u51fa @ \u524d\u7684\u4fe1\u606f",id:"\u9a8c\u8bc1\u90ae\u4ef6\u683c\u5f0f\u5e76\u53d6\u51fa--\u524d\u7684\u4fe1\u606f",children:[]},{value:"\u4ece\u6587\u672c\u4e2d\u63d0\u51fa # \u5f00\u5934\u7684\u6807\u7b7e",id:"\u4ece\u6587\u672c\u4e2d\u63d0\u51fa--\u5f00\u5934\u7684\u6807\u7b7e",children:[]},{value:"\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u51fa\u6240\u6709\u624b\u673a\u53f7",id:"\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u51fa\u6240\u6709\u624b\u673a\u53f7",children:[]},{value:"\u901a\u8fc7\u591a\u4e2a\u6b63\u5219\u6765\u8fc7\u6ee4\u65e5\u5fd7\u6587\u4ef6",id:"\u901a\u8fc7\u591a\u4e2a\u6b63\u5219\u6765\u8fc7\u6ee4\u65e5\u5fd7\u6587\u4ef6",children:[]},{value:"\u5c06\u6587\u672c\u4e2d\u6240\u6709\u7684\u6307\u5b9a\u6a21\u5f0f\u66ff\u6362\u6210\u53e6\u5916\u4e00\u79cd\u6a21\u5f0f",id:"\u5c06\u6587\u672c\u4e2d\u6240\u6709\u7684\u6307\u5b9a\u6a21\u5f0f\u66ff\u6362\u6210\u53e6\u5916\u4e00\u79cd\u6a21\u5f0f",children:[]}],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"\u6b63\u5219\u8868\u8fbe\u5f0f"},"\u6b63\u5219\u8868\u8fbe\u5f0f"),(0,s.kt)("h3",{id:"\u9a8c\u8bc1\u90ae\u4ef6\u683c\u5f0f\u5e76\u53d6\u51fa--\u524d\u7684\u4fe1\u606f"},"\u9a8c\u8bc1\u90ae\u4ef6\u683c\u5f0f\u5e76\u53d6\u51fa @ \u524d\u7684\u4fe1\u606f"),(0,s.kt)("p",null,"\u4e0b\u9762\u4ee3\u7801\u4f7f\u7528 ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/regex/latest/regex/"},"regex")," \u5305\u6765\u9a8c\u8bc1\u90ae\u4ef6\u683c\u5f0f\u7684\u6b63\u786e\u6027\uff0c\u7136\u540e\u63d0\u53d6\u51fa ",(0,s.kt)("inlineCode",{parentName:"p"},"@")," \u7b26\u53f7\u524d\u7684\u6240\u6709\u5185\u5bb9\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use lazy_static::lazy_static;\n\nuse regex::Regex;\n\nfn extract_login(input: &str) -> Option<&str> {\n    lazy_static! {\n        static ref RE: Regex = Regex::new(r"(?x)\n            ^(?P<login>[^@\\s]+)@\n            ([[:word:]]+\\.)*\n            [[:word:]]+$\n            ").unwrap;\n    }\n    RE.captures(input).and_then(|cap| {\n        cap.name("login").map(|login| login.as_str)\n    })\n}\n\nfn main {\n    assert_eq!(extract_login(r"I\u2764email@example.com"), Some(r"I\u2764email"));\n    assert_eq!(\n        extract_login(r"sdf+sdsfsd.as.sdsd@jhkk.d.rl"),\n        Some(r"sdf+sdsfsd.as.sdsd")\n    );\n    assert_eq!(extract_login(r"More@Than@One@at.com"), None);\n    assert_eq!(extract_login(r"Not an email@email"), None);\n}\n')),(0,s.kt)("h3",{id:"\u4ece\u6587\u672c\u4e2d\u63d0\u51fa--\u5f00\u5934\u7684\u6807\u7b7e"},"\u4ece\u6587\u672c\u4e2d\u63d0\u51fa # \u5f00\u5934\u7684\u6807\u7b7e"),(0,s.kt)("p",null,"\u4f8b\u5b50\u5bf9\u6807\u7b7e\u8fdb\u884c\u63d0\u53d6\u3001\u6392\u5e8f\u548c\u53bb\u91cd\u3002\u9700\u8981\u6ce8\u610f\uff0c\u4e0b\u9762\u7684\u6807\u7b7e\u4ec5\u4ec5\u662f\u62c9\u4e01\u5b57\u6bcd\u7684\uff0c\u5982\u679c\u4f60\u8981\u652f\u6301\u66f4\u591a\u7684\u5b57\u6bcd\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/twitter/twitter-text/blob/c9fc09782efe59af4ee82855768cfaf36273e170/java/src/com/twitter/Regex.java#L255"},"Twitter \u7684\u6b63\u5219\u8bed\u6cd5"),"\uff0c\u53cb\u60c5\u63d0\u793a\uff0c\u590d\u6742\u7684\u591a\uff01"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use lazy_static::lazy_static;\n\nuse regex::Regex;\nuse std::collections::HashSet;\n\nfn extract_hashtags(text: &str) -> HashSet<&str> {\n    lazy_static! {\n        static ref HASHTAG_REGEX : Regex = Regex::new(\n                r"\\#[a-zA-Z][0-9a-zA-Z_]*"\n            ).unwrap;\n    }\n    HASHTAG_REGEX.find_iter(text).map(|mat| mat.as_str).collect\n}\n\nfn main {\n    let tweet = "Hey #world, I just got my new #dog, say hello to Till. #dog #forever #2 #_ ";\n    let tags = extract_hashtags(tweet);\n    assert!(tags.contains("#dog") && tags.contains("#forever") && tags.contains("#world"));\n    assert_eq!(tags.len, 3);\n}\n')),(0,s.kt)("h3",{id:"\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u51fa\u6240\u6709\u624b\u673a\u53f7"},"\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u51fa\u6240\u6709\u624b\u673a\u53f7"),(0,s.kt)("p",null,"[Regex::captures_iter]"," \u53ef\u4ee5\u5bf9\u5b57\u7b26\u4e32\u578b\u6587\u672c\u8fdb\u884c\u5904\u7406\uff0c\u4ee5\u83b7\u53d6\u6587\u672c\u4e2d\u7684\u591a\u4e2a\u624b\u673a\u53f7\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u9002\u7528\u4e8e\u7f8e\u56fd\u7684\u53f7\u7801\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'#use error_chain::error_chain;\n\nuse regex::Regex;\nuse std::fmt;\n\n#error_chain!{\n#    foreign_links {\n#        Regex(regex::Error);\n#        Io(std::io::Error);\n#    }\n#}\n\nstruct PhoneNumber<\'a> {\n    area: &\'a str,\n    exchange: &\'a str,\n    subscriber: &\'a str,\n}\n\nimpl<\'a> fmt::Display for PhoneNumber<\'a> {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "1 ({}) {}-{}", self.area, self.exchange, self.subscriber)\n    }\n}\n\nfn main -> Result<> {\n    let phone_text = "\n    +1 505 881 9292 (v) +1 505 778 2212 (c) +1 505 881 9297 (f)\n    (202) 991 9534\n    Alex 5553920011\n    1 (800) 233-2010\n    1.299.339.1020";\n\n    let re = Regex::new(\n        r#"(?x)\n          (?:\\+?1)?                       # Country Code Optional\n          [\\s\\.]?\n          (([2-9]\\d{2})|\\(([2-9]\\d{2})\\)) # Area Code\n          [\\s\\.\\-]?\n          ([2-9]\\d{2})                    # Exchange Code\n          [\\s\\.\\-]?\n          (\\d{4})                         # Subscriber Number"#,\n    )?;\n\n    let phone_numbers = re.captures_iter(phone_text).filter_map(|cap| {\n        let groups = (cap.get(2).or(cap.get(3)), cap.get(4), cap.get(5));\n        match groups {\n            (Some(area), Some(ext), Some(sub)) => Some(PhoneNumber {\n                area: area.as_str,\n                exchange: ext.as_str,\n                subscriber: sub.as_str,\n            }),\n            _ => None,\n        }\n    });\n\n    assert_eq!(\n        phone_numbers.map(|m| m.to_string).collect::<Vec<_>>,\n        vec![\n            "1 (505) 881-9292",\n            "1 (505) 778-2212",\n            "1 (505) 881-9297",\n            "1 (202) 991-9534",\n            "1 (555) 392-0011",\n            "1 (800) 233-2010",\n            "1 (299) 339-1020",\n        ]\n    );\n\n    Ok()\n}\n')),(0,s.kt)("h3",{id:"\u901a\u8fc7\u591a\u4e2a\u6b63\u5219\u6765\u8fc7\u6ee4\u65e5\u5fd7\u6587\u4ef6"},"\u901a\u8fc7\u591a\u4e2a\u6b63\u5219\u6765\u8fc7\u6ee4\u65e5\u5fd7\u6587\u4ef6"),(0,s.kt)("p",null,'\u4f8b\u5b50\u7684\u76ee\u6807\u662f\u8fc7\u6ee4\u51fa\u5305\u542b "version X.X.X"\u3001\u4ee5 443 \u7ed3\u5c3e\u7684 IP \u5730\u5740\u548c\u7279\u522b\u7684\u8b66\u544a\u7684\u65e5\u5fd7\u884c\u3002'),(0,s.kt)("p",null,"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u5728\u6b63\u5219\u4e2d\u53cd\u659c\u6760\u975e\u5e38\u5e38\u89c1\uff0c\u56e0\u6b64\u4f7f\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},'r#""')," \u5f62\u5f0f\u7684\u539f\u751f\u5b57\u7b26\u4e32\u5bf9\u4e8e\u5f00\u53d1\u8005\u548c\u4f7f\u7528\u8005\u90fd\u66f4\u52a0\u53cb\u597d\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'#use error_chain::error_chain;\n\nuse std::fs::File;\nuse std::io::{BufReader, BufRead};\nuse regex::RegexSetBuilder;\n\n#error_chain! {\n#    foreign_links {\n#        Io(std::io::Error);\n#        Regex(regex::Error);\n#    }\n#}\n\nfn main -> Result<> {\n    let log_path = "application.log";\n    let buffered = BufReader::new(File::open(log_path)?);\n\n    let set = RegexSetBuilder::new(&[\n        r#"version "\\d\\.\\d\\.\\d""#,\n        r#"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:443"#,\n        r#"warning.*timeout expired"#,\n    ]).case_insensitive(true)\n        .build?;\n\n    buffered\n        .lines\n        .filter_map(|line| line.ok)\n        .filter(|line| set.is_match(line.as_str))\n        .for_each(|x| println!("{}", x));\n\n    Ok()\n}\n')),(0,s.kt)("h3",{id:"\u5c06\u6587\u672c\u4e2d\u6240\u6709\u7684\u6307\u5b9a\u6a21\u5f0f\u66ff\u6362\u6210\u53e6\u5916\u4e00\u79cd\u6a21\u5f0f"},"\u5c06\u6587\u672c\u4e2d\u6240\u6709\u7684\u6307\u5b9a\u6a21\u5f0f\u66ff\u6362\u6210\u53e6\u5916\u4e00\u79cd\u6a21\u5f0f"),(0,s.kt)("p",null,"\u4e0b\u9762\u4ee3\u7801\u5c06\u6807\u51c6\u7684 ISO 8601 YYYY-MM-DD \u65e5\u671f\u6a21\u5f0f\u66ff\u6362\u6210\u5e26\u6709\u659c\u6760\u7684\u7f8e\u5f0f\u82f1\u8bed\u65e5\u671f\u3002\u4f8b\u5982 ",(0,s.kt)("inlineCode",{parentName:"p"},"2013-01-15")," -> ",(0,s.kt)("inlineCode",{parentName:"p"},"01/15/2013"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use lazy_static::lazy_static;\n\nuse std::borrow::Cow;\nuse regex::Regex;\n\nfn reformat_dates(before: &str) -> Cow<str> {\n    lazy_static! {\n        static ref ISO8601_DATE_REGEX : Regex = Regex::new(\n            r"(?P<y>\\d{4})-(?P<m>\\d{2})-(?P<d>\\d{2})"\n            ).unwrap;\n    }\n    ISO8601_DATE_REGEX.replace_all(before, "$m/$d/$y")\n}\n\nfn main {\n    let before = "2012-03-14, 2013-01-15 and 2014-07-05";\n    let after = reformat_dates(before);\n    assert_eq!(after, "03/14/2012, 01/15/2013 and 07/05/2014");\n}\n')))}d.isMDXComponent=!0}}]);