"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6867],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),g=c(n),d=a,f=g["".concat(u,".").concat(d)]||g[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2881:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},u="\u54c8\u5e0c",c={unversionedId:"rusty/algos/cryptography/hashing",id:"rusty/algos/cryptography/hashing",isDocsHomePage:!1,title:"\u54c8\u5e0c",description:"\u8ba1\u7b97\u6587\u4ef6\u7684 SHA-256 \u6458\u8981",source:"@site/docs/rusty/algos/cryptography/hashing.md",sourceDirName:"rusty/algos/cryptography",slug:"/rusty/algos/cryptography/hashing",permalink:"/rooctblog/docs/rusty/algos/cryptography/hashing",tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u52a0\u5bc6",permalink:"/rooctblog/docs/rusty/algos/cryptography/encryption"},next:{title:"\u6570\u636e\u7ed3\u6784",permalink:"/rooctblog/docs/rusty/algos/datastructures/awesome"}},l=[{value:"\u8ba1\u7b97\u6587\u4ef6\u7684 SHA-256 \u6458\u8981",id:"\u8ba1\u7b97\u6587\u4ef6\u7684-sha-256-\u6458\u8981",children:[]},{value:"\u4f7f\u7528 HMAC \u6458\u8981\u6765\u7b7e\u540d\u548c\u9a8c\u8bc1\u6d88\u606f",id:"\u4f7f\u7528-hmac-\u6458\u8981\u6765\u7b7e\u540d\u548c\u9a8c\u8bc1\u6d88\u606f",children:[]}],p={toc:l};function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u54c8\u5e0c"},"\u54c8\u5e0c"),(0,o.kt)("h3",{id:"\u8ba1\u7b97\u6587\u4ef6\u7684-sha-256-\u6458\u8981"},"\u8ba1\u7b97\u6587\u4ef6\u7684 SHA-256 \u6458\u8981"),(0,o.kt)("p",null,"\u5199\u5165\u4e00\u4e9b\u6570\u636e\u5230\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f7f\u7528 ",(0,o.kt)("a",{parentName:"p",href:"https://briansmith.org/rustdoc/ring/digest/struct.Context.html"},"digest::Context")," \u6765\u8ba1\u7b97\u6587\u4ef6\u5185\u5bb9\u7684 SHA-256 \u6458\u8981 ",(0,o.kt)("a",{parentName:"p",href:"https://briansmith.org/rustdoc/ring/digest/struct.Digest.html"},"digest::Digest"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'# use error_chain::error_chain;\nuse data_encoding::HEXUPPER;\nuse ring::digest::{Context, Digest, SHA256};\nuse std::fs::File;\nuse std::io::{BufReader, Read, Write};\n\n# error_chain! {\n#    foreign_links {\n#        Io(std::io::Error);\n#        Decode(data_encoding::DecodeError);\n#    }\n# }\n\nfn sha256_digest<R: Read>(mut reader: R) -> Result<Digest> {\n    let mut context = Context::new(&SHA256);\n    let mut buffer = [0; 1024];\n\n    loop {\n        let count = reader.read(&mut buffer)?;\n        if count == 0 {\n            break;\n        }\n        context.update(&buffer[..count]);\n    }\n\n    Ok(context.finish)\n}\n\nfn main -> Result<> {\n    let path = "file.txt";\n\n    let mut output = File::create(path)?;\n    write!(output, "We will generate a digest of this text")?;\n\n    let input = File::open(path)?;\n    let reader = BufReader::new(input);\n    let digest = sha256_digest(reader)?;\n\n    println!("SHA-256 digest is {}", HEXUPPER.encode(digest.as_ref));\n\n    Ok()\n}\n')),(0,o.kt)("h3",{id:"\u4f7f\u7528-hmac-\u6458\u8981\u6765\u7b7e\u540d\u548c\u9a8c\u8bc1\u6d88\u606f"},"\u4f7f\u7528 HMAC \u6458\u8981\u6765\u7b7e\u540d\u548c\u9a8c\u8bc1\u6d88\u606f"),(0,o.kt)("p",null,"\u4f7f\u7528 ",(0,o.kt)("a",{parentName:"p",href:"https://briansmith.org/rustdoc/ring/hmac/"},"ring::hmac")," \u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u7b7e\u540d\u5e76\u68c0\u67e5\u8be5\u7b7e\u540d\u7684\u6b63\u786e\u6027\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'use ring::{hmac, rand};\nuse ring::rand::SecureRandom;\nuse ring::error::Unspecified;\n\nfn main -> Result<, Unspecified> {\n    let mut key_value = [0u8; 48];\n    let rng = rand::SystemRandom::new;\n    rng.fill(&mut key_value)?;\n    let key = hmac::Key::new(hmac::HMAC_SHA256, &key_value);\n\n    let message = "Legitimate and important message.";\n    let signature = hmac::sign(&key, message.as_bytes);\n    hmac::verify(&key, message.as_bytes, signature.as_ref)?;\n\n    Ok()\n}\n')))}g.isMDXComponent=!0}}]);